{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"a861e51d8b604bd98c4aac9f4338fa4fb2084a32","modified":1563155040833},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1550755588377},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1550755588377},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1550755588377},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1550755588377},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1563155040837},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1550755588380},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1550755588380},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1550755588380},{"_id":"themes/next/README.md","hash":"2fcc7621e898732ef7976b89ca2511f84c577c35","modified":1563155040837},{"_id":"themes/next/_config.yml","hash":"f3c0cfc9f3ae2c115320abc8a599ff65ab9e3744","modified":1563159946703},{"_id":"themes/next/bower.json","hash":"e6a80b9ed2d618d1cca5781952c67167a7cfac07","modified":1563155040837},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1550755588380},{"_id":"themes/next/gulpfile.coffee","hash":"899001c864f975082ca1bc6b3fe3c614007baf8a","modified":1563155040837},{"_id":"themes/next/package.json","hash":"abefbba4150026ec8b3d8e79c7e874964bd3dc76","modified":1563155040840},{"_id":"source/about/index.md","hash":"824db884c0133324acd31c5b3b849dc63b7e89ae","modified":1550812472884},{"_id":"source/_posts/CAP和BASE理论.md","hash":"7b0d7368f7086bc555d6b6801164febd6169b96f","modified":1551338629841},{"_id":"source/_posts/docker-compose的使用.md","hash":"67ff226337b507c0ea5217334ac50c44f49106df","modified":1562748211701},{"_id":"source/_posts/docker-hub与私有docker-registry.md","hash":"b58cae1e1aa15d39637551014b873eb76924ebd8","modified":1562745993038},{"_id":"source/_posts/dubbo异常过滤.md","hash":"4680bab487408610f9cbabbb8ccb627e4bc2e4fd","modified":1551684336638},{"_id":"source/_posts/docker命令.md","hash":"bf67212caf8c2cbb517c978c605649914468fe9b","modified":1562751370998},{"_id":"source/_posts/docker数据挂载.md","hash":"c45ae3af88c5091983f6cf2c3439341a503b50a9","modified":1562747523278},{"_id":"source/_posts/java程序运行原理.md","hash":"7b8f86fe549a30ad56a9a9b78ff7ac4a6a787bb7","modified":1551751126751},{"_id":"source/_posts/spring面试要点.md","hash":"fd0dbea17781e83d3f5d355bca2a7799782b2753","modified":1551860467441},{"_id":"source/_posts/synchroniezd锁优化.md","hash":"c4e6c3e5ee00ece3c238f0eee2d45ed7974064e9","modified":1551423273072},{"_id":"source/_posts/内存屏障和CPU缓存.md","hash":"88660bc113a3d191c3f6184024e3397d5e656f91","modified":1551420396498},{"_id":"source/_posts/参数调优.md","hash":"036b77e8cf0be4cc4bde46a452fbc0740812d92a","modified":1552550199127},{"_id":"source/_posts/中间件面试要点.md","hash":"728a836174f03dec75607f0bcf9cc97f9ef6d06c","modified":1552549952870},{"_id":"source/_posts/使用dockerfile构建镜像.md","hash":"a0a06ffa3b1a37b6e4fb71c598a3aafa3a440d76","modified":1562749936535},{"_id":"source/_posts/log4j2-xml生产级配置.md","hash":"2ebed65b546436ef40ec3b02facbbfa6f7c9faeb","modified":1551333762448},{"_id":"source/_posts/开发必知的几个开源协议.md","hash":"c1c024bcd56dcca1c11abd8d45bcdf662014c5c9","modified":1551684354518},{"_id":"source/_posts/多线程并发面试要点.md","hash":"2ae9e47af2dbdc1c2abdd7fbf885f287c88bb9c3","modified":1551752492164},{"_id":"source/_posts/线程状态.md","hash":"cdb3b51531486ce87b330815984ec9dc22b09db1","modified":1551750044541},{"_id":"source/_posts/线程终止.md","hash":"93f6569234ffa5566206d907824d761ee383bfb4","modified":1551684295988},{"_id":"source/_posts/数据库面试要点.md","hash":"20c525847389b296784fe4ab4784544609c72684","modified":1551871113655},{"_id":"source/categories/index.md","hash":"7a049521a677c198c8d15b87a70c1ad5f4d9ef1e","modified":1550762803070},{"_id":"source/tags/index.md","hash":"107f47c0f9a02251943ba790dbe7c597fe9d4618","modified":1550762774963},{"_id":"source/_posts/部署策略、高可用、高可靠等面试要点.md","hash":"d6310b608f1feca286bd79215eaa4273fce92106","modified":1557851967425},{"_id":"themes/next/.git/FETCH_HEAD","hash":"86ef0c7621252ca5e75cf31a8e268d963175383e","modified":1563155040823},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1550755588367},{"_id":"themes/next/.git/ORIG_HEAD","hash":"83e61d9c5dc9b5f79975035e6dbb652be54aca2c","modified":1563155040830},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1550755588367},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1550755563293},{"_id":"themes/next/.git/packed-refs","hash":"7b5d54ae411bb820f20ed2a9d0377fc2d7ce8e85","modified":1550755588367},{"_id":"source/images/avatar.jpg","hash":"56337a225e4091684f928d5b8e52659e036cca76","modified":1550758710427},{"_id":"themes/next/.git/index","hash":"82f064d433218437cd29c10b46c3e3d1411ed365","modified":1563155053330},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1563155040833},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1550755588380},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1563155040833},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1563155040833},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1563155040833},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1563155040833},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1563155040833},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1563155040833},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"d366609651386c65ee842d47d10d7cf971790383","modified":1563155040833},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1563155040833},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1563155040837},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1563155040837},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"4094dab82cbdfdd0de117e94b508bbd5ceb3d363","modified":1563155040837},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1550755588383},{"_id":"themes/next/docs/AUTHORS.md","hash":"265b3ae69a83efb2e0ce5308ef2dc0f5f1ea0b56","modified":1563155040837},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1550755588383},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1563155040833},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1550755588383},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1550755588383},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1550755588383},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1550755588383},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1563155040837},{"_id":"themes/next/languages/de.yml","hash":"88dcfa3e53cef1b7f858f98ca9f980179169ae4c","modified":1563155040837},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1550755588387},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1550755588387},{"_id":"themes/next/languages/es.yml","hash":"a5203c7bbae70bc40f2ee526f9e8105ca9be851e","modified":1563155040837},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1563155040837},{"_id":"themes/next/languages/fa.yml","hash":"cc1f3a13e020e2cc666ddc57aaebc4c1ebd669d0","modified":1563155040837},{"_id":"themes/next/languages/hu.yml","hash":"3b4c10c86a228da70dc4b1a1784a6f942e186032","modified":1563155040837},{"_id":"themes/next/languages/fr.yml","hash":"c1e2e892c678920854e1f3df409118398523849e","modified":1563155040837},{"_id":"themes/next/languages/id.yml","hash":"3a9f4485e6801e0e6fae749133a52e3797760795","modified":1563155040837},{"_id":"themes/next/languages/it.yml","hash":"28ff9197a3d21e838e33bb026d8adb544320cb1a","modified":1563155040837},{"_id":"themes/next/languages/ja.yml","hash":"8f85a6500716191159f16c7f484ba61ddd16eeb6","modified":1563155040837},{"_id":"themes/next/languages/ko.yml","hash":"1df31bf037bcb6868a4bd60c49ff55eec5b8167f","modified":1563155040837},{"_id":"themes/next/languages/nl.yml","hash":"6f4a339ecc67a140f3f9c7bec369cbda6b45afd7","modified":1563155040837},{"_id":"themes/next/languages/pt.yml","hash":"6d87701443e33a13574049e613f064f1eb250c95","modified":1563155040837},{"_id":"themes/next/languages/pt-BR.yml","hash":"301a0535df5de7b585c7c9752053c41c6ef26f9b","modified":1563155040837},{"_id":"themes/next/languages/ru.yml","hash":"93872ac01074159566ee3e1738eea6e9216bab8e","modified":1563155040837},{"_id":"themes/next/languages/tr.yml","hash":"5489606e6c40c0b226a3414c8e5037aac965211d","modified":1563155040837},{"_id":"themes/next/languages/uk.yml","hash":"765ba405778f07d7ec3713606568852b04e1a862","modified":1563155040837},{"_id":"themes/next/languages/vi.yml","hash":"6a812db8606498980cd64f001e9ef2f50e124809","modified":1563155040837},{"_id":"themes/next/languages/zh-CN.yml","hash":"f311ad2cc2edba144764c36c0035b6ed0d356a53","modified":1563155040837},{"_id":"themes/next/languages/zh-TW.yml","hash":"3f3674cac8f47a9a509a7557ea1557bbfbd027e8","modified":1563155040837},{"_id":"themes/next/languages/zh-HK.yml","hash":"7a5e47f561d4b6e132f7f3b09676afbf8520264e","modified":1563155040837},{"_id":"themes/next/layout/_layout.swig","hash":"46b0b75afbdbdbc2ce03a84e55363cf75d58e5bb","modified":1563155040837},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1563155040840},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1563155040840},{"_id":"themes/next/layout/index.swig","hash":"9b4733d037c360e8504645b1d6c6dd17817c9d7b","modified":1563155040840},{"_id":"themes/next/layout/page.swig","hash":"29c64c7031aaf276d3d11cdf2e95025996fd6eed","modified":1563155040840},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1551105968870},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1550755588400},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1563155040840},{"_id":"themes/next/scripts/injects-point.js","hash":"e6ef2f179c4d52d3175e655f9725d6195b5be51b","modified":1563155040840},{"_id":"themes/next/scripts/injects.js","hash":"f11bf387782cc0fcc8e64a374abbcad5b9e080c8","modified":1563155040840},{"_id":"themes/next/scripts/merge-configs.js","hash":"8d2d3844ad5c29206a05986ab1e6deb88667537e","modified":1563155040840},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1550755588403},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1550755588437},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1550755588437},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1550755588437},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550755588417},{"_id":"source/_posts/2019/yycTest.md","hash":"9b633232a69e2ed12c4eb598b1b59c37feb96e90","modified":1563157233300},{"_id":"source/_posts/中间件面试要点/redis线程模型.png","hash":"ef238f0e57d265a04ea4dc59b3d3298c05562e02","modified":1551856354054},{"_id":"source/_posts/数据库面试要点/死锁1.jpg","hash":"905b889e610ef36507ae5dd9338eca69eba7c7b8","modified":1551682223201},{"_id":"source/_posts/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg","hash":"0cc970c769a39b5063fd60a44701a785abc797e5","modified":1551684999354},{"_id":"source/_posts/部署策略、高可用、高可靠等面试要点/dns轮询.png","hash":"3fae19b9d17b06cad23608cc3c22b31f6527e08f","modified":1551684999354},{"_id":"source/_posts/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg","hash":"3df5b3bdbda0cd73df48ca5427f276ecd9e72964","modified":1551684999354},{"_id":"source/_posts/数据库面试要点/死锁2.jpg","hash":"b6aef161851059ab8b05cada6b1688e5f880b546","modified":1551682223201},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1550755563293},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1550755563293},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1550755563293},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1550755563293},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1550755563293},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1550755563293},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1550755563293},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1550755563293},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1550755563293},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1550755563293},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1550755563293},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1550755563293},{"_id":"themes/next/.git/logs/HEAD","hash":"80a82e7e50fcce81354d114eeac2aed3f601c446","modified":1563155053290},{"_id":"themes/next/.git/refs/stash","hash":"1b662061838b211621d986d8cabea05da598470c","modified":1551147905070},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1563155040833},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1563155040833},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1563155040833},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1563155040833},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1550755588383},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1550755588383},{"_id":"themes/next/docs/ru/README.md","hash":"932d3965d8b1a1ff653c07a0cafcdbf5892d6945","modified":1563155040837},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1550755588383},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1563155040837},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1563155040837},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"93e45568d6225396efe5168606e856b3c4fd8ad4","modified":1563155040837},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1550755588387},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1550755588387},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1550755588387},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1563155040837},{"_id":"themes/next/docs/zh-CN/README.md","hash":"79a73361b24e7fb7022992702961faacd6a2f9fe","modified":1563155040837},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1550755588387},{"_id":"themes/next/layout/_macro/post.swig","hash":"b7f4b9fb69388a308f2ba430bca035aede001d3d","modified":1563155040840},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1550755588390},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"348efa7fcc243fafe07897af6eafe066320be3a5","modified":1563155040840},{"_id":"themes/next/layout/_partials/comments.swig","hash":"784356dd77fe96ea1bc4cb0008e2b40de71bf2f0","modified":1563155040840},{"_id":"themes/next/layout/_partials/footer.swig","hash":"97953309b3ab354b8b7cf011850df42bc14b595d","modified":1563155040840},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1563155040840},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1550755588393},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1550755588393},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"5db3bf74183de45bb4d6e4632a91f1a561467f17","modified":1563155040840},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1563155040840},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"283e78eb795f52236026434dab6a0667f14d3c08","modified":1563155040840},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1550755588393},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1563155040840},{"_id":"themes/next/layout/_scripts/three.swig","hash":"cf1819fc0a075d2389ca491740c98eba54ba72a6","modified":1563155040840},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4cb999150bdd41d6a5f5b27f44a05e7fbcb7379c","modified":1563155040840},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1550755588397},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1550755588397},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"c59b04402ea02e52ea3dedc34217be0f0d1ad0ac","modified":1563155040840},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1550755588400},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1563155040840},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1550755588400},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1563155040840},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1563155040840},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1550755588400},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1551148049983},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1563155040840},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1550755588400},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1550755588400},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ed8b2871c10d7d1128bda48582997a4b926290de","modified":1563155040840},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1550755588400},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1563155040840},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"3d424ad75b1431f57f8d1d0218b2a06ecc0a6e70","modified":1563155040840},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1550755588403},{"_id":"themes/next/scripts/tags/full-image.js","hash":"149de45ff83403e97f6affa280072392dca42e4f","modified":1563155040840},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1563155040840},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1550755588403},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1563155040840},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1563155040840},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1563155040840},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1563155040840},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1563155040840},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1563155040840},{"_id":"themes/next/source/css/main.styl","hash":"7b5a1b48e95fb0d6a75be2ef7318a9a1fe71d09c","modified":1563155040843},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1550755588417},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1550755588417},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1563155040843},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1550755588417},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1550755588417},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1550755588417},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1550755588417},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1550755588417},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1550755588417},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1550755588417},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1550755588417},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1550755588417},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1550755588417},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1550755588417},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1550755588417},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1563155040850},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1563155040850},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1563155040850},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1563155040850},{"_id":"themes/next/source/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1563155040843},{"_id":"themes/next/source/js/next-boot.js","hash":"d673f486417eaf1925ffecc3c4720850cad2ada3","modified":1563155040843},{"_id":"themes/next/source/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1563155040850},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1563155040850},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1563155040850},{"_id":"themes/next/source/js/utils.js","hash":"c11f610e19fcbdb3d692bc5a17e43ef3338d81cc","modified":1563155040850},{"_id":"source/_posts/java程序运行原理/JVM运行时数据区.png","hash":"8b2cea7d5340559a7db91e76d211ebba1aa81f75","modified":1551102210277},{"_id":"source/_posts/开发必知的几个开源协议/开源协议对比图.jpg","hash":"6cd3dee5bb91131774b73dbdf8962a4771475a5c","modified":1551159251453},{"_id":"source/_posts/部署策略、高可用、高可靠等面试要点/一致性hash.png","hash":"f28ef4ef7ca80cfb19ed61af46076d2084d8f1b6","modified":1552446810739},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550755588410},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550755588410},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550755588413},{"_id":"source/_posts/2019/07/yycTest2.md","hash":"d8660f9277d1cf7815a16d98d993748a386ce054","modified":1563158418890},{"_id":"themes/next/.git/objects/0c/26dcae1dd841e94a062ed9efefb33c0df76456","hash":"8df53adb58625487142494f5584958018823bf54","modified":1551148093807},{"_id":"themes/next/.git/objects/0f/f9db5bcb94c09ab6b67872a41904376e6b9bc2","hash":"05a1ed48bc8ff8e26762f1de682776ed6cb1ed1a","modified":1551148959647},{"_id":"themes/next/.git/objects/37/8a453d53fde99e7375d4a099fa50f9e18487ee","hash":"60fde0e42a2b79bda46c723108f49723173f40f6","modified":1551148016000},{"_id":"themes/next/.git/objects/30/c11b353b409b2503477a1dff2bd405d4ffc134","hash":"6dd4243479ec442eba19ba0feb7526ab39bc7ecd","modified":1551148954907},{"_id":"themes/next/.git/objects/00/51fae85b74d2c223579c1d63d742c2436b8e86","hash":"14dd30f54d8cb458eccf880bc987d8ffdf71f4f0","modified":1551148959637},{"_id":"themes/next/.git/objects/3a/7dca9c94bf4e7535a07f42dc5d5680c81faa08","hash":"3fe81e1a14764994a519b7d54215cead86f007de","modified":1551148016000},{"_id":"themes/next/.git/objects/4b/c00aa79fcfa7928468e77c9f61dbddc5f75576","hash":"67b6440761402c73c852e630b10ac1672ab0fbc6","modified":1551148016000},{"_id":"themes/next/.git/objects/3b/f4c94f3b79c0c46e1a48d2ec72f15e96aea2ff","hash":"c714d8bb52afac9da7a00543d625d37afb8e63c3","modified":1551147905000},{"_id":"themes/next/.git/objects/52/f30624b7d2b61e26309647f12cc6450f0f9087","hash":"40a05c42c4ad919fdaffabf640d3f02d150a6629","modified":1551148016863},{"_id":"themes/next/.git/objects/50/4a3bcd026020893cdceffc33f23bd0edee9126","hash":"2ddec75f14170a3d309e25ddc98055007d46c457","modified":1551148396127},{"_id":"themes/next/.git/objects/4d/6b213730e104bfbbfcb4c4359993e49bf55dd7","hash":"a9dedd6545cae6e50ebb10cb959a15c67283d29a","modified":1551147905000},{"_id":"themes/next/.git/logs/refs/stash","hash":"e4c30a2cf41c5f2fab4ea5082cf06665a7247dd1","modified":1551147905070},{"_id":"themes/next/.git/objects/5a/ca1fb417340b414e27d6473431685d990007e4","hash":"c557c5612e18670bcbe6eaba53bf7e07e6b19399","modified":1551148016867},{"_id":"themes/next/.git/objects/5c/52740dc8319470e552356ba7ebc1d1c7e6b6c3","hash":"52ade152f23e969eaec779a4aefa73572b280814","modified":1563155040853},{"_id":"themes/next/.git/objects/5d/8d2232159ab4b0438fc36673d3df1184d0f8c1","hash":"919ad9686125fea231f597c03c1056dd014005c1","modified":1551148959000},{"_id":"themes/next/.git/objects/5e/206fe3c15a2a807797318dc31813f0e03455a1","hash":"37b06d0544281e651e6ff5779c93906800e00379","modified":1551148016000},{"_id":"themes/next/.git/objects/61/0245c738d4fd9e220c4c022ed71e7323535272","hash":"5c8c740671a1cbe0f35a42811f1ffc414268dc87","modified":1551148396000},{"_id":"themes/next/.git/objects/69/526975a1314197718fa75f6652ee9fd36f431e","hash":"199d8e1ecf11b5a8cfe3c2c2ad9b4552d0c5c5cd","modified":1563155040857},{"_id":"themes/next/.git/objects/65/0b3fc2d61eb29d0700cda444a885e65348fa08","hash":"a030f109a999f95203adc8b4a6b8ad670b8b5936","modified":1551148016853},{"_id":"themes/next/.git/objects/6e/ca8add42c0faa531d2abaddfcf7bb603ab59ed","hash":"9b63ba6b6508813a19f869a0fe4af138c9c90abf","modified":1551148016000},{"_id":"themes/next/.git/objects/79/15b5275cd0d744589d04ef3fe6b384d0373b49","hash":"7e5de016fb77f91147aab56875d5dd96b7211089","modified":1551147905000},{"_id":"themes/next/.git/objects/79/2a2fdd10ebac5acfd1b0a879f333ecd4cd6885","hash":"b3e713ecae999fa7769ebe8c7145f4b9a6faa1db","modified":1551148081383},{"_id":"themes/next/.git/objects/71/d1c4b7fc61ac957723b7635627557aa7b90434","hash":"24be06755c615d6fd211dbe4aa0129308129932a","modified":1551148016863},{"_id":"themes/next/.git/objects/76/239558850a10e5ce1fc5f514a83c370ff31212","hash":"e1da52a79f9051d5813ef620076055be841fe4c6","modified":1563155053290},{"_id":"themes/next/.git/objects/7e/0ff0cef54238fe1b69f6341658edfad0d2c6df","hash":"29c6343fcf4c344cea8629055179581a01ec1322","modified":1551147905000},{"_id":"themes/next/.git/objects/80/33807b2d791955004a503ac31abcc35d09c163","hash":"f93ba2aa6d958b0bb44926048064d26373829e7b","modified":1563155040853},{"_id":"themes/next/.git/objects/97/22318745ddd28ae5f6c603645b42f70d1114bd","hash":"f46aba44dbd2ab78a66a70affe38f2ff5e9c983e","modified":1551148959640},{"_id":"themes/next/.git/objects/8a/65b4bdc23eb2ec48d79e2c9d8f66888efb808f","hash":"70ee569315bd25bfa7ae22c5a1bce8f6648f6272","modified":1551147905070},{"_id":"themes/next/.git/objects/a7/574d4d4c01bd3fedbbf117a4885ee4dd876ed0","hash":"7874d0916a7131d20b6278c1741c856650852dbe","modified":1551148394843},{"_id":"themes/next/.git/objects/a9/3a061d5405c9d077e13c38a927bd0330eb76f8","hash":"a23a67bbd89a10ab51f87ca8a004fbd4e41e605a","modified":1563155040853},{"_id":"themes/next/.git/objects/bc/0110775c991954a363fd97c6fe24642c00dd85","hash":"e531d180afb100504aef9e068981b9cf168a25d6","modified":1551148098897},{"_id":"themes/next/.git/objects/b3/c5487878b4c32712374abe54f39c21a2e3a2c3","hash":"1a29f722a9b1bcdb11dd37f0f8c52b44c270dd07","modified":1551148016000},{"_id":"themes/next/.git/objects/e1/ef760fecb27c13b037d5feda47031f2b1a3522","hash":"d8fc69a995d6a152ed6c257c7593c5ff55c8a50b","modified":1551148959637},{"_id":"themes/next/.git/objects/c5/67b113e25b3d4c67beae967d0026a70b574edd","hash":"d27a97dc9670081e2b716b9c3bf84807eca7ee86","modified":1551148016873},{"_id":"themes/next/.git/objects/c5/d03fe9b9b56757a06860e0741862b68133bbc4","hash":"38bb80312870b8a3b64ac48ec7c76082b73ff3a0","modified":1551147905000},{"_id":"themes/next/.git/objects/dc/1cc40405b972cbcdb29c4d9732025be25a814d","hash":"0f02c08139df94bc0a3c50b06a5061c5c225bd3c","modified":1551148075007},{"_id":"themes/next/.git/objects/fd/0ac2e21e6f8649f0120a90ab96df98195f3e30","hash":"52fb79be44df575fed6101892ca36ebb79d3b0ae","modified":1563155040857},{"_id":"themes/next/.git/objects/ec/483ad3b797b6acd27708646e82d925fd2cd582","hash":"2c72b2cf3f62e04f8eb1355633e7c8b7cb3106a8","modified":1551147905063},{"_id":"themes/next/.git/objects/pack/pack-c67800d7c11c69dd05b59e58999ac9fd5c50cb1b.idx","hash":"03dcda3ff728aa681324e665c39a6681764f86a0","modified":1551105913194},{"_id":"themes/next/.git/objects/pack/pack-dca946a6405d1c4544aeaae2a1c6961093b72457.idx","hash":"9bf4236e339758cf492e04e90e6990cb00e99f3e","modified":1551334045034},{"_id":"themes/next/.git/objects/pack/pack-c67800d7c11c69dd05b59e58999ac9fd5c50cb1b.pack","hash":"e40b8265b1c3726a6910ce4b6f8d4b71197e77f0","modified":1551148098000},{"_id":"themes/next/.git/objects/pack/pack-dca946a6405d1c4544aeaae2a1c6961093b72457.pack","hash":"f660a82ec9fcc8ba19c9841af9f22bac7eba6844","modified":1551334045034},{"_id":"themes/next/.git/refs/tags/v7.1.0","hash":"d4eb8a8fc73617512e52707a8696a911b067f12f","modified":1563155040823},{"_id":"themes/next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1563155040823},{"_id":"themes/next/.git/refs/tags/v7.1.1","hash":"9a421ea6943f449d6efad94759fbf056fb880391","modified":1563155040823},{"_id":"themes/next/.git/refs/tags/v7.1.2","hash":"5da254a35926656e17cb71d94eaee61c2610ed37","modified":1563155040823},{"_id":"themes/next/.git/refs/tags/v7.2.0","hash":"2a50b758ec214ed4b5a33e8d12624f75ab9e5fac","modified":1563155040823},{"_id":"themes/next/.git/refs/heads/master","hash":"ed379dc326bcc1eb9124c72879fe06327ad841ea","modified":1563155053290},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1550755588390},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"9257da95bd032bb3bd1da670e302fd2c7d5610b6","modified":1563155040837},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1563155040840},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"3d15b2e12a2749b14cbb897d9ff5c4e9f30b9d78","modified":1551148903370},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"dec2d88ba95a69ce2796015eb712f24ef34ad82a","modified":1563155040840},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7e3d5b40a8e13ce3bb5f28cb23f62c10c2bf14dd","modified":1563155040840},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1550755588393},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1550755588393},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1550755588393},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1563155040840},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"c951bb76448bfdf3447098bf44c41f2f7191b307","modified":1563155040840},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1563155040840},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1550755588393},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1563155040840},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1550755588393},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1550755588393},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"06cafe19f0e307ef7ad54038ae76b8db6bb5b4f9","modified":1563155040840},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"d9fe715fee716f78c7976c4e8838da71439ee0e0","modified":1563155040840},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1550755588393},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1550755588393},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1550755588393},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1563155040840},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1550755588397},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1550755588397},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1563155040840},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1550755588400},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1550755588400},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1550755588397},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1563155040840},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"53a59cba82cad49f15a90e1a18007aaac525bddd","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"40bab84a4a7a368fa31f0f8ce49af6ec3e5983c9","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1563155040840},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"15a4d60d3ecc59db2f23629477f8e7b8324981ed","modified":1563155040840},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1563155040840},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1563155040840},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a09d2af2a8470555eeb265b0eb14dc678079e870","modified":1563155040840},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1550755588397},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1563155040840},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1563155040840},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1550755588400},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1550755588400},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1550755588410},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1563155040843},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ee7659e711f73984f38e459e1143a6cc368a1cee","modified":1563155040843},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1550755588413},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1550755588413},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1550755588413},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1563155040843},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1550755588433},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1550755588433},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1550755588437},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1550755588420},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1550755588420},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1550755588420},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1550755588420},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1550755588420},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d6e4d1c937387d0d7891a41305ecdfe5597d6136","modified":1563155040847},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1563155040850},{"_id":"source/_posts/线程状态/线程状态.png","hash":"73957bb375ad01b51072cfc69b194e71992d10b6","modified":1551103520073},{"_id":"themes/next/.git/objects/pack/pack-5de535fce23737abe76bbc2d2752963a8f6872e5.idx","hash":"90b4e84650b3854616a97740feda5bdf0b7f922f","modified":1563155040800},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1563155040847},{"_id":"source/_posts/synchroniezd锁优化/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1551421733562},{"_id":"source/_posts/多线程并发面试要点/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1551688397905},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"ed6c0dc61dc0a60f868a91defe5f56c6e38a6ed6","modified":1563155053290},{"_id":"themes/next/.git/objects/pack/pack-24d1182ab5f1f2d5558361e279423597d3e87357.idx","hash":"0f766c11db46b5dfe643cc12c51f4a6b8e5ff4cb","modified":1550755588343},{"_id":"themes/next/.git/refs/remotes/origin/cache","hash":"19749f200a06c50c22798831bd6b4f8b8137e3c3","modified":1563155040813},{"_id":"themes/next/.git/refs/remotes/origin/count","hash":"a551c333a8b406a8b33f77bd174c29a71452decb","modified":1563155040813},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1550755588367},{"_id":"themes/next/.git/refs/remotes/origin/font-refactoring","hash":"6c37456a58c14c67deacffc80c88c905cc8a6395","modified":1563155040813},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"2abd389a2aad9a80e1f40ce36eb1280617628087","modified":1563155040813},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1489ff40ce5f9fee81a7b4aa5ef56a864a481a63","modified":1563155040843},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1550755588410},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1563155040843},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1563155040843},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"773f6d791f938ff037783004369092991d7bcd31","modified":1563155040843},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1563155040843},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1550755588410},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1550755588403},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"4741d642f9ed2eec9be23112f7a51645e77e41f3","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1550755588413},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1550755588413},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"213f2178dc260a28cba4fef723827a6e707f91a3","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"3948894201e6229a66bcf490e451f2481c8a99cb","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1550755588413},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"dfd7a9cf39a2135de4cf2f8651cac3fb333d028f","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"2f782305b1e1d19197a90f1e5e9167fd77749a8e","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44d834c231e2bb57851954d73e70f6995b5929e7","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"6f427a43550f7b03c503106767fbcce1f18a4f78","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1563155040843},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1550755588420},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1550755588423},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1550755588423},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1550755588433},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1550755588427},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1550755588427},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"784a6065c9bd18e56d6c4aa43cb35c4e144e655c","modified":1550755588367},{"_id":"themes/next/.git/logs/refs/remotes/origin/cache","hash":"e3eb4cbf0ce66d69091fc1ababbd2518bd537d9c","modified":1563155040813},{"_id":"themes/next/.git/logs/refs/remotes/origin/count","hash":"b998a39e244b48134ba1af9c55c4da6a2593c771","modified":1563155040813},{"_id":"themes/next/.git/logs/refs/remotes/origin/font-refactoring","hash":"27f10fbf9559d0043af3c62e5b72205c22654b77","modified":1563155040813},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"4404c1e3eeaeb200bf2645ccee2386cad4d95d9c","modified":1563155040813},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1550755588403},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1550755588403},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1550755588403},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"d132dcdce4928131a78f971f450243080e81e520","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"fc0a92fab0045889d0ede417b529220136f4fcc6","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"4114f1aa7546bbdf8253e261061c9d9bb0ca6c39","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ba17bf993d3e6a4aed02e740e3a4b913d9e7409d","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"f2469ecf57eeb32f5ad0a26c7358e521383ac935","modified":1563155040840},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"e3124da5350d6c01f32ccd04134a686baa4fb30a","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"9df791fa842b16ae72ad2998ffc2f87fdf0b6a88","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1563155040850},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8bffc9f7f4b20860a56160f0d1ba77062106f990","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"df3c19fd447da6d4a807683345007a41338f9a04","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"67165cd8836e03c289162b96ef06f8b024afe9af","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1550765794727},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"9c60fd1c4d221b968a5b1129f41e6d62adac1730","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"3d55c8641a69449de7caf1ea2cf731973481daf5","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"d24894d5aa955310bf6653c1effcd3e30f6da0b0","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1563155040850},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"987f1cdd57dd9f6f81c133c280c20d7168c37d7f","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1550755588407},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"4a655ce8217e038b4b9df2265555feae9ccd6242","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"38314eec8f4a2d1667e1061d7a3deb1c16f17da9","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1550755588410},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"c85df3ecc0b37095cac14114c308e5829c66b5a3","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"ca7cd57bc346a3fda8097b2b49e6d943600912d2","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4b62818333d2463fe416fb3156ced12e7d60aafa","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"1156b11ac74d2d21b1b5047767b2a9edafc9182d","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1563155040843},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"616f4820306dc0b6346cda3d2094a0af5ade4fba","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1550755588413},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"487dbb5b389620e7be2ce666531a7baa249d50a0","modified":1563155040843},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1550755588413},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1550755588427},{"_id":"themes/next/.git/objects/pack/pack-5de535fce23737abe76bbc2d2752963a8f6872e5.pack","hash":"0b071925f289b0624873ff47bdeeeab3105aa448","modified":1563155040000},{"_id":"themes/next/.git/objects/pack/pack-24d1182ab5f1f2d5558361e279423597d3e87357.pack","hash":"134a8e0634a422e5835bac49d4be99f8b83f4d24","modified":1550755588333},{"_id":"public/categories/index.html","hash":"e7e6d62c45cbb68be6df74ff14ebbc280aba58b8","modified":1563159969821},{"_id":"public/about/index.html","hash":"ac8ea9a0651b130b2d7df7a9f043f008d167a069","modified":1563159969821},{"_id":"public/tags/index.html","hash":"67ecf6de3a077eab424b7f5edc2af237085b0b98","modified":1563159969822},{"_id":"public/2019/07/10/docker-compose的使用/index.html","hash":"f96a261a7d2a0b2db1406fdfd3fe90fddc4f60cf","modified":1563159969823},{"_id":"public/2019/03/14/参数调优/index.html","hash":"90e901336ebeb411bb1adf1cede6d0f303cec776","modified":1563159969822},{"_id":"public/2019/03/06/spring面试要点/index.html","hash":"b92c511b4eff7d77482f2f7c3d59dbfd8498b4d0","modified":1563159969822},{"_id":"public/2019/02/25/线程状态/index.html","hash":"ec18d07c1488c6f4be13da951b20b70084c2dcb5","modified":1563159969822},{"_id":"public/2019/02/25/线程终止/index.html","hash":"0542f6c48368bcab2a24121581e93e0de607c2da","modified":1563159969822},{"_id":"public/archives/2019/03/index.html","hash":"fc14424ab4d02b7f28de137e516695dbcbbeb794","modified":1563159969822},{"_id":"public/2019/07/10/docker数据挂载/index.html","hash":"9eb18e45520ba41a4b47fd523790ac9d933a01ed","modified":1563159969823},{"_id":"public/2019/07/10/docker-hub与私有docker-registry/index.html","hash":"7aacc0a9475bcaacf39f01162434a70eb06af28b","modified":1563159969823},{"_id":"public/2019/07/10/使用dockerfile构建镜像/index.html","hash":"dfcf57976a5e2f3e91110ca047b2966645125034","modified":1563159969823},{"_id":"public/2019/03/05/中间件面试要点/index.html","hash":"f597dc6384e2de7dd392193816c4185ff5a0bc45","modified":1563159969823},{"_id":"public/2019/03/04/多线程并发面试要点/index.html","hash":"362ff47de902e46a7d37a4169d6ea9dbb31f65fd","modified":1563159969823},{"_id":"public/2019/03/04/部署策略、高可用、高可靠等面试要点/index.html","hash":"85a166ec1813d5ffad99574ddd1c3b46ad845c56","modified":1563159969823},{"_id":"public/2019/03/04/数据库面试要点/index.html","hash":"1be9014d66874bed5bcbadb40b315fa0931fa8c6","modified":1563159969823},{"_id":"public/2019/03/01/synchroniezd锁优化/index.html","hash":"bca4e7cd55695854e9fbcfc66102f734cf18502e","modified":1563159969823},{"_id":"public/2019/07/10/docker命令/index.html","hash":"e62e6dd093c9216de2bf550f814a2e77ac898d3f","modified":1563159969823},{"_id":"public/2019/02/28/log4j2-xml生产级配置/index.html","hash":"efe26a820bf9ecab915f8a5cbf94be846267968e","modified":1563159969823},{"_id":"public/2019/02/26/开发必知的几个开源协议/index.html","hash":"33b9dc93de4a57ee123cabb1abbb8dee4a09f548","modified":1563159969823},{"_id":"public/2019/02/25/内存屏障和CPU缓存/index.html","hash":"f572d2938843592503715c82e85ea5c2facdf2a2","modified":1563159969823},{"_id":"public/2019/02/25/java程序运行原理/index.html","hash":"20a66e32061610eae2ab3444121f468a338d23b2","modified":1563159969824},{"_id":"public/2019/02/28/CAP和BASE理论/index.html","hash":"04d22b51a5dcdd46908459af0b6226a64b3ad268","modified":1563159969823},{"_id":"public/2019/02/26/dubbo异常过滤/index.html","hash":"26caf0bcda0bd7cbd7ac3654eb09211794f3b425","modified":1563159969823},{"_id":"public/archives/index.html","hash":"ec6d56e8ee6cc612bd2a9e46e36f95f82dcca026","modified":1563159969824},{"_id":"public/archives/2019/index.html","hash":"89664171d39b1e2d5b23ae77acfa4d157a6510b1","modified":1563159969824},{"_id":"public/archives/2019/page/2/index.html","hash":"c1a2477477623b20f542b41d64981f917e0b8ee1","modified":1563159969824},{"_id":"public/archives/page/2/index.html","hash":"191a9f478800d6ace9c4af67d2e808d285c523e1","modified":1563159969824},{"_id":"public/archives/2019/02/index.html","hash":"28cb4c94dc819e72dca3ed27c1f7e9788e8b23bb","modified":1563159969824},{"_id":"public/2019/07/15/yycTest2/index.html","hash":"49177544e5b6cc63806428c54540ab1075f1d3a1","modified":1563158346470},{"_id":"public/2019/07/15/2019-yycTest/index.html","hash":"bcd73143741e2f59243b4826f28c0a301b9dcde7","modified":1563157407963},{"_id":"public/archives/2019/page/3/index.html","hash":"1989c32c13b7c8a1a03d4f3b8975f13ad4de308e","modified":1563158346471},{"_id":"public/archives/page/3/index.html","hash":"98aa58d77b94fb6196a963fc314f7e1c00b45a34","modified":1563158346471},{"_id":"public/archives/2019/07/index.html","hash":"e1654d104be5e9b44188d4da77f938db04a7dc6c","modified":1563159969822},{"_id":"public/categories/分布式/index.html","hash":"f443bbb509d303fc3a1a4e25f7316b949a2b3147","modified":1563159969822},{"_id":"public/categories/spring/index.html","hash":"6f300d2a323eea1131055aa0319d0585733bb5a7","modified":1563159969822},{"_id":"public/categories/java/index.html","hash":"eeea92d308d09dbd0dd0d8b205d505531a39fe93","modified":1563159969822},{"_id":"public/categories/jvm虚拟机/index.html","hash":"5415c6a08a4c167ffdcd69673fe3369c0b0ba963","modified":1563159969822},{"_id":"public/categories/中间件/index.html","hash":"d2ab36f4a102d09da234b46ce6c463a49421780b","modified":1563159969822},{"_id":"public/categories/it知识/index.html","hash":"fa3e09c69343810a3d7fc7016e800f9be3858a7a","modified":1563159969822},{"_id":"public/categories/调优/index.html","hash":"f809baf0909991826c0688ef2075c315d15a022a","modified":1563159969822},{"_id":"public/categories/运维/index.html","hash":"800ea4d0e62cad96f021a81b68f2758526465ac3","modified":1563159969822},{"_id":"public/categories/数据库/index.html","hash":"41969e8b1f7124ee46ab1065fd4d31bb2a8781b6","modified":1563159969822},{"_id":"public/categories/多线程/index.html","hash":"dfbb7c63a545ae1b83a7b472c2a179361dad72ba","modified":1563159969822},{"_id":"public/tags/rpc/index.html","hash":"4b635bc8a4446be96b80ec4989b6bf4f291289fc","modified":1563159969823},{"_id":"public/tags/分布式/index.html","hash":"633c1a06f937a0183a8321b63498d24e98742e0d","modified":1563159969823},{"_id":"public/tags/面试/index.html","hash":"c7fc6580893b81dd5fea76478b9be2c02e2c4589","modified":1563159969823},{"_id":"public/tags/配置/index.html","hash":"3cef4d6e4627fe8b134c785233018757f006b17f","modified":1563159969823},{"_id":"public/tags/多线程/index.html","hash":"fa94ab8928cd6aff875a895d3e4fa7aa540f1d24","modified":1563159969823},{"_id":"public/index.html","hash":"bd280a95fd3b0f73230a795354d8a38813e9257e","modified":1563159969824},{"_id":"public/page/2/index.html","hash":"4477d39a9efa67e94a338bcdbe1ef533bd7c419c","modified":1563159969824},{"_id":"public/page/3/index.html","hash":"4990c7fccc19c06973ce0e186a063351173e9f85","modified":1563158346472},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563157407967},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563157407967},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1563157407967},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563157407967},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563157407967},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563157407967},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563157407967},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563157407967},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563157407967},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563157407967},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563157407967},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563157407967},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563157407968},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563157407968},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563157407968},{"_id":"public/images/avatar.jpg","hash":"56337a225e4091684f928d5b8e52659e036cca76","modified":1563157407968},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563157407968},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563157407968},{"_id":"public/2019/03/04/数据库面试要点/死锁1.jpg","hash":"905b889e610ef36507ae5dd9338eca69eba7c7b8","modified":1563157407968},{"_id":"public/2019/03/04/数据库面试要点/死锁2.jpg","hash":"b6aef161851059ab8b05cada6b1688e5f880b546","modified":1563157407968},{"_id":"public/2019/03/04/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg","hash":"3df5b3bdbda0cd73df48ca5427f276ecd9e72964","modified":1563157407968},{"_id":"public/2019/03/04/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg","hash":"0cc970c769a39b5063fd60a44701a785abc797e5","modified":1563157407968},{"_id":"public/2019/03/04/部署策略、高可用、高可靠等面试要点/dns轮询.png","hash":"3fae19b9d17b06cad23608cc3c22b31f6527e08f","modified":1563157407968},{"_id":"public/2019/03/05/中间件面试要点/redis线程模型.png","hash":"ef238f0e57d265a04ea4dc59b3d3298c05562e02","modified":1563157407968},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563157408252},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563157408254},{"_id":"public/2019/02/25/java程序运行原理/JVM运行时数据区.png","hash":"8b2cea7d5340559a7db91e76d211ebba1aa81f75","modified":1563157408255},{"_id":"public/2019/02/26/开发必知的几个开源协议/开源协议对比图.jpg","hash":"6cd3dee5bb91131774b73dbdf8962a4771475a5c","modified":1563157408255},{"_id":"public/2019/03/04/部署策略、高可用、高可靠等面试要点/一致性hash.png","hash":"f28ef4ef7ca80cfb19ed61af46076d2084d8f1b6","modified":1563157408255},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563157408258},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1563157408258},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1563157408258},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1563157408258},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1563157408258},{"_id":"public/js/next-boot.js","hash":"d673f486417eaf1925ffecc3c4720850cad2ada3","modified":1563157408258},{"_id":"public/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1563157408258},{"_id":"public/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1563157408258},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1563157408258},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1563157408258},{"_id":"public/js/utils.js","hash":"c11f610e19fcbdb3d692bc5a17e43ef3338d81cc","modified":1563157408258},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1563157408258},{"_id":"public/js/schemes/muse.js","hash":"d6e4d1c937387d0d7891a41305ecdfe5597d6136","modified":1563157408258},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1563157408258},{"_id":"public/css/main.css","hash":"bfb16fde1b4127a644669461b128f357030985c9","modified":1563157408258},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563157408258},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563157408258},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563157408258},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563157408258},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563157408259},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1563157408259},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563157408259},{"_id":"public/2019/02/25/线程状态/线程状态.png","hash":"73957bb375ad01b51072cfc69b194e71992d10b6","modified":1563157408259},{"_id":"public/2019/03/04/多线程并发面试要点/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1563157408261},{"_id":"public/2019/03/01/synchroniezd锁优化/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1563157408261},{"_id":"source/_posts/2019/07/yycTest.md","hash":"9b633232a69e2ed12c4eb598b1b59c37feb96e90","modified":1563157233300},{"_id":"public/2019/07/15/yycTest/index.html","hash":"749f6db9729acae088e48704ece69999d2cdf09b","modified":1563158346473},{"_id":"public/categories/A/index.html","hash":"9636df720e67dfccb7400455438b0a22a1c43191","modified":1563158346473},{"_id":"public/categories/B/index.html","hash":"48f1905725f32162decca65b79595f1651fa47ae","modified":1563158346473},{"_id":"public/categories/C/index.html","hash":"8a2ddbe3b5a5a1df0dee0f2a0b0bc51dfe98728b","modified":1563158346473},{"_id":"public/categories/C/D/index.html","hash":"d280ea7398ce39c1fa0e05e61e74b4da72932f67","modified":1563158346474},{"_id":"source/_posts/2019/02/dubbo异常过滤.md","hash":"4680bab487408610f9cbabbb8ccb627e4bc2e4fd","modified":1551684336638},{"_id":"source/_posts/2019/02/CAP和BASE理论.md","hash":"7b0d7368f7086bc555d6b6801164febd6169b96f","modified":1551338629841},{"_id":"source/_posts/2019/02/java程序运行原理.md","hash":"7b8f86fe549a30ad56a9a9b78ff7ac4a6a787bb7","modified":1551751126751},{"_id":"source/_posts/2019/02/内存屏障和CPU缓存.md","hash":"88660bc113a3d191c3f6184024e3397d5e656f91","modified":1551420396498},{"_id":"source/_posts/2019/02/log4j2-xml生产级配置.md","hash":"2ebed65b546436ef40ec3b02facbbfa6f7c9faeb","modified":1551333762448},{"_id":"source/_posts/2019/02/开发必知的几个开源协议.md","hash":"c1c024bcd56dcca1c11abd8d45bcdf662014c5c9","modified":1551684354518},{"_id":"source/_posts/2019/02/线程终止.md","hash":"93f6569234ffa5566206d907824d761ee383bfb4","modified":1551684295988},{"_id":"source/_posts/2019/02/线程状态.md","hash":"cdb3b51531486ce87b330815984ec9dc22b09db1","modified":1551750044541},{"_id":"source/_posts/2019/03/spring面试要点.md","hash":"fd0dbea17781e83d3f5d355bca2a7799782b2753","modified":1551860467441},{"_id":"source/_posts/2019/03/synchroniezd锁优化.md","hash":"c4e6c3e5ee00ece3c238f0eee2d45ed7974064e9","modified":1551423273072},{"_id":"source/_posts/2019/03/中间件面试要点.md","hash":"728a836174f03dec75607f0bcf9cc97f9ef6d06c","modified":1552549952870},{"_id":"source/_posts/2019/03/参数调优.md","hash":"036b77e8cf0be4cc4bde46a452fbc0740812d92a","modified":1552550199127},{"_id":"source/_posts/2019/03/数据库面试要点.md","hash":"20c525847389b296784fe4ab4784544609c72684","modified":1551871113655},{"_id":"source/_posts/2019/03/多线程并发面试要点.md","hash":"2ae9e47af2dbdc1c2abdd7fbf885f287c88bb9c3","modified":1551752492164},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点.md","hash":"d6310b608f1feca286bd79215eaa4273fce92106","modified":1557851967425},{"_id":"source/_posts/2019/07/docker-compose的使用.md","hash":"039f60adcb6fc838ea1d24e229df9d5b3024036f","modified":1563159458347},{"_id":"source/_posts/2019/07/docker-hub与私有docker-registry.md","hash":"9dd993dbb565c0ab3ec4b300b8d3820a102736d1","modified":1563159534317},{"_id":"source/_posts/2019/07/docker命令.md","hash":"615a3a72b1e3ebe231dacca6c3b6e24ddc7932e5","modified":1563159473230},{"_id":"source/_posts/2019/07/docker数据挂载.md","hash":"91a0a3ce1fc52a5046c6236bf0e403c3f8ffde3a","modified":1563159517153},{"_id":"source/_posts/2019/07/使用dockerfile构建镜像.md","hash":"ca63d9e7ea6db211bfc0ec7d16ed897f5f2b0bec","modified":1563159494317},{"_id":"source/_posts/2019/03/中间件面试要点/redis线程模型.png","hash":"ef238f0e57d265a04ea4dc59b3d3298c05562e02","modified":1551856354054},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/dns轮询.png","hash":"3fae19b9d17b06cad23608cc3c22b31f6527e08f","modified":1551684999354},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg","hash":"3df5b3bdbda0cd73df48ca5427f276ecd9e72964","modified":1551684999354},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg","hash":"0cc970c769a39b5063fd60a44701a785abc797e5","modified":1551684999354},{"_id":"source/_posts/2019/03/数据库面试要点/死锁1.jpg","hash":"905b889e610ef36507ae5dd9338eca69eba7c7b8","modified":1551682223201},{"_id":"source/_posts/2019/03/数据库面试要点/死锁2.jpg","hash":"b6aef161851059ab8b05cada6b1688e5f880b546","modified":1551682223201},{"_id":"source/_posts/2019/02/java程序运行原理/JVM运行时数据区.png","hash":"8b2cea7d5340559a7db91e76d211ebba1aa81f75","modified":1551102210277},{"_id":"source/_posts/2019/02/开发必知的几个开源协议/开源协议对比图.jpg","hash":"6cd3dee5bb91131774b73dbdf8962a4771475a5c","modified":1551159251453},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/一致性hash.png","hash":"f28ef4ef7ca80cfb19ed61af46076d2084d8f1b6","modified":1552446810739},{"_id":"source/_posts/2019/02/线程状态/线程状态.png","hash":"73957bb375ad01b51072cfc69b194e71992d10b6","modified":1551103520073},{"_id":"source/_posts/2019/03/synchroniezd锁优化/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1551421733562},{"_id":"source/_posts/2019/03/多线程并发面试要点/偏向锁到重量级锁.png","hash":"247542aab0b7da493b49f912ca2c9469ac59090c","modified":1551688397905},{"_id":"public/categories/docker/index.html","hash":"0db0eeedf8cd70e775f7b64902f5cb487bc4866e","modified":1563159969822},{"_id":"public/tags/docker/index.html","hash":"cd96cf92c65ad20d22fb248b9a16c6cc75a1a047","modified":1563159969823},{"_id":"themes/next/source/images/avatar.jpeg","hash":"461fae6ab356cf5400ab8af491cb677750a2a480","modified":1563159912753},{"_id":"public/images/avatar.jpeg","hash":"461fae6ab356cf5400ab8af491cb677750a2a480","modified":1563159969826}],"Category":[{"name":"分布式","_id":"cjy3rk5910004c0ngtoria2cr"},{"name":"java","_id":"cjy3rk59a000gc0ngqhfdr3f6"},{"name":"spring","_id":"cjy3rk59c000lc0ngpn5s4ypo"},{"name":"jvm虚拟机","_id":"cjy3rk59e000rc0ngs2vxrjzr"},{"name":"调优","_id":"cjy3rk59g000yc0ngfibvdei8"},{"name":"中间件","_id":"cjy3rk59h0013c0ngdqnru9hx"},{"name":"it知识","_id":"cjy3rk59j001bc0ngoc02qtsp"},{"name":"多线程","_id":"cjy3rk59l001ic0ng66tdj9pk"},{"name":"数据库","_id":"cjy3rk59m001nc0ng1qdi41av"},{"name":"运维","_id":"cjy3rk59m001rc0ng3y8crhll"},{"name":"A","_id":"cjy3s49q200010xngpgdkfkh5"},{"name":"B","_id":"cjy3s49q500020xng5bptf8we"},{"name":"C","_id":"cjy3s49q600030xngqfvsp1su"},{"name":"D","parent":"cjy3s49q600030xngqfvsp1su","_id":"cjy3s49q600040xngzfr7eoa0"},{"name":"B","parent":"cjy3s49q200010xngpgdkfkh5","_id":"cjy3s5xen00002lngdwckillc"},{"name":"docker","_id":"cjy3su7gk0000sxng2jhywvnd"}],"Data":[],"Page":[{"title":"about","date":"2019-02-22T04:48:28.000Z","type":"about","_content":"\n## 联系邮箱：82415327@qq.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-02-22 12:48:28\ntype: \"about\"\n---\n\n## 联系邮箱：82415327@qq.com\n","updated":"2019-02-22T05:14:32.884Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjy3rk58v0000c0ng5aqxdloe","content":"<h2 id=\"联系邮箱：82415327-qq-com\"><a href=\"#联系邮箱：82415327-qq-com\" class=\"headerlink\" title=\"联系邮箱：82415327@qq.com\"></a>联系邮箱：<a href=\"mailto:82415327@qq.com\" target=\"_blank\" rel=\"noopener\">82415327@qq.com</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"联系邮箱：82415327-qq-com\"><a href=\"#联系邮箱：82415327-qq-com\" class=\"headerlink\" title=\"联系邮箱：82415327@qq.com\"></a>联系邮箱：<a href=\"mailto:82415327@qq.com\" target=\"_blank\" rel=\"noopener\">82415327@qq.com</a></h2>"},{"title":"categories","date":"2019-02-21T15:21:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-21 23:21:47\ntype: \"categories\"\n---\n","updated":"2019-02-21T15:26:43.070Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjy3rk58z0002c0nghnm2nxtf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-21T15:21:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-21 23:21:52\ntype: \"tags\"\n---\n","updated":"2019-02-21T15:26:14.963Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjy3rk5920005c0ng2o7arlzt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CAP和BASE理论","date":"2019-02-28T07:21:19.000Z","_content":"CAP理论和BASE理论概括理解\n<!-- more -->\n## CAP\n- Consistency(一致性)\n- Availability(可用性)\n- Partition tolerance(分区容错性)\n\n## BASE\n- Basicclly Available（基本可用）\n- Soft state (软状态)\n- Eventually consistent (最终一致性)\n\n## 几个概念\n### 可用性和可靠性\n- 可用性指一定时间内，系统能够提供服务的数量级\n- 可靠性指一定时间内，系统能够提供服务的时间比率\n\n### 分区容错性\n系统中一台或若干台机器出现故障后系统的容错能力\n\n### 一致性\n系统中数据是否正确流通，没有脏数据\n\n### 基本可用\n系统出现不可预知故障时，允许损失部分可用性\n\n### 最终一致性\n系统中数据不要求实时一致，最终数据符合业务含义就可以\n\n### 软状态\n允许系统中数据存在中间状态 \n","source":"_posts/2019/02/CAP和BASE理论.md","raw":"---\ntitle: CAP和BASE理论\ndate: 2019-02-28 15:21:19\ncategories: 分布式\ntags:\n---\nCAP理论和BASE理论概括理解\n<!-- more -->\n## CAP\n- Consistency(一致性)\n- Availability(可用性)\n- Partition tolerance(分区容错性)\n\n## BASE\n- Basicclly Available（基本可用）\n- Soft state (软状态)\n- Eventually consistent (最终一致性)\n\n## 几个概念\n### 可用性和可靠性\n- 可用性指一定时间内，系统能够提供服务的数量级\n- 可靠性指一定时间内，系统能够提供服务的时间比率\n\n### 分区容错性\n系统中一台或若干台机器出现故障后系统的容错能力\n\n### 一致性\n系统中数据是否正确流通，没有脏数据\n\n### 基本可用\n系统出现不可预知故障时，允许损失部分可用性\n\n### 最终一致性\n系统中数据不要求实时一致，最终数据符合业务含义就可以\n\n### 软状态\n允许系统中数据存在中间状态 \n","slug":"CAP和BASE理论","published":1,"updated":"2019-02-28T07:23:49.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mh0000oungq91n5wmr","content":"<p>CAP理论和BASE理论概括理解<br><a id=\"more\"></a></p>\n<h2 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h2><ul>\n<li>Consistency(一致性)</li>\n<li>Availability(可用性)</li>\n<li>Partition tolerance(分区容错性)</li>\n</ul>\n<h2 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h2><ul>\n<li>Basicclly Available（基本可用）</li>\n<li>Soft state (软状态)</li>\n<li>Eventually consistent (最终一致性)</li>\n</ul>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><h3 id=\"可用性和可靠性\"><a href=\"#可用性和可靠性\" class=\"headerlink\" title=\"可用性和可靠性\"></a>可用性和可靠性</h3><ul>\n<li>可用性指一定时间内，系统能够提供服务的数量级</li>\n<li>可靠性指一定时间内，系统能够提供服务的时间比率</li>\n</ul>\n<h3 id=\"分区容错性\"><a href=\"#分区容错性\" class=\"headerlink\" title=\"分区容错性\"></a>分区容错性</h3><p>系统中一台或若干台机器出现故障后系统的容错能力</p>\n<h3 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h3><p>系统中数据是否正确流通，没有脏数据</p>\n<h3 id=\"基本可用\"><a href=\"#基本可用\" class=\"headerlink\" title=\"基本可用\"></a>基本可用</h3><p>系统出现不可预知故障时，允许损失部分可用性</p>\n<h3 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h3><p>系统中数据不要求实时一致，最终数据符合业务含义就可以</p>\n<h3 id=\"软状态\"><a href=\"#软状态\" class=\"headerlink\" title=\"软状态\"></a>软状态</h3><p>允许系统中数据存在中间状态 </p>\n","site":{"data":{}},"excerpt":"<p>CAP理论和BASE理论概括理解<br>","more":"</p>\n<h2 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h2><ul>\n<li>Consistency(一致性)</li>\n<li>Availability(可用性)</li>\n<li>Partition tolerance(分区容错性)</li>\n</ul>\n<h2 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h2><ul>\n<li>Basicclly Available（基本可用）</li>\n<li>Soft state (软状态)</li>\n<li>Eventually consistent (最终一致性)</li>\n</ul>\n<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2><h3 id=\"可用性和可靠性\"><a href=\"#可用性和可靠性\" class=\"headerlink\" title=\"可用性和可靠性\"></a>可用性和可靠性</h3><ul>\n<li>可用性指一定时间内，系统能够提供服务的数量级</li>\n<li>可靠性指一定时间内，系统能够提供服务的时间比率</li>\n</ul>\n<h3 id=\"分区容错性\"><a href=\"#分区容错性\" class=\"headerlink\" title=\"分区容错性\"></a>分区容错性</h3><p>系统中一台或若干台机器出现故障后系统的容错能力</p>\n<h3 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h3><p>系统中数据是否正确流通，没有脏数据</p>\n<h3 id=\"基本可用\"><a href=\"#基本可用\" class=\"headerlink\" title=\"基本可用\"></a>基本可用</h3><p>系统出现不可预知故障时，允许损失部分可用性</p>\n<h3 id=\"最终一致性\"><a href=\"#最终一致性\" class=\"headerlink\" title=\"最终一致性\"></a>最终一致性</h3><p>系统中数据不要求实时一致，最终数据符合业务含义就可以</p>\n<h3 id=\"软状态\"><a href=\"#软状态\" class=\"headerlink\" title=\"软状态\"></a>软状态</h3><p>允许系统中数据存在中间状态 </p>"},{"title":"java程序运行原理","date":"2019-02-25T13:35:07.000Z","_content":"java程序运行原理, class文件内容，JVM运行时数据区域\n<!-- more -->\n## class文件内容\n- 版本\n- 访问标志(public, private等)\n- 常量池(类中的静态常量，如类名，字段名)\n- 当前类\n- 超级类\n- 接口\n- 字段\n- 方法\n- 属性\n\n实践Demo.java\n```\n// 编译\njavac Demo.java\njavap -v Demo.class\n```\n\n## JVM运行时数据区\n![](./java程序运行原理/JVM运行时数据区.png)\n\n1. 方法区\n   不通虚拟机有不同的实现，java8存在于元数据空间。\n\n2. 堆内存\n   Old, Young[Eden, S0, S1]  \n   线程共享，但存在TLAB(线程独享分配缓存，无锁分配)\n\n3. 虚拟机栈\n   每个线程由多个栈帧组成，每个栈帧对应一个方法  \n   栈帧包括：局部变量表， 操作数栈， 动态链接， 方法返回地址， 附加信息\n\n4. 本地方法栈\n   与虚拟机栈相似，为Native本地方法准备\n\n5. 程序计数器\n   记录当前线程执行执行字节码的位置  \n   如果是native方法，则计数器值为空\n   \n   \n","source":"_posts/2019/02/java程序运行原理.md","raw":"---\ntitle: java程序运行原理\ndate: 2019-02-25 21:35:07\ncategories: java\ntags: \n---\njava程序运行原理, class文件内容，JVM运行时数据区域\n<!-- more -->\n## class文件内容\n- 版本\n- 访问标志(public, private等)\n- 常量池(类中的静态常量，如类名，字段名)\n- 当前类\n- 超级类\n- 接口\n- 字段\n- 方法\n- 属性\n\n实践Demo.java\n```\n// 编译\njavac Demo.java\njavap -v Demo.class\n```\n\n## JVM运行时数据区\n![](./java程序运行原理/JVM运行时数据区.png)\n\n1. 方法区\n   不通虚拟机有不同的实现，java8存在于元数据空间。\n\n2. 堆内存\n   Old, Young[Eden, S0, S1]  \n   线程共享，但存在TLAB(线程独享分配缓存，无锁分配)\n\n3. 虚拟机栈\n   每个线程由多个栈帧组成，每个栈帧对应一个方法  \n   栈帧包括：局部变量表， 操作数栈， 动态链接， 方法返回地址， 附加信息\n\n4. 本地方法栈\n   与虚拟机栈相似，为Native本地方法准备\n\n5. 程序计数器\n   记录当前线程执行执行字节码的位置  \n   如果是native方法，则计数器值为空\n   \n   \n","slug":"java程序运行原理","published":1,"updated":"2019-03-05T01:58:46.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9ml0001oungmhfrab32","content":"<p>java程序运行原理, class文件内容，JVM运行时数据区域<br><a id=\"more\"></a></p>\n<h2 id=\"class文件内容\"><a href=\"#class文件内容\" class=\"headerlink\" title=\"class文件内容\"></a>class文件内容</h2><ul>\n<li>版本</li>\n<li>访问标志(public, private等)</li>\n<li>常量池(类中的静态常量，如类名，字段名)</li>\n<li>当前类</li>\n<li>超级类</li>\n<li>接口</li>\n<li>字段</li>\n<li>方法</li>\n<li>属性</li>\n</ul>\n<p>实践Demo.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 编译</span><br><span class=\"line\">javac Demo.java</span><br><span class=\"line\">javap -v Demo.class</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JVM运行时数据区\"><a href=\"#JVM运行时数据区\" class=\"headerlink\" title=\"JVM运行时数据区\"></a>JVM运行时数据区</h2><p><img src=\"./java程序运行原理/JVM运行时数据区.png\" alt></p>\n<ol>\n<li><p>方法区<br>不通虚拟机有不同的实现，java8存在于元数据空间。</p>\n</li>\n<li><p>堆内存<br>Old, Young[Eden, S0, S1]<br>线程共享，但存在TLAB(线程独享分配缓存，无锁分配)</p>\n</li>\n<li><p>虚拟机栈<br>每个线程由多个栈帧组成，每个栈帧对应一个方法<br>栈帧包括：局部变量表， 操作数栈， 动态链接， 方法返回地址， 附加信息</p>\n</li>\n<li><p>本地方法栈<br>与虚拟机栈相似，为Native本地方法准备</p>\n</li>\n<li><p>程序计数器<br>记录当前线程执行执行字节码的位置<br>如果是native方法，则计数器值为空</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>java程序运行原理, class文件内容，JVM运行时数据区域<br>","more":"</p>\n<h2 id=\"class文件内容\"><a href=\"#class文件内容\" class=\"headerlink\" title=\"class文件内容\"></a>class文件内容</h2><ul>\n<li>版本</li>\n<li>访问标志(public, private等)</li>\n<li>常量池(类中的静态常量，如类名，字段名)</li>\n<li>当前类</li>\n<li>超级类</li>\n<li>接口</li>\n<li>字段</li>\n<li>方法</li>\n<li>属性</li>\n</ul>\n<p>实践Demo.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 编译</span><br><span class=\"line\">javac Demo.java</span><br><span class=\"line\">javap -v Demo.class</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JVM运行时数据区\"><a href=\"#JVM运行时数据区\" class=\"headerlink\" title=\"JVM运行时数据区\"></a>JVM运行时数据区</h2><p><img src=\"./java程序运行原理/JVM运行时数据区.png\" alt></p>\n<ol>\n<li><p>方法区<br>不通虚拟机有不同的实现，java8存在于元数据空间。</p>\n</li>\n<li><p>堆内存<br>Old, Young[Eden, S0, S1]<br>线程共享，但存在TLAB(线程独享分配缓存，无锁分配)</p>\n</li>\n<li><p>虚拟机栈<br>每个线程由多个栈帧组成，每个栈帧对应一个方法<br>栈帧包括：局部变量表， 操作数栈， 动态链接， 方法返回地址， 附加信息</p>\n</li>\n<li><p>本地方法栈<br>与虚拟机栈相似，为Native本地方法准备</p>\n</li>\n<li><p>程序计数器<br>记录当前线程执行执行字节码的位置<br>如果是native方法，则计数器值为空</p>\n</li>\n</ol>"},{"title":"dubbo异常过滤","date":"2019-02-26T04:23:05.000Z","_content":"dubbo的自定义异常处理和过滤器使用\n<!-- more -->\n\n## com.alibaba.dubbo.rpc.filter.ExceptionFilter\n\n1. checked异常\n2. 在方法签名中的异常\n3. 与api接口同jar包的异常\n4. jdk异常\n5. dubbo的异常\n\n出现以上情况的异常，直接返回result，在客户端会出现对应的异常。  \n如果不是以上异常，dubbo服务端则会将异常包装为一个RuntimeException抛给客户端。\n","source":"_posts/2019/02/dubbo异常过滤.md","raw":"---\ntitle: dubbo异常过滤\ndate: 2019-02-26 12:23:05\ncategories:\n  - 分布式\ntags:\n  - 分布式\n  - rpc\n---\ndubbo的自定义异常处理和过滤器使用\n<!-- more -->\n\n## com.alibaba.dubbo.rpc.filter.ExceptionFilter\n\n1. checked异常\n2. 在方法签名中的异常\n3. 与api接口同jar包的异常\n4. jdk异常\n5. dubbo的异常\n\n出现以上情况的异常，直接返回result，在客户端会出现对应的异常。  \n如果不是以上异常，dubbo服务端则会将异常包装为一个RuntimeException抛给客户端。\n","slug":"dubbo异常过滤","published":1,"updated":"2019-03-04T07:25:36.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mm0002oungxteczp2c","content":"<p>dubbo的自定义异常处理和过滤器使用<br><a id=\"more\"></a></p>\n<h2 id=\"com-alibaba-dubbo-rpc-filter-ExceptionFilter\"><a href=\"#com-alibaba-dubbo-rpc-filter-ExceptionFilter\" class=\"headerlink\" title=\"com.alibaba.dubbo.rpc.filter.ExceptionFilter\"></a>com.alibaba.dubbo.rpc.filter.ExceptionFilter</h2><ol>\n<li>checked异常</li>\n<li>在方法签名中的异常</li>\n<li>与api接口同jar包的异常</li>\n<li>jdk异常</li>\n<li>dubbo的异常</li>\n</ol>\n<p>出现以上情况的异常，直接返回result，在客户端会出现对应的异常。<br>如果不是以上异常，dubbo服务端则会将异常包装为一个RuntimeException抛给客户端。</p>\n","site":{"data":{}},"excerpt":"<p>dubbo的自定义异常处理和过滤器使用<br>","more":"</p>\n<h2 id=\"com-alibaba-dubbo-rpc-filter-ExceptionFilter\"><a href=\"#com-alibaba-dubbo-rpc-filter-ExceptionFilter\" class=\"headerlink\" title=\"com.alibaba.dubbo.rpc.filter.ExceptionFilter\"></a>com.alibaba.dubbo.rpc.filter.ExceptionFilter</h2><ol>\n<li>checked异常</li>\n<li>在方法签名中的异常</li>\n<li>与api接口同jar包的异常</li>\n<li>jdk异常</li>\n<li>dubbo的异常</li>\n</ol>\n<p>出现以上情况的异常，直接返回result，在客户端会出现对应的异常。<br>如果不是以上异常，dubbo服务端则会将异常包装为一个RuntimeException抛给客户端。</p>"},{"title":"内存屏障和CPU缓存","date":"2019-02-25T14:19:36.000Z","_content":"java内存屏障和CPU缓存, 缓存同步协议，内存可见性和指令重排序（as-if-serial原则）。\n\n<!-- more -->\n\n## CPU缓存\n\nL1 32-4096kb\nL2\n基本上每个CPU上都有L1， L2\n\nL3共享缓存\n\n## 缓存同步协议\nMESI\n- 修改态\n- 专有态\n- 共享态\n- 无效态\n\n多处理器时，单个CPU对缓存数据改动时，需要通知其他CPU\n\nvolatile即当单CPU修改时，将其他CPU缓存对应数据的缓存设置为无效态，当其他CPU读此数据时，重新从主存读取。\n\n## 运行时指令重排\n单线程时，无依赖关系的代码可能会重新排序，但是保证单线程执行结果不变。遵循as-if-serial。\n\n## 内存屏障\n\n1. 写内存屏障\n   在指令后插入Store Barrier， 修改缓存后，强制写入主存，让其他CPU可见。  \n   即保证可见性时， 修改数据后更新到主存，并将其他CPU对应的缓存设置为无效态。\n2. 读内存屏障\n   在指令前插入Load Barrier， 读数据前，强制从主存读取。  \n   即保证可见性时， 读取数据前，如果缓存中为无效态，则从主存读取。\n\n## 保证可见性的几个场景\n什么是保证可见性？\n多个线程读取同一数据时，保证读到的是最新的而不是其他线程修改前的数据。\n1. 数据用volatile修饰\n2. synchronize，JVM保证了同步代码块中数据的可见性\n3. Lock（ReentertLock等），获得锁后保证了数据的可见性\n\n可以从运行时编译代码中看到类似实现可见性的代码（具体是什么忘记了...，待补充）\n   \n\n","source":"_posts/2019/02/内存屏障和CPU缓存.md","raw":"---\ntitle: 内存屏障和CPU缓存\ndate: 2019-02-25 22:19:36\ncategories: java\ntags:\n---\njava内存屏障和CPU缓存, 缓存同步协议，内存可见性和指令重排序（as-if-serial原则）。\n\n<!-- more -->\n\n## CPU缓存\n\nL1 32-4096kb\nL2\n基本上每个CPU上都有L1， L2\n\nL3共享缓存\n\n## 缓存同步协议\nMESI\n- 修改态\n- 专有态\n- 共享态\n- 无效态\n\n多处理器时，单个CPU对缓存数据改动时，需要通知其他CPU\n\nvolatile即当单CPU修改时，将其他CPU缓存对应数据的缓存设置为无效态，当其他CPU读此数据时，重新从主存读取。\n\n## 运行时指令重排\n单线程时，无依赖关系的代码可能会重新排序，但是保证单线程执行结果不变。遵循as-if-serial。\n\n## 内存屏障\n\n1. 写内存屏障\n   在指令后插入Store Barrier， 修改缓存后，强制写入主存，让其他CPU可见。  \n   即保证可见性时， 修改数据后更新到主存，并将其他CPU对应的缓存设置为无效态。\n2. 读内存屏障\n   在指令前插入Load Barrier， 读数据前，强制从主存读取。  \n   即保证可见性时， 读取数据前，如果缓存中为无效态，则从主存读取。\n\n## 保证可见性的几个场景\n什么是保证可见性？\n多个线程读取同一数据时，保证读到的是最新的而不是其他线程修改前的数据。\n1. 数据用volatile修饰\n2. synchronize，JVM保证了同步代码块中数据的可见性\n3. Lock（ReentertLock等），获得锁后保证了数据的可见性\n\n可以从运行时编译代码中看到类似实现可见性的代码（具体是什么忘记了...，待补充）\n   \n\n","slug":"内存屏障和CPU缓存","published":1,"updated":"2019-03-01T06:06:36.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mn0003oungucs9eir0","content":"<p>java内存屏障和CPU缓存, 缓存同步协议，内存可见性和指令重排序（as-if-serial原则）。</p>\n<a id=\"more\"></a>\n<h2 id=\"CPU缓存\"><a href=\"#CPU缓存\" class=\"headerlink\" title=\"CPU缓存\"></a>CPU缓存</h2><p>L1 32-4096kb<br>L2<br>基本上每个CPU上都有L1， L2</p>\n<p>L3共享缓存</p>\n<h2 id=\"缓存同步协议\"><a href=\"#缓存同步协议\" class=\"headerlink\" title=\"缓存同步协议\"></a>缓存同步协议</h2><p>MESI</p>\n<ul>\n<li>修改态</li>\n<li>专有态</li>\n<li>共享态</li>\n<li>无效态</li>\n</ul>\n<p>多处理器时，单个CPU对缓存数据改动时，需要通知其他CPU</p>\n<p>volatile即当单CPU修改时，将其他CPU缓存对应数据的缓存设置为无效态，当其他CPU读此数据时，重新从主存读取。</p>\n<h2 id=\"运行时指令重排\"><a href=\"#运行时指令重排\" class=\"headerlink\" title=\"运行时指令重排\"></a>运行时指令重排</h2><p>单线程时，无依赖关系的代码可能会重新排序，但是保证单线程执行结果不变。遵循as-if-serial。</p>\n<h2 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h2><ol>\n<li>写内存屏障<br>在指令后插入Store Barrier， 修改缓存后，强制写入主存，让其他CPU可见。<br>即保证可见性时， 修改数据后更新到主存，并将其他CPU对应的缓存设置为无效态。</li>\n<li>读内存屏障<br>在指令前插入Load Barrier， 读数据前，强制从主存读取。<br>即保证可见性时， 读取数据前，如果缓存中为无效态，则从主存读取。</li>\n</ol>\n<h2 id=\"保证可见性的几个场景\"><a href=\"#保证可见性的几个场景\" class=\"headerlink\" title=\"保证可见性的几个场景\"></a>保证可见性的几个场景</h2><p>什么是保证可见性？<br>多个线程读取同一数据时，保证读到的是最新的而不是其他线程修改前的数据。</p>\n<ol>\n<li>数据用volatile修饰</li>\n<li>synchronize，JVM保证了同步代码块中数据的可见性</li>\n<li>Lock（ReentertLock等），获得锁后保证了数据的可见性</li>\n</ol>\n<p>可以从运行时编译代码中看到类似实现可见性的代码（具体是什么忘记了…，待补充）</p>\n","site":{"data":{}},"excerpt":"<p>java内存屏障和CPU缓存, 缓存同步协议，内存可见性和指令重排序（as-if-serial原则）。</p>","more":"<h2 id=\"CPU缓存\"><a href=\"#CPU缓存\" class=\"headerlink\" title=\"CPU缓存\"></a>CPU缓存</h2><p>L1 32-4096kb<br>L2<br>基本上每个CPU上都有L1， L2</p>\n<p>L3共享缓存</p>\n<h2 id=\"缓存同步协议\"><a href=\"#缓存同步协议\" class=\"headerlink\" title=\"缓存同步协议\"></a>缓存同步协议</h2><p>MESI</p>\n<ul>\n<li>修改态</li>\n<li>专有态</li>\n<li>共享态</li>\n<li>无效态</li>\n</ul>\n<p>多处理器时，单个CPU对缓存数据改动时，需要通知其他CPU</p>\n<p>volatile即当单CPU修改时，将其他CPU缓存对应数据的缓存设置为无效态，当其他CPU读此数据时，重新从主存读取。</p>\n<h2 id=\"运行时指令重排\"><a href=\"#运行时指令重排\" class=\"headerlink\" title=\"运行时指令重排\"></a>运行时指令重排</h2><p>单线程时，无依赖关系的代码可能会重新排序，但是保证单线程执行结果不变。遵循as-if-serial。</p>\n<h2 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h2><ol>\n<li>写内存屏障<br>在指令后插入Store Barrier， 修改缓存后，强制写入主存，让其他CPU可见。<br>即保证可见性时， 修改数据后更新到主存，并将其他CPU对应的缓存设置为无效态。</li>\n<li>读内存屏障<br>在指令前插入Load Barrier， 读数据前，强制从主存读取。<br>即保证可见性时， 读取数据前，如果缓存中为无效态，则从主存读取。</li>\n</ol>\n<h2 id=\"保证可见性的几个场景\"><a href=\"#保证可见性的几个场景\" class=\"headerlink\" title=\"保证可见性的几个场景\"></a>保证可见性的几个场景</h2><p>什么是保证可见性？<br>多个线程读取同一数据时，保证读到的是最新的而不是其他线程修改前的数据。</p>\n<ol>\n<li>数据用volatile修饰</li>\n<li>synchronize，JVM保证了同步代码块中数据的可见性</li>\n<li>Lock（ReentertLock等），获得锁后保证了数据的可见性</li>\n</ol>\n<p>可以从运行时编译代码中看到类似实现可见性的代码（具体是什么忘记了…，待补充）</p>"},{"title":"log4j2.xml生产级配置","date":"2019-02-28T05:59:25.000Z","_content":"log4j2依赖配置和xml配置文件配置记录\n<!-- more -->\n## log4j2依赖\n```\n<!--slf4j + log4j2-->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-web</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n        </dependency>\n        <!--exclude spring other log framework-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>*</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n\n### log4j2.xml配置（含详细备注）\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出-->\n<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数-->\n<!--此份配置文件默认最多保存7天的日志， 每种级别的日志文件最多10个，每个文件最大50MB-->\n<!--文件名按日志级别-日期（精确到日）-下标，一天产生的日志最多50MB*10=500MB,7天最大500MB*7=3500MB,所以需要保证磁盘至少有3500MB的空间-->\n<configuration status=\"WARN\" monitorInterval=\"1800\">\n    <Properties>\n        <!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 -->\n        <!-- ${front:rootDir}是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 -->\n        <!--<property name=\"appName\">redis</property>-->\n        <!--<property name=\"basePath\">${sys:user.home}/logs/${appName}</property>-->\n        <property name=\"basePath\">logs</property>\n\n        <!-- 控制台显示的日志最低级别 -->\n        <property name=\"console_print_level\">INFO</property>\n        <!-- 日志默认输出级别 -->\n        <property name=\"output_log_level\">INFO</property>\n        <!-- 日志默认切割的最小单位 -->\n        <property name=\"every_file_size\">50MB</property>\n        <!--最多保存几天内的文件，用delete标签实现，保存7天的文件-->\n        <property name=\"max_days\">8d</property>\n        <!--文件最大下标-->\n        <property name=\"rolling_max\">10</property>\n\n        <!-- 控制台默认输出格式,\"%-5level\":日志级别,\"%l\":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 -->\n        <property name=\"console_log_pattern\">%d{yyyy-MM-dd HH:mm:ss} %highlight{[%-5level]} %l - %m%n</property>\n        <!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->\n        <property name=\"file_log_pattern\">%d{yyyy-MM-dd HH:mm:ss} [%-5level] %C.%M - %m%n</property>\n    </Properties>\n\n    <!--定义appender -->\n    <appenders>\n        <!-- 用来定义输出到控制台的配置 -->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)-->\n            <ThresholdFilter level=\"${console_print_level}\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 设置输出格式,不设置默认为:%m%n -->\n            <PatternLayout pattern=\"${console_log_pattern}\"/>\n        </Console>\n\n        <!-- 打印root中指定的level级别以上的日志到文件 -->\n        <RollingFile name=\"RollingFile\" fileName=\"${basePath}/app.log\" filePattern=\"${basePath}/app/app-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/app\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配INFO以及以上级别 -->\n            <Filters>\n                <ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印INFO级别的日志到文件 -->\n        <RollingFile name=\"InfoFile\" fileName=\"${basePath}/info.log\" filePattern=\"${basePath}/info/info-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/info\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配INFO级别 -->\n            <Filters>\n                <ThresholdFilter level=\"WARN\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印WARN级别的日志到文件 -->\n        <RollingFile name=\"WarnFile\" fileName=\"${basePath}/warn.log\" filePattern=\"${basePath}/warn/warn-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/warn\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配WARN级别 -->\n            <Filters>\n                <ThresholdFilter level=\"ERROR\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"WARN\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印ERROR级别的日志到文件 -->\n        <RollingFile name=\"ErrorFile\" fileName=\"${basePath}/error.log\" filePattern=\"${basePath}/error/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/error\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配ERROR级别 -->\n            <Filters>\n                <ThresholdFilter level=\"FATAL\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"ERROR\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n    </appenders>\n\n    <!--然后定义logger,只有定义了logger并引入的appender,appender才会生效-->\n    <loggers>\n        <!-- 设置对打印sql语句的支持 -->\n        <!--<logger name=\"java.sql\" level=\"debug\" additivity=\"false\">-->\n        <!--<appender-ref ref=\"Console\"/>-->\n        <!--</logger>-->\n\n        <!--建立一个默认的root的logger-->\n        <root level=\"${output_log_level}\" >\n            <appender-ref ref=\"Console\"/>\n            <appender-ref ref=\"InfoFile\"/>\n            <appender-ref ref=\"WarnFile\"/>\n            <appender-ref ref=\"ErrorFile\"/>\n            <!--<appender-ref ref=\"RollingFile\"/>-->\n        </root>\n    </loggers>\n</configuration>\n```\n","source":"_posts/2019/02/log4j2-xml生产级配置.md","raw":"---\ntitle: log4j2.xml生产级配置\ndate: 2019-02-28 13:59:25\ncategories: java\ntags: 配置\n---\nlog4j2依赖配置和xml配置文件配置记录\n<!-- more -->\n## log4j2依赖\n```\n<!--slf4j + log4j2-->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-web</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n        </dependency>\n        <!--exclude spring other log framework-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>*</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n```\n\n### log4j2.xml配置（含详细备注）\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出-->\n<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数-->\n<!--此份配置文件默认最多保存7天的日志， 每种级别的日志文件最多10个，每个文件最大50MB-->\n<!--文件名按日志级别-日期（精确到日）-下标，一天产生的日志最多50MB*10=500MB,7天最大500MB*7=3500MB,所以需要保证磁盘至少有3500MB的空间-->\n<configuration status=\"WARN\" monitorInterval=\"1800\">\n    <Properties>\n        <!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 -->\n        <!-- ${front:rootDir}是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 -->\n        <!--<property name=\"appName\">redis</property>-->\n        <!--<property name=\"basePath\">${sys:user.home}/logs/${appName}</property>-->\n        <property name=\"basePath\">logs</property>\n\n        <!-- 控制台显示的日志最低级别 -->\n        <property name=\"console_print_level\">INFO</property>\n        <!-- 日志默认输出级别 -->\n        <property name=\"output_log_level\">INFO</property>\n        <!-- 日志默认切割的最小单位 -->\n        <property name=\"every_file_size\">50MB</property>\n        <!--最多保存几天内的文件，用delete标签实现，保存7天的文件-->\n        <property name=\"max_days\">8d</property>\n        <!--文件最大下标-->\n        <property name=\"rolling_max\">10</property>\n\n        <!-- 控制台默认输出格式,\"%-5level\":日志级别,\"%l\":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 -->\n        <property name=\"console_log_pattern\">%d{yyyy-MM-dd HH:mm:ss} %highlight{[%-5level]} %l - %m%n</property>\n        <!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->\n        <property name=\"file_log_pattern\">%d{yyyy-MM-dd HH:mm:ss} [%-5level] %C.%M - %m%n</property>\n    </Properties>\n\n    <!--定义appender -->\n    <appenders>\n        <!-- 用来定义输出到控制台的配置 -->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)-->\n            <ThresholdFilter level=\"${console_print_level}\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 设置输出格式,不设置默认为:%m%n -->\n            <PatternLayout pattern=\"${console_log_pattern}\"/>\n        </Console>\n\n        <!-- 打印root中指定的level级别以上的日志到文件 -->\n        <RollingFile name=\"RollingFile\" fileName=\"${basePath}/app.log\" filePattern=\"${basePath}/app/app-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/app\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配INFO以及以上级别 -->\n            <Filters>\n                <ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印INFO级别的日志到文件 -->\n        <RollingFile name=\"InfoFile\" fileName=\"${basePath}/info.log\" filePattern=\"${basePath}/info/info-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/info\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配INFO级别 -->\n            <Filters>\n                <ThresholdFilter level=\"WARN\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印WARN级别的日志到文件 -->\n        <RollingFile name=\"WarnFile\" fileName=\"${basePath}/warn.log\" filePattern=\"${basePath}/warn/warn-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/warn\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配WARN级别 -->\n            <Filters>\n                <ThresholdFilter level=\"ERROR\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"WARN\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n\n        <!-- 打印ERROR级别的日志到文件 -->\n        <RollingFile name=\"ErrorFile\" fileName=\"${basePath}/error.log\" filePattern=\"${basePath}/error/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${file_log_pattern}\"/>\n            <Policies>\n                <!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间-->\n                <TimeBasedTriggeringPolicy interval=\"1\" modulate=\"true\"/>\n                <!--如果文件大于了file_size也会直接产生一个文件-->\n                <SizeBasedTriggeringPolicy size=\"${every_file_size}\"/>\n            </Policies>\n            <!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好>2d, 不然可能会导致删除的时候日志文件还在被占用-->\n            <DefaultRolloverStrategy max=\"${rolling_max}\">\n                <Delete basePath=\"${basePath}/error\" maxDepth=\"2\">\n                    <IfFileName glob=\"*.log\"/>\n                    <IfLastModified age=\"${max_days}\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n            <!-- 匹配ERROR级别 -->\n            <Filters>\n                <ThresholdFilter level=\"FATAL\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"ERROR\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n        </RollingFile>\n    </appenders>\n\n    <!--然后定义logger,只有定义了logger并引入的appender,appender才会生效-->\n    <loggers>\n        <!-- 设置对打印sql语句的支持 -->\n        <!--<logger name=\"java.sql\" level=\"debug\" additivity=\"false\">-->\n        <!--<appender-ref ref=\"Console\"/>-->\n        <!--</logger>-->\n\n        <!--建立一个默认的root的logger-->\n        <root level=\"${output_log_level}\" >\n            <appender-ref ref=\"Console\"/>\n            <appender-ref ref=\"InfoFile\"/>\n            <appender-ref ref=\"WarnFile\"/>\n            <appender-ref ref=\"ErrorFile\"/>\n            <!--<appender-ref ref=\"RollingFile\"/>-->\n        </root>\n    </loggers>\n</configuration>\n```\n","slug":"log4j2-xml生产级配置","published":1,"updated":"2019-02-28T06:02:42.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mo0006oung60jo2zdb","content":"<p>log4j2依赖配置和xml配置文件配置记录<br><a id=\"more\"></a></p>\n<h2 id=\"log4j2依赖\"><a href=\"#log4j2依赖\" class=\"headerlink\" title=\"log4j2依赖\"></a>log4j2依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--slf4j + log4j2--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--exclude spring other log framework--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;*&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;*&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"log4j2-xml配置（含详细备注）\"><a href=\"#log4j2-xml配置（含详细备注）\" class=\"headerlink\" title=\"log4j2.xml配置（含详细备注）\"></a>log4j2.xml配置（含详细备注）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class=\"line\">&lt;!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出--&gt;</span><br><span class=\"line\">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数--&gt;</span><br><span class=\"line\">&lt;!--此份配置文件默认最多保存7天的日志， 每种级别的日志文件最多10个，每个文件最大50MB--&gt;</span><br><span class=\"line\">&lt;!--文件名按日志级别-日期（精确到日）-下标，一天产生的日志最多50MB*10=500MB,7天最大500MB*7=3500MB,所以需要保证磁盘至少有3500MB的空间--&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;1800&quot;&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 --&gt;</span><br><span class=\"line\">        &lt;!-- $&#123;front:rootDir&#125;是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 --&gt;</span><br><span class=\"line\">        &lt;!--&lt;property name=&quot;appName&quot;&gt;redis&lt;/property&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;property name=&quot;basePath&quot;&gt;$&#123;sys:user.home&#125;/logs/$&#123;appName&#125;&lt;/property&gt;--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePath&quot;&gt;logs&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 控制台显示的日志最低级别 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;console_print_level&quot;&gt;INFO&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认输出级别 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;output_log_level&quot;&gt;INFO&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认切割的最小单位 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;every_file_size&quot;&gt;50MB&lt;/property&gt;</span><br><span class=\"line\">        &lt;!--最多保存几天内的文件，用delete标签实现，保存7天的文件--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;max_days&quot;&gt;8d&lt;/property&gt;</span><br><span class=\"line\">        &lt;!--文件最大下标--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;rolling_max&quot;&gt;10&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 控制台默认输出格式,&quot;%-5level&quot;:日志级别,&quot;%l&quot;:输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;console_log_pattern&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %highlight&#123;[%-5level]&#125; %l - %m%n&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;file_log_pattern&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5level] %C.%M - %m%n&lt;/property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义appender --&gt;</span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!-- 用来定义输出到控制台的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;$&#123;console_print_level&#125;&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 设置输出格式,不设置默认为:%m%n --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;console_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印root中指定的level级别以上的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;$&#123;basePath&#125;/app.log&quot; filePattern=&quot;$&#123;basePath&#125;/app/app-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/app&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配INFO以及以上级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印INFO级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;InfoFile&quot; fileName=&quot;$&#123;basePath&#125;/info.log&quot; filePattern=&quot;$&#123;basePath&#125;/info/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/info&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配INFO级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;WARN&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印WARN级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;WarnFile&quot; fileName=&quot;$&#123;basePath&#125;/warn.log&quot; filePattern=&quot;$&#123;basePath&#125;/warn/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/warn&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配WARN级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;WARN&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印ERROR级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;basePath&#125;/error.log&quot; filePattern=&quot;$&#123;basePath&#125;/error/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/error&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配ERROR级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;FATAL&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--然后定义logger,只有定义了logger并引入的appender,appender才会生效--&gt;</span><br><span class=\"line\">    &lt;loggers&gt;</span><br><span class=\"line\">        &lt;!-- 设置对打印sql语句的支持 --&gt;</span><br><span class=\"line\">        &lt;!--&lt;logger name=&quot;java.sql&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;appender-ref ref=&quot;Console&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;/logger&gt;--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!--建立一个默认的root的logger--&gt;</span><br><span class=\"line\">        &lt;root level=&quot;$&#123;output_log_level&#125;&quot; &gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;Console&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;InfoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;WarnFile&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;ErrorFile&quot;/&gt;</span><br><span class=\"line\">            &lt;!--&lt;appender-ref ref=&quot;RollingFile&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;/root&gt;</span><br><span class=\"line\">    &lt;/loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>log4j2依赖配置和xml配置文件配置记录<br>","more":"</p>\n<h2 id=\"log4j2依赖\"><a href=\"#log4j2依赖\" class=\"headerlink\" title=\"log4j2依赖\"></a>log4j2依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--slf4j + log4j2--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--exclude spring other log framework--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;*&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;*&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"log4j2-xml配置（含详细备注）\"><a href=\"#log4j2-xml配置（含详细备注）\" class=\"headerlink\" title=\"log4j2.xml配置（含详细备注）\"></a>log4j2.xml配置（含详细备注）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class=\"line\">&lt;!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出--&gt;</span><br><span class=\"line\">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数--&gt;</span><br><span class=\"line\">&lt;!--此份配置文件默认最多保存7天的日志， 每种级别的日志文件最多10个，每个文件最大50MB--&gt;</span><br><span class=\"line\">&lt;!--文件名按日志级别-日期（精确到日）-下标，一天产生的日志最多50MB*10=500MB,7天最大500MB*7=3500MB,所以需要保证磁盘至少有3500MB的空间--&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;1800&quot;&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 --&gt;</span><br><span class=\"line\">        &lt;!-- $&#123;front:rootDir&#125;是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 --&gt;</span><br><span class=\"line\">        &lt;!--&lt;property name=&quot;appName&quot;&gt;redis&lt;/property&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;property name=&quot;basePath&quot;&gt;$&#123;sys:user.home&#125;/logs/$&#123;appName&#125;&lt;/property&gt;--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePath&quot;&gt;logs&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 控制台显示的日志最低级别 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;console_print_level&quot;&gt;INFO&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认输出级别 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;output_log_level&quot;&gt;INFO&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志默认切割的最小单位 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;every_file_size&quot;&gt;50MB&lt;/property&gt;</span><br><span class=\"line\">        &lt;!--最多保存几天内的文件，用delete标签实现，保存7天的文件--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;max_days&quot;&gt;8d&lt;/property&gt;</span><br><span class=\"line\">        &lt;!--文件最大下标--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;rolling_max&quot;&gt;10&lt;/property&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 控制台默认输出格式,&quot;%-5level&quot;:日志级别,&quot;%l&quot;:输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;console_log_pattern&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %highlight&#123;[%-5level]&#125; %l - %m%n&lt;/property&gt;</span><br><span class=\"line\">        &lt;!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;file_log_pattern&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5level] %C.%M - %m%n&lt;/property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义appender --&gt;</span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!-- 用来定义输出到控制台的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;$&#123;console_print_level&#125;&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 设置输出格式,不设置默认为:%m%n --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;console_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印root中指定的level级别以上的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;$&#123;basePath&#125;/app.log&quot; filePattern=&quot;$&#123;basePath&#125;/app/app-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/app&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配INFO以及以上级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印INFO级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;InfoFile&quot; fileName=&quot;$&#123;basePath&#125;/info.log&quot; filePattern=&quot;$&#123;basePath&#125;/info/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/info&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配INFO级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;WARN&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;INFO&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印WARN级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;WarnFile&quot; fileName=&quot;$&#123;basePath&#125;/warn.log&quot; filePattern=&quot;$&#123;basePath&#125;/warn/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/warn&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配WARN级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;WARN&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印ERROR级别的日志到文件 --&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;basePath&#125;/error.log&quot; filePattern=&quot;$&#123;basePath&#125;/error/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;$&#123;file_log_pattern&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;!--每天产生一个文件, interval 的单位取决于pattern精确到的最小时间--&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;</span><br><span class=\"line\">                &lt;!--如果文件大于了file_size也会直接产生一个文件--&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;!--下标i最大max,文件超过age时间就会被删除,注意age间隔最好&gt;2d, 不然可能会导致删除的时候日志文件还在被占用--&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;Delete basePath=&quot;$&#123;basePath&#125;/error&quot; maxDepth=&quot;2&quot;&gt;</span><br><span class=\"line\">                    &lt;IfFileName glob=&quot;*.log&quot;/&gt;</span><br><span class=\"line\">                    &lt;IfLastModified age=&quot;$&#123;max_days&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;/Delete&gt;</span><br><span class=\"line\">            &lt;/DefaultRolloverStrategy&gt;</span><br><span class=\"line\">            &lt;!-- 匹配ERROR级别 --&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;FATAL&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--然后定义logger,只有定义了logger并引入的appender,appender才会生效--&gt;</span><br><span class=\"line\">    &lt;loggers&gt;</span><br><span class=\"line\">        &lt;!-- 设置对打印sql语句的支持 --&gt;</span><br><span class=\"line\">        &lt;!--&lt;logger name=&quot;java.sql&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;appender-ref ref=&quot;Console&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;!--&lt;/logger&gt;--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!--建立一个默认的root的logger--&gt;</span><br><span class=\"line\">        &lt;root level=&quot;$&#123;output_log_level&#125;&quot; &gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;Console&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;InfoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;WarnFile&quot;/&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;ErrorFile&quot;/&gt;</span><br><span class=\"line\">            &lt;!--&lt;appender-ref ref=&quot;RollingFile&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;/root&gt;</span><br><span class=\"line\">    &lt;/loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>"},{"title":"开发必知的几个开源协议","date":"2019-02-26T05:30:19.000Z","_content":"什么是软件许可协议？\n通俗来讲，许可协议是指用来授权其他人具有某种使用你的作品的权利。\n\n依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法(WordPress, Drupal 和许多其它的内容管理系统都是开源软件)。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。\n<!-- more -->\n开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。\n\n但是很多的软件作者和设计者都对各种不同的开源许可协议的内容和含义不甚了了。当你选择了某种开源许可协议时，你都放弃了哪些权力？在没有能明白各种开源协议的确切含义前，在不知道它们最适用于什么情况下时，软件开发者不可能在关于哪个许可协议最适合自己的软件的问题上做出准确的抉择。\n\n为此花了些时间，收集整理了5种开源协议，具体内容如下：\n\n## BSD开源协议（original BSD license、FreeBSD license、Original BSD license）\nBSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。\n\n但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：\n\n如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。\n如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。\n不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\nBSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。\n\n## Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）\nApache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：\n\n需要给代码的用户一份Apache Licence\n如果你修改了代码，需要再被修改的文件中说明。\n在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。\n如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。\nApache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。\n\n## GPL（GNU General Public License）\n我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。\n\nGPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。\n\n由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。\n\n其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。\n\n## LGPL（GNU Lesser General Public License）\nLGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。\n\n但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。\n\nGPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品\n\n## MIT（MIT）\nMIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.\n\n## 开源协议对比图\n认识了以上5种协议之后，再来看看oschina制作的针对目前主流开源协议的对比图：\n<!-- ![](./开发必知的几个开源协议/开源协议对比图.jpg)-->\n{%asset_img 开源协议对比图.jpg%}\n\n## 参考内容\nhttp://baike.baidu.com/view/1373538.htm\nhttp://www.awflasher.com/blog/archives/939\nhttp://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/\nhttp://www.oschina.net/news/27273/main-os-license-comparison\nhttps://www.zhihu.com/question/19568896\n\n转载自<http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html>\n","source":"_posts/2019/02/开发必知的几个开源协议.md","raw":"---\ntitle: 开发必知的几个开源协议\ndate: 2019-02-26 13:30:19\ncategories: it知识\ntags:\n---\n什么是软件许可协议？\n通俗来讲，许可协议是指用来授权其他人具有某种使用你的作品的权利。\n\n依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法(WordPress, Drupal 和许多其它的内容管理系统都是开源软件)。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。\n<!-- more -->\n开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。\n\n但是很多的软件作者和设计者都对各种不同的开源许可协议的内容和含义不甚了了。当你选择了某种开源许可协议时，你都放弃了哪些权力？在没有能明白各种开源协议的确切含义前，在不知道它们最适用于什么情况下时，软件开发者不可能在关于哪个许可协议最适合自己的软件的问题上做出准确的抉择。\n\n为此花了些时间，收集整理了5种开源协议，具体内容如下：\n\n## BSD开源协议（original BSD license、FreeBSD license、Original BSD license）\nBSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。\n\n但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：\n\n如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。\n如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。\n不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\nBSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。\n\n## Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）\nApache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：\n\n需要给代码的用户一份Apache Licence\n如果你修改了代码，需要再被修改的文件中说明。\n在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。\n如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。\nApache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。\n\n## GPL（GNU General Public License）\n我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。\n\nGPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。\n\n由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。\n\n其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。\n\n## LGPL（GNU Lesser General Public License）\nLGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。\n\n但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。\n\nGPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品\n\n## MIT（MIT）\nMIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.\n\n## 开源协议对比图\n认识了以上5种协议之后，再来看看oschina制作的针对目前主流开源协议的对比图：\n<!-- ![](./开发必知的几个开源协议/开源协议对比图.jpg)-->\n{%asset_img 开源协议对比图.jpg%}\n\n## 参考内容\nhttp://baike.baidu.com/view/1373538.htm\nhttp://www.awflasher.com/blog/archives/939\nhttp://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/\nhttp://www.oschina.net/news/27273/main-os-license-comparison\nhttps://www.zhihu.com/question/19568896\n\n转载自<http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html>\n","slug":"开发必知的几个开源协议","published":1,"updated":"2019-03-04T07:25:54.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mo0009oungap7mse0w","content":"<p>什么是软件许可协议？<br>通俗来讲，许可协议是指用来授权其他人具有某种使用你的作品的权利。</p>\n<p>依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法(WordPress, Drupal 和许多其它的内容管理系统都是开源软件)。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。<br><a id=\"more\"></a><br>开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。</p>\n<p>但是很多的软件作者和设计者都对各种不同的开源许可协议的内容和含义不甚了了。当你选择了某种开源许可协议时，你都放弃了哪些权力？在没有能明白各种开源协议的确切含义前，在不知道它们最适用于什么情况下时，软件开发者不可能在关于哪个许可协议最适合自己的软件的问题上做出准确的抉择。</p>\n<p>为此花了些时间，收集整理了5种开源协议，具体内容如下：</p>\n<h2 id=\"BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）\"><a href=\"#BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）\" class=\"headerlink\" title=\"BSD开源协议（original BSD license、FreeBSD license、Original BSD license）\"></a>BSD开源协议（original BSD license、FreeBSD license、Original BSD license）</h2><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>\n<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>\n<p>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。<br>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。<br>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>\n<h2 id=\"Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）\"><a href=\"#Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）\" class=\"headerlink\" title=\"Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）\"></a>Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）</h2><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p>\n<p>需要给代码的用户一份Apache Licence<br>如果你修改了代码，需要再被修改的文件中说明。<br>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。<br>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。<br>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p>\n<h2 id=\"GPL（GNU-General-Public-License）\"><a href=\"#GPL（GNU-General-Public-License）\" class=\"headerlink\" title=\"GPL（GNU General Public License）\"></a>GPL（GNU General Public License）</h2><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。</p>\n<p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>\n<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>\n<p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p>\n<h2 id=\"LGPL（GNU-Lesser-General-Public-License）\"><a href=\"#LGPL（GNU-Lesser-General-Public-License）\" class=\"headerlink\" title=\"LGPL（GNU Lesser General Public License）\"></a>LGPL（GNU Lesser General Public License）</h2><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。</p>\n<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>\n<p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>\n<h2 id=\"MIT（MIT）\"><a href=\"#MIT（MIT）\" class=\"headerlink\" title=\"MIT（MIT）\"></a>MIT（MIT）</h2><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p>\n<h2 id=\"开源协议对比图\"><a href=\"#开源协议对比图\" class=\"headerlink\" title=\"开源协议对比图\"></a>开源协议对比图</h2><p>认识了以上5种协议之后，再来看看oschina制作的针对目前主流开源协议的对比图：<br><!-- ![](./开发必知的几个开源协议/开源协议对比图.jpg)--><br><img src=\"/2019/02/26/开发必知的几个开源协议/开源协议对比图.jpg\"></p>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><p><a href=\"http://baike.baidu.com/view/1373538.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/view/1373538.htm</a><br><a href=\"http://www.awflasher.com/blog/archives/939\" target=\"_blank\" rel=\"noopener\">http://www.awflasher.com/blog/archives/939</a><br><a href=\"http://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/\" target=\"_blank\" rel=\"noopener\">http://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/</a><br><a href=\"http://www.oschina.net/news/27273/main-os-license-comparison\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/news/27273/main-os-license-comparison</a><br><a href=\"https://www.zhihu.com/question/19568896\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19568896</a></p>\n<p>转载自<a href=\"http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html\" target=\"_blank\" rel=\"noopener\">http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html</a></p>\n","site":{"data":{}},"excerpt":"<p>什么是软件许可协议？<br>通俗来讲，许可协议是指用来授权其他人具有某种使用你的作品的权利。</p>\n<p>依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法(WordPress, Drupal 和许多其它的内容管理系统都是开源软件)。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。<br>","more":"<br>开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。</p>\n<p>但是很多的软件作者和设计者都对各种不同的开源许可协议的内容和含义不甚了了。当你选择了某种开源许可协议时，你都放弃了哪些权力？在没有能明白各种开源协议的确切含义前，在不知道它们最适用于什么情况下时，软件开发者不可能在关于哪个许可协议最适合自己的软件的问题上做出准确的抉择。</p>\n<p>为此花了些时间，收集整理了5种开源协议，具体内容如下：</p>\n<h2 id=\"BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）\"><a href=\"#BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）\" class=\"headerlink\" title=\"BSD开源协议（original BSD license、FreeBSD license、Original BSD license）\"></a>BSD开源协议（original BSD license、FreeBSD license、Original BSD license）</h2><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>\n<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>\n<p>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。<br>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。<br>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>\n<h2 id=\"Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）\"><a href=\"#Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）\" class=\"headerlink\" title=\"Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）\"></a>Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）</h2><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p>\n<p>需要给代码的用户一份Apache Licence<br>如果你修改了代码，需要再被修改的文件中说明。<br>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。<br>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。<br>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p>\n<h2 id=\"GPL（GNU-General-Public-License）\"><a href=\"#GPL（GNU-General-Public-License）\" class=\"headerlink\" title=\"GPL（GNU General Public License）\"></a>GPL（GNU General Public License）</h2><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。</p>\n<p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>\n<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>\n<p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p>\n<h2 id=\"LGPL（GNU-Lesser-General-Public-License）\"><a href=\"#LGPL（GNU-Lesser-General-Public-License）\" class=\"headerlink\" title=\"LGPL（GNU Lesser General Public License）\"></a>LGPL（GNU Lesser General Public License）</h2><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。</p>\n<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>\n<p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>\n<h2 id=\"MIT（MIT）\"><a href=\"#MIT（MIT）\" class=\"headerlink\" title=\"MIT（MIT）\"></a>MIT（MIT）</h2><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p>\n<h2 id=\"开源协议对比图\"><a href=\"#开源协议对比图\" class=\"headerlink\" title=\"开源协议对比图\"></a>开源协议对比图</h2><p>认识了以上5种协议之后，再来看看oschina制作的针对目前主流开源协议的对比图：<br><!-- ![](./开发必知的几个开源协议/开源协议对比图.jpg)--><br><img src=\"/2019/02/26/开发必知的几个开源协议/开源协议对比图.jpg\"></p>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><p><a href=\"http://baike.baidu.com/view/1373538.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/view/1373538.htm</a><br><a href=\"http://www.awflasher.com/blog/archives/939\" target=\"_blank\" rel=\"noopener\">http://www.awflasher.com/blog/archives/939</a><br><a href=\"http://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/\" target=\"_blank\" rel=\"noopener\">http://www.aqee.net/a-short-guide-to-open-source-and-similar-licenses/</a><br><a href=\"http://www.oschina.net/news/27273/main-os-license-comparison\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/news/27273/main-os-license-comparison</a><br><a href=\"https://www.zhihu.com/question/19568896\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19568896</a></p>\n<p>转载自<a href=\"http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html\" target=\"_blank\" rel=\"noopener\">http://jokerliang.com/developers-will-know-5-kinds-of-open-source-licenses.html</a></p>"},{"title":"线程终止","date":"2019-02-25T14:11:09.000Z","_content":"线程终止的几个方式和问题\n<!-- more -->\n\n1. thread.stop()\n   终止线程，并清除监视器锁内容，可能出现线程安全问题（如在同步代码块中终止线程，导致同步块不同步）\n\n2. thread.interrupt()\n   正确终止线程，可捕获中断异常。\n\n3. 标志位(volatile修饰位)\n","source":"_posts/2019/02/线程终止.md","raw":"---\ntitle: 线程终止\ndate: 2019-02-25 22:11:09\ncategories: java\ntags:\n  - 多线程\n---\n线程终止的几个方式和问题\n<!-- more -->\n\n1. thread.stop()\n   终止线程，并清除监视器锁内容，可能出现线程安全问题（如在同步代码块中终止线程，导致同步块不同步）\n\n2. thread.interrupt()\n   正确终止线程，可捕获中断异常。\n\n3. 标志位(volatile修饰位)\n","slug":"线程终止","published":1,"updated":"2019-03-04T07:24:55.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mp000coungl3yeb1md","content":"<p>线程终止的几个方式和问题<br><a id=\"more\"></a></p>\n<ol>\n<li><p>thread.stop()<br>终止线程，并清除监视器锁内容，可能出现线程安全问题（如在同步代码块中终止线程，导致同步块不同步）</p>\n</li>\n<li><p>thread.interrupt()<br>正确终止线程，可捕获中断异常。</p>\n</li>\n<li><p>标志位(volatile修饰位)</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>线程终止的几个方式和问题<br>","more":"</p>\n<ol>\n<li><p>thread.stop()<br>终止线程，并清除监视器锁内容，可能出现线程安全问题（如在同步代码块中终止线程，导致同步块不同步）</p>\n</li>\n<li><p>thread.interrupt()<br>正确终止线程，可捕获中断异常。</p>\n</li>\n<li><p>标志位(volatile修饰位)</p>\n</li>\n</ol>"},{"title":"线程状态","date":"2019-02-25T14:02:38.000Z","_content":"java 线程状态常量\n<!-- more -->\n1. NEW（新建）\n2. Runnable（可运行）\n3. Blocked(阻塞，等待锁)\n4. Waiting（等待其他线程通知）\n5. Timed Waiting（带超时时间的等待）\n6. Terminated（终止）\n{% asset_img 线程状态.png%}\n","source":"_posts/2019/02/线程状态.md","raw":"---\ntitle: 线程状态\ndate: 2019-02-25 22:02:38\ncategories: java\ntags:\n  - 多线程\n---\njava 线程状态常量\n<!-- more -->\n1. NEW（新建）\n2. Runnable（可运行）\n3. Blocked(阻塞，等待锁)\n4. Waiting（等待其他线程通知）\n5. Timed Waiting（带超时时间的等待）\n6. Terminated（终止）\n{% asset_img 线程状态.png%}\n","slug":"线程状态","published":1,"updated":"2019-03-05T01:40:44.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mq000eoung88x5y7ez","content":"<p>java 线程状态常量<br><a id=\"more\"></a></p>\n<ol>\n<li>NEW（新建）</li>\n<li>Runnable（可运行）</li>\n<li>Blocked(阻塞，等待锁)</li>\n<li>Waiting（等待其他线程通知）</li>\n<li>Timed Waiting（带超时时间的等待）</li>\n<li>Terminated（终止）<img src=\"/2019/02/25/线程状态/线程状态.png\">\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>java 线程状态常量<br>","more":"</p>\n<ol>\n<li>NEW（新建）</li>\n<li>Runnable（可运行）</li>\n<li>Blocked(阻塞，等待锁)</li>\n<li>Waiting（等待其他线程通知）</li>\n<li>Timed Waiting（带超时时间的等待）</li>\n<li>Terminated（终止）<img src=\"/2019/02/25/线程状态/线程状态.png\">\n</li>\n</ol>"},{"title":"spring面试要点","date":"2019-03-06T07:44:42.000Z","_content":"spring面试要点\n<!-- more -->\n## 正文标题\n\n{% asset_img ample.png %}\n","source":"_posts/2019/03/spring面试要点.md","raw":"---\ntitle: spring面试要点\ndate: 2019-03-06 15:44:42\ncategories:\n  - spring\ntags:\n  - 面试\n---\nspring面试要点\n<!-- more -->\n## 正文标题\n\n{% asset_img ample.png %}\n","slug":"spring面试要点","published":1,"updated":"2019-03-06T08:21:07.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mq000houng62wklo0j","content":"<p>spring面试要点<br><a id=\"more\"></a></p>\n<h2 id=\"正文标题\"><a href=\"#正文标题\" class=\"headerlink\" title=\"正文标题\"></a>正文标题</h2>\n","site":{"data":{}},"excerpt":"<p>spring面试要点<br>","more":"</p>\n<h2 id=\"正文标题\"><a href=\"#正文标题\" class=\"headerlink\" title=\"正文标题\"></a>正文标题</h2>"},{"title":"synchroniezd锁优化","date":"2019-03-01T06:23:14.000Z","_content":"1.6之后对synchronized做了优化，一个锁有不同阶段，获取的方式在底层不一样.\n<!-- more -->\n## mark word\n每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样\n\n## synchronized从偏向锁到重量级锁\n{% asset_img 偏向锁到重量级锁.png %}\n1. 偏向锁\n本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。\n\n2. 自旋锁（轻量级锁）\n当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁\n\n3. 重量级锁-对象监视器（monitor）\n- _entryList(多个争抢线程)\n- _owner（抢到锁的线程）\n- waitSet（调用wait等待的线程）\n","source":"_posts/2019/03/synchroniezd锁优化.md","raw":"---\ntitle: synchroniezd锁优化\ndate: 2019-03-01 14:23:14\ncategories: jvm虚拟机\ntags:\n---\n1.6之后对synchronized做了优化，一个锁有不同阶段，获取的方式在底层不一样.\n<!-- more -->\n## mark word\n每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样\n\n## synchronized从偏向锁到重量级锁\n{% asset_img 偏向锁到重量级锁.png %}\n1. 偏向锁\n本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。\n\n2. 自旋锁（轻量级锁）\n当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁\n\n3. 重量级锁-对象监视器（monitor）\n- _entryList(多个争抢线程)\n- _owner（抢到锁的线程）\n- waitSet（调用wait等待的线程）\n","slug":"synchroniezd锁优化","published":1,"updated":"2019-03-01T06:54:33.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mr000koungsbkbufwi","content":"<p>1.6之后对synchronized做了优化，一个锁有不同阶段，获取的方式在底层不一样.<br><a id=\"more\"></a></p>\n<h2 id=\"mark-word\"><a href=\"#mark-word\" class=\"headerlink\" title=\"mark word\"></a>mark word</h2><p>每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样</p>\n<h2 id=\"synchronized从偏向锁到重量级锁\"><a href=\"#synchronized从偏向锁到重量级锁\" class=\"headerlink\" title=\"synchronized从偏向锁到重量级锁\"></a>synchronized从偏向锁到重量级锁</h2><img src=\"/2019/03/01/synchroniezd锁优化/偏向锁到重量级锁.png\">\n<ol>\n<li><p>偏向锁<br>本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。</p>\n</li>\n<li><p>自旋锁（轻量级锁）<br>当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁</p>\n</li>\n<li><p>重量级锁-对象监视器（monitor）</p>\n</li>\n</ol>\n<ul>\n<li>_entryList(多个争抢线程)</li>\n<li>_owner（抢到锁的线程）</li>\n<li>waitSet（调用wait等待的线程）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>1.6之后对synchronized做了优化，一个锁有不同阶段，获取的方式在底层不一样.<br>","more":"</p>\n<h2 id=\"mark-word\"><a href=\"#mark-word\" class=\"headerlink\" title=\"mark word\"></a>mark word</h2><p>每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样</p>\n<h2 id=\"synchronized从偏向锁到重量级锁\"><a href=\"#synchronized从偏向锁到重量级锁\" class=\"headerlink\" title=\"synchronized从偏向锁到重量级锁\"></a>synchronized从偏向锁到重量级锁</h2><img src=\"/2019/03/01/synchroniezd锁优化/偏向锁到重量级锁.png\">\n<ol>\n<li><p>偏向锁<br>本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。</p>\n</li>\n<li><p>自旋锁（轻量级锁）<br>当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁</p>\n</li>\n<li><p>重量级锁-对象监视器（monitor）</p>\n</li>\n</ol>\n<ul>\n<li>_entryList(多个争抢线程)</li>\n<li>_owner（抢到锁的线程）</li>\n<li>waitSet（调用wait等待的线程）</li>\n</ul>"},{"title":"中间件面试要点","date":"2019-03-05T02:22:11.000Z","_content":"中间件使用时常用问题，中间件核心原理\n<!-- more -->\n## 消息队列\n## 消息队列常见问题\n1. 消息队列的用途\n- 应用解耦\n- 异步处理\n- 基于本地消息表的分布式事务\n\n2. \n\n### rabbitmq\n#### 集群配置\n1. 默认集群间使用元数据同步, 会有单点故障问题\n2. 使用ha-mode, 指定数据同步的方式,可以选择同步到所有节点和指定节点\n\n#### 持久化机制\n1. 队列持久化 (durable)\n2. 消息持久化\n3. 交换器持久化\n\n***内存警告***\n当内存超过阈值, 或磁盘剩余低于阈值, 会暂时阻塞(blocking)客户端连接,停止接收客户端消息.尝试进行内存换页\n\n***内存换页***\n当使用的内存将要到达阈值时, 将非持久化消息放入磁盘, 清除持久化消息内存副本以释放内存,都从磁盘读取.\n\n***磁盘告警***\n若磁盘剩余也低于阈值, 会阻塞客户端连接(blocked)\n\n#### 常见问题\n1. 消息乱序\n出现的原因\n- producer消息发送失败引起重发（有消息重发时）\n- 由于网络原因，前面的消息先到达队列\n\n2. 如何保证消息顺序消费\n- 如果仅仅是按照消息投递顺序消费，不关心投递是否乱序，可以指定一个queue只由一个消费者消费，并且此消费者为单线程消费\n- 如果需要根据消息业务id顺序消费，则可以按照类似于粘包拆包问题解决，先缓冲部分消息，等到所依赖的消息全部到达后一并处理。（如果由单消费者单线程可以在内存缓存，如果多消费者或多线程，可以在公共缓存或数据库等做缓冲）\n\n3. 消息丢失\n出现的原因\n- 消费端处理消息出现异常，由于自动ack，此条消息不会重新投递到消息队列\n\n解决办法\n- 手动ack\n- 应用层捕捉异常，重试处理消息或者告警\n\n4. 如何保证producer端可靠发送\n注意点\nproducer端接收确认有两种方式，同步，事务，异步(CallBackConfirm, ReturnConfirm)\n同步：影响并发度\n事务：影响并发度\n异步：在等待ack时连接断开，无法确认消息是否真的发送\n\n解决方法\n在异步确认的基础上，记录消息发送状态（数据库或缓存），定时扫描消息表，达到一定时间未确认则重发。\n此时会出现消息重复的问题，在消费端保证消息处理的幂等就好了。\n\n5. 如何保证consumer端可靠消费\n将acknowledge-mode设置为manual, 并在消息处理完成或者无法处理时手动ack或nack\n\n## activemq\n### 支持的消息协议\n- AUTO (自动检测传输过来的消息协议)\n- OpenWire (activemq默认协议, 支持tcp,udp,nio,vm等传输方式)\n- AMQP\n- Stomp\n- MQTT (更轻量级, 服务质量定义Qos)\n\n### 集群部署\n- 主从\n- cluster\n\n### 持久化方式\n- 数据库\n- amq (基于文件存储, 但索引文件过大)\n- kahaDB(基于文件系统, 替换了amq)\n\n\n## 缓存中间件\n### redis\n#### 核心原理\n基于Reator模型，单进程单线程，通过I/O多路复用模块实现单线程监听多个socket\n{% asset_img redis线程模型.png %}\n\n#### 常见问题\n1. 为什么单线程如此高性能\n- 主要基于操作系统api封装了多路复用模块，避免了I/O的阻塞\n- 纯内存操作\n- 单线程避免了线程切换的损耗\n\n#### 持久化方式\n1. rdb\ndump内存数据到磁盘，恢复时直接将文件加载到内存\n\n优点：恢复速度快\n缺点：宕机后将损失最后一次持久化之后的数据\n\n2. aof\n将redis的所有操作记录到文件，恢复时重做redis命令\n\n优点：宕机不会丢失数据\n缺点：恢复慢\n\n#### 主从同步过程\n完全复制：\n1. slave 发送sync到master\n2. master fork子进程并dump内存生成rdb文件发送到slave\n3. 在发送rdb期间产生的写命令缓冲到内存\n4. 发送缓冲的写命令到slave\n\n部分复制：\nslave 发送的sync命令改为psync，master确认后发送剩余的rdb和缓冲的写命令\n\n## zookeeper\n### 分布式锁\n1. 在资源节点下创建临时顺序节点\n2. 获取所有字节点,判断是否是最小的\n3. 若是最小的则获取锁,否则注册前一个节点的删除事件并阻塞\n4. 监听到删除时间, 跳到步骤2做判断\n5. 业务操作完成,释放锁,删除节点\n{% asset_img zookeeper分布式锁 %}\n\n### 选举机制\n投票信息:\n- logicalclock: 本地选举周期\n- epoch: 选举周期(每次参与选举完leader后+1, 真正zxid的前32位)\n- zxid: 数据id, 每次数据变动都会+1 (真正zxid的后32位, 真正zxid为64位)\n- sid: 该投票所属的serverId\n- leader: 提议的leader\n\n比较规则:\n1. epoch大的胜出\n2. zxid大的胜出\n3. sid大的胜出\n\n\n","source":"_posts/2019/03/中间件面试要点.md","raw":"---\ntitle: 中间件面试要点\ndate: 2019-03-05 10:22:11\ncategories:\n  - 中间件\ntags:\n  - 面试\n---\n中间件使用时常用问题，中间件核心原理\n<!-- more -->\n## 消息队列\n## 消息队列常见问题\n1. 消息队列的用途\n- 应用解耦\n- 异步处理\n- 基于本地消息表的分布式事务\n\n2. \n\n### rabbitmq\n#### 集群配置\n1. 默认集群间使用元数据同步, 会有单点故障问题\n2. 使用ha-mode, 指定数据同步的方式,可以选择同步到所有节点和指定节点\n\n#### 持久化机制\n1. 队列持久化 (durable)\n2. 消息持久化\n3. 交换器持久化\n\n***内存警告***\n当内存超过阈值, 或磁盘剩余低于阈值, 会暂时阻塞(blocking)客户端连接,停止接收客户端消息.尝试进行内存换页\n\n***内存换页***\n当使用的内存将要到达阈值时, 将非持久化消息放入磁盘, 清除持久化消息内存副本以释放内存,都从磁盘读取.\n\n***磁盘告警***\n若磁盘剩余也低于阈值, 会阻塞客户端连接(blocked)\n\n#### 常见问题\n1. 消息乱序\n出现的原因\n- producer消息发送失败引起重发（有消息重发时）\n- 由于网络原因，前面的消息先到达队列\n\n2. 如何保证消息顺序消费\n- 如果仅仅是按照消息投递顺序消费，不关心投递是否乱序，可以指定一个queue只由一个消费者消费，并且此消费者为单线程消费\n- 如果需要根据消息业务id顺序消费，则可以按照类似于粘包拆包问题解决，先缓冲部分消息，等到所依赖的消息全部到达后一并处理。（如果由单消费者单线程可以在内存缓存，如果多消费者或多线程，可以在公共缓存或数据库等做缓冲）\n\n3. 消息丢失\n出现的原因\n- 消费端处理消息出现异常，由于自动ack，此条消息不会重新投递到消息队列\n\n解决办法\n- 手动ack\n- 应用层捕捉异常，重试处理消息或者告警\n\n4. 如何保证producer端可靠发送\n注意点\nproducer端接收确认有两种方式，同步，事务，异步(CallBackConfirm, ReturnConfirm)\n同步：影响并发度\n事务：影响并发度\n异步：在等待ack时连接断开，无法确认消息是否真的发送\n\n解决方法\n在异步确认的基础上，记录消息发送状态（数据库或缓存），定时扫描消息表，达到一定时间未确认则重发。\n此时会出现消息重复的问题，在消费端保证消息处理的幂等就好了。\n\n5. 如何保证consumer端可靠消费\n将acknowledge-mode设置为manual, 并在消息处理完成或者无法处理时手动ack或nack\n\n## activemq\n### 支持的消息协议\n- AUTO (自动检测传输过来的消息协议)\n- OpenWire (activemq默认协议, 支持tcp,udp,nio,vm等传输方式)\n- AMQP\n- Stomp\n- MQTT (更轻量级, 服务质量定义Qos)\n\n### 集群部署\n- 主从\n- cluster\n\n### 持久化方式\n- 数据库\n- amq (基于文件存储, 但索引文件过大)\n- kahaDB(基于文件系统, 替换了amq)\n\n\n## 缓存中间件\n### redis\n#### 核心原理\n基于Reator模型，单进程单线程，通过I/O多路复用模块实现单线程监听多个socket\n{% asset_img redis线程模型.png %}\n\n#### 常见问题\n1. 为什么单线程如此高性能\n- 主要基于操作系统api封装了多路复用模块，避免了I/O的阻塞\n- 纯内存操作\n- 单线程避免了线程切换的损耗\n\n#### 持久化方式\n1. rdb\ndump内存数据到磁盘，恢复时直接将文件加载到内存\n\n优点：恢复速度快\n缺点：宕机后将损失最后一次持久化之后的数据\n\n2. aof\n将redis的所有操作记录到文件，恢复时重做redis命令\n\n优点：宕机不会丢失数据\n缺点：恢复慢\n\n#### 主从同步过程\n完全复制：\n1. slave 发送sync到master\n2. master fork子进程并dump内存生成rdb文件发送到slave\n3. 在发送rdb期间产生的写命令缓冲到内存\n4. 发送缓冲的写命令到slave\n\n部分复制：\nslave 发送的sync命令改为psync，master确认后发送剩余的rdb和缓冲的写命令\n\n## zookeeper\n### 分布式锁\n1. 在资源节点下创建临时顺序节点\n2. 获取所有字节点,判断是否是最小的\n3. 若是最小的则获取锁,否则注册前一个节点的删除事件并阻塞\n4. 监听到删除时间, 跳到步骤2做判断\n5. 业务操作完成,释放锁,删除节点\n{% asset_img zookeeper分布式锁 %}\n\n### 选举机制\n投票信息:\n- logicalclock: 本地选举周期\n- epoch: 选举周期(每次参与选举完leader后+1, 真正zxid的前32位)\n- zxid: 数据id, 每次数据变动都会+1 (真正zxid的后32位, 真正zxid为64位)\n- sid: 该投票所属的serverId\n- leader: 提议的leader\n\n比较规则:\n1. epoch大的胜出\n2. zxid大的胜出\n3. sid大的胜出\n\n\n","slug":"中间件面试要点","published":1,"updated":"2019-03-14T07:52:32.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9ms000noungobgne5tr","content":"<p>中间件使用时常用问题，中间件核心原理<br><a id=\"more\"></a></p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><h2 id=\"消息队列常见问题\"><a href=\"#消息队列常见问题\" class=\"headerlink\" title=\"消息队列常见问题\"></a>消息队列常见问题</h2><ol>\n<li>消息队列的用途</li>\n</ol>\n<ul>\n<li>应用解耦</li>\n<li>异步处理</li>\n<li>基于本地消息表的分布式事务</li>\n</ul>\n<ol start=\"2\">\n<li><h3 id=\"rabbitmq\"><a href=\"#rabbitmq\" class=\"headerlink\" title=\"rabbitmq\"></a>rabbitmq</h3><h4 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h4></li>\n<li>默认集群间使用元数据同步, 会有单点故障问题</li>\n<li>使用ha-mode, 指定数据同步的方式,可以选择同步到所有节点和指定节点</li>\n</ol>\n<h4 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h4><ol>\n<li>队列持久化 (durable)</li>\n<li>消息持久化</li>\n<li>交换器持久化</li>\n</ol>\n<p><strong><em>内存警告</em></strong><br>当内存超过阈值, 或磁盘剩余低于阈值, 会暂时阻塞(blocking)客户端连接,停止接收客户端消息.尝试进行内存换页</p>\n<p><strong><em>内存换页</em></strong><br>当使用的内存将要到达阈值时, 将非持久化消息放入磁盘, 清除持久化消息内存副本以释放内存,都从磁盘读取.</p>\n<p><strong><em>磁盘告警</em></strong><br>若磁盘剩余也低于阈值, 会阻塞客户端连接(blocked)</p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li>消息乱序<br>出现的原因</li>\n</ol>\n<ul>\n<li>producer消息发送失败引起重发（有消息重发时）</li>\n<li>由于网络原因，前面的消息先到达队列</li>\n</ul>\n<ol start=\"2\">\n<li>如何保证消息顺序消费</li>\n</ol>\n<ul>\n<li>如果仅仅是按照消息投递顺序消费，不关心投递是否乱序，可以指定一个queue只由一个消费者消费，并且此消费者为单线程消费</li>\n<li>如果需要根据消息业务id顺序消费，则可以按照类似于粘包拆包问题解决，先缓冲部分消息，等到所依赖的消息全部到达后一并处理。（如果由单消费者单线程可以在内存缓存，如果多消费者或多线程，可以在公共缓存或数据库等做缓冲）</li>\n</ul>\n<ol start=\"3\">\n<li>消息丢失<br>出现的原因</li>\n</ol>\n<ul>\n<li>消费端处理消息出现异常，由于自动ack，此条消息不会重新投递到消息队列</li>\n</ul>\n<p>解决办法</p>\n<ul>\n<li>手动ack</li>\n<li>应用层捕捉异常，重试处理消息或者告警</li>\n</ul>\n<ol start=\"4\">\n<li>如何保证producer端可靠发送<br>注意点<br>producer端接收确认有两种方式，同步，事务，异步(CallBackConfirm, ReturnConfirm)<br>同步：影响并发度<br>事务：影响并发度<br>异步：在等待ack时连接断开，无法确认消息是否真的发送</li>\n</ol>\n<p>解决方法<br>在异步确认的基础上，记录消息发送状态（数据库或缓存），定时扫描消息表，达到一定时间未确认则重发。<br>此时会出现消息重复的问题，在消费端保证消息处理的幂等就好了。</p>\n<ol start=\"5\">\n<li>如何保证consumer端可靠消费<br>将acknowledge-mode设置为manual, 并在消息处理完成或者无法处理时手动ack或nack</li>\n</ol>\n<h2 id=\"activemq\"><a href=\"#activemq\" class=\"headerlink\" title=\"activemq\"></a>activemq</h2><h3 id=\"支持的消息协议\"><a href=\"#支持的消息协议\" class=\"headerlink\" title=\"支持的消息协议\"></a>支持的消息协议</h3><ul>\n<li>AUTO (自动检测传输过来的消息协议)</li>\n<li>OpenWire (activemq默认协议, 支持tcp,udp,nio,vm等传输方式)</li>\n<li>AMQP</li>\n<li>Stomp</li>\n<li>MQTT (更轻量级, 服务质量定义Qos)</li>\n</ul>\n<h3 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h3><ul>\n<li>主从</li>\n<li>cluster</li>\n</ul>\n<h3 id=\"持久化方式\"><a href=\"#持久化方式\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h3><ul>\n<li>数据库</li>\n<li>amq (基于文件存储, 但索引文件过大)</li>\n<li>kahaDB(基于文件系统, 替换了amq)</li>\n</ul>\n<h2 id=\"缓存中间件\"><a href=\"#缓存中间件\" class=\"headerlink\" title=\"缓存中间件\"></a>缓存中间件</h2><h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><h4 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理\"></a>核心原理</h4><p>基于Reator模型，单进程单线程，通过I/O多路复用模块实现单线程监听多个socket<br><img src=\"/2019/03/05/中间件面试要点/redis线程模型.png\"></p>\n<h4 id=\"常见问题-1\"><a href=\"#常见问题-1\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li>为什么单线程如此高性能</li>\n</ol>\n<ul>\n<li>主要基于操作系统api封装了多路复用模块，避免了I/O的阻塞</li>\n<li>纯内存操作</li>\n<li>单线程避免了线程切换的损耗</li>\n</ul>\n<h4 id=\"持久化方式-1\"><a href=\"#持久化方式-1\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h4><ol>\n<li>rdb<br>dump内存数据到磁盘，恢复时直接将文件加载到内存</li>\n</ol>\n<p>优点：恢复速度快<br>缺点：宕机后将损失最后一次持久化之后的数据</p>\n<ol start=\"2\">\n<li>aof<br>将redis的所有操作记录到文件，恢复时重做redis命令</li>\n</ol>\n<p>优点：宕机不会丢失数据<br>缺点：恢复慢</p>\n<h4 id=\"主从同步过程\"><a href=\"#主从同步过程\" class=\"headerlink\" title=\"主从同步过程\"></a>主从同步过程</h4><p>完全复制：</p>\n<ol>\n<li>slave 发送sync到master</li>\n<li>master fork子进程并dump内存生成rdb文件发送到slave</li>\n<li>在发送rdb期间产生的写命令缓冲到内存</li>\n<li>发送缓冲的写命令到slave</li>\n</ol>\n<p>部分复制：<br>slave 发送的sync命令改为psync，master确认后发送剩余的rdb和缓冲的写命令</p>\n<h2 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><ol>\n<li>在资源节点下创建临时顺序节点</li>\n<li>获取所有字节点,判断是否是最小的</li>\n<li>若是最小的则获取锁,否则注册前一个节点的删除事件并阻塞</li>\n<li>监听到删除时间, 跳到步骤2做判断</li>\n<li>业务操作完成,释放锁,删除节点\n</li>\n</ol>\n<h3 id=\"选举机制\"><a href=\"#选举机制\" class=\"headerlink\" title=\"选举机制\"></a>选举机制</h3><p>投票信息:</p>\n<ul>\n<li>logicalclock: 本地选举周期</li>\n<li>epoch: 选举周期(每次参与选举完leader后+1, 真正zxid的前32位)</li>\n<li>zxid: 数据id, 每次数据变动都会+1 (真正zxid的后32位, 真正zxid为64位)</li>\n<li>sid: 该投票所属的serverId</li>\n<li>leader: 提议的leader</li>\n</ul>\n<p>比较规则:</p>\n<ol>\n<li>epoch大的胜出</li>\n<li>zxid大的胜出</li>\n<li>sid大的胜出</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>中间件使用时常用问题，中间件核心原理<br>","more":"</p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><h2 id=\"消息队列常见问题\"><a href=\"#消息队列常见问题\" class=\"headerlink\" title=\"消息队列常见问题\"></a>消息队列常见问题</h2><ol>\n<li>消息队列的用途</li>\n</ol>\n<ul>\n<li>应用解耦</li>\n<li>异步处理</li>\n<li>基于本地消息表的分布式事务</li>\n</ul>\n<ol start=\"2\">\n<li><h3 id=\"rabbitmq\"><a href=\"#rabbitmq\" class=\"headerlink\" title=\"rabbitmq\"></a>rabbitmq</h3><h4 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h4></li>\n<li>默认集群间使用元数据同步, 会有单点故障问题</li>\n<li>使用ha-mode, 指定数据同步的方式,可以选择同步到所有节点和指定节点</li>\n</ol>\n<h4 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h4><ol>\n<li>队列持久化 (durable)</li>\n<li>消息持久化</li>\n<li>交换器持久化</li>\n</ol>\n<p><strong><em>内存警告</em></strong><br>当内存超过阈值, 或磁盘剩余低于阈值, 会暂时阻塞(blocking)客户端连接,停止接收客户端消息.尝试进行内存换页</p>\n<p><strong><em>内存换页</em></strong><br>当使用的内存将要到达阈值时, 将非持久化消息放入磁盘, 清除持久化消息内存副本以释放内存,都从磁盘读取.</p>\n<p><strong><em>磁盘告警</em></strong><br>若磁盘剩余也低于阈值, 会阻塞客户端连接(blocked)</p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li>消息乱序<br>出现的原因</li>\n</ol>\n<ul>\n<li>producer消息发送失败引起重发（有消息重发时）</li>\n<li>由于网络原因，前面的消息先到达队列</li>\n</ul>\n<ol start=\"2\">\n<li>如何保证消息顺序消费</li>\n</ol>\n<ul>\n<li>如果仅仅是按照消息投递顺序消费，不关心投递是否乱序，可以指定一个queue只由一个消费者消费，并且此消费者为单线程消费</li>\n<li>如果需要根据消息业务id顺序消费，则可以按照类似于粘包拆包问题解决，先缓冲部分消息，等到所依赖的消息全部到达后一并处理。（如果由单消费者单线程可以在内存缓存，如果多消费者或多线程，可以在公共缓存或数据库等做缓冲）</li>\n</ul>\n<ol start=\"3\">\n<li>消息丢失<br>出现的原因</li>\n</ol>\n<ul>\n<li>消费端处理消息出现异常，由于自动ack，此条消息不会重新投递到消息队列</li>\n</ul>\n<p>解决办法</p>\n<ul>\n<li>手动ack</li>\n<li>应用层捕捉异常，重试处理消息或者告警</li>\n</ul>\n<ol start=\"4\">\n<li>如何保证producer端可靠发送<br>注意点<br>producer端接收确认有两种方式，同步，事务，异步(CallBackConfirm, ReturnConfirm)<br>同步：影响并发度<br>事务：影响并发度<br>异步：在等待ack时连接断开，无法确认消息是否真的发送</li>\n</ol>\n<p>解决方法<br>在异步确认的基础上，记录消息发送状态（数据库或缓存），定时扫描消息表，达到一定时间未确认则重发。<br>此时会出现消息重复的问题，在消费端保证消息处理的幂等就好了。</p>\n<ol start=\"5\">\n<li>如何保证consumer端可靠消费<br>将acknowledge-mode设置为manual, 并在消息处理完成或者无法处理时手动ack或nack</li>\n</ol>\n<h2 id=\"activemq\"><a href=\"#activemq\" class=\"headerlink\" title=\"activemq\"></a>activemq</h2><h3 id=\"支持的消息协议\"><a href=\"#支持的消息协议\" class=\"headerlink\" title=\"支持的消息协议\"></a>支持的消息协议</h3><ul>\n<li>AUTO (自动检测传输过来的消息协议)</li>\n<li>OpenWire (activemq默认协议, 支持tcp,udp,nio,vm等传输方式)</li>\n<li>AMQP</li>\n<li>Stomp</li>\n<li>MQTT (更轻量级, 服务质量定义Qos)</li>\n</ul>\n<h3 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h3><ul>\n<li>主从</li>\n<li>cluster</li>\n</ul>\n<h3 id=\"持久化方式\"><a href=\"#持久化方式\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h3><ul>\n<li>数据库</li>\n<li>amq (基于文件存储, 但索引文件过大)</li>\n<li>kahaDB(基于文件系统, 替换了amq)</li>\n</ul>\n<h2 id=\"缓存中间件\"><a href=\"#缓存中间件\" class=\"headerlink\" title=\"缓存中间件\"></a>缓存中间件</h2><h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><h4 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理\"></a>核心原理</h4><p>基于Reator模型，单进程单线程，通过I/O多路复用模块实现单线程监听多个socket<br><img src=\"/2019/03/05/中间件面试要点/redis线程模型.png\"></p>\n<h4 id=\"常见问题-1\"><a href=\"#常见问题-1\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li>为什么单线程如此高性能</li>\n</ol>\n<ul>\n<li>主要基于操作系统api封装了多路复用模块，避免了I/O的阻塞</li>\n<li>纯内存操作</li>\n<li>单线程避免了线程切换的损耗</li>\n</ul>\n<h4 id=\"持久化方式-1\"><a href=\"#持久化方式-1\" class=\"headerlink\" title=\"持久化方式\"></a>持久化方式</h4><ol>\n<li>rdb<br>dump内存数据到磁盘，恢复时直接将文件加载到内存</li>\n</ol>\n<p>优点：恢复速度快<br>缺点：宕机后将损失最后一次持久化之后的数据</p>\n<ol start=\"2\">\n<li>aof<br>将redis的所有操作记录到文件，恢复时重做redis命令</li>\n</ol>\n<p>优点：宕机不会丢失数据<br>缺点：恢复慢</p>\n<h4 id=\"主从同步过程\"><a href=\"#主从同步过程\" class=\"headerlink\" title=\"主从同步过程\"></a>主从同步过程</h4><p>完全复制：</p>\n<ol>\n<li>slave 发送sync到master</li>\n<li>master fork子进程并dump内存生成rdb文件发送到slave</li>\n<li>在发送rdb期间产生的写命令缓冲到内存</li>\n<li>发送缓冲的写命令到slave</li>\n</ol>\n<p>部分复制：<br>slave 发送的sync命令改为psync，master确认后发送剩余的rdb和缓冲的写命令</p>\n<h2 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><ol>\n<li>在资源节点下创建临时顺序节点</li>\n<li>获取所有字节点,判断是否是最小的</li>\n<li>若是最小的则获取锁,否则注册前一个节点的删除事件并阻塞</li>\n<li>监听到删除时间, 跳到步骤2做判断</li>\n<li>业务操作完成,释放锁,删除节点\n</li>\n</ol>\n<h3 id=\"选举机制\"><a href=\"#选举机制\" class=\"headerlink\" title=\"选举机制\"></a>选举机制</h3><p>投票信息:</p>\n<ul>\n<li>logicalclock: 本地选举周期</li>\n<li>epoch: 选举周期(每次参与选举完leader后+1, 真正zxid的前32位)</li>\n<li>zxid: 数据id, 每次数据变动都会+1 (真正zxid的后32位, 真正zxid为64位)</li>\n<li>sid: 该投票所属的serverId</li>\n<li>leader: 提议的leader</li>\n</ul>\n<p>比较规则:</p>\n<ol>\n<li>epoch大的胜出</li>\n<li>zxid大的胜出</li>\n<li>sid大的胜出</li>\n</ol>"},{"title":"参数调优","date":"2019-03-14T07:52:50.000Z","_content":"参数调优\n<!-- more -->\n## Tomcat\n- ConnectionTimeout 默认20s, 连接超时时间\n- maxThreads 默认200, 最大处理线程数\n- acceptCount(backlog) 默认100, 等待连接数\n- maxConnections nio 1w, apr 8192\n\nacceptCount + maxConnections = 总共可以受理的连接数\n\n","source":"_posts/2019/03/参数调优.md","raw":"---\ntitle: 参数调优\ndate: 2019-03-14 15:52:50\ncategories: 调优\ntags: \n---\n参数调优\n<!-- more -->\n## Tomcat\n- ConnectionTimeout 默认20s, 连接超时时间\n- maxThreads 默认200, 最大处理线程数\n- acceptCount(backlog) 默认100, 等待连接数\n- maxConnections nio 1w, apr 8192\n\nacceptCount + maxConnections = 总共可以受理的连接数\n\n","slug":"参数调优","published":1,"updated":"2019-03-14T07:56:39.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9ms000poungflov88th","content":"<p>参数调优<br><a id=\"more\"></a></p>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><ul>\n<li>ConnectionTimeout 默认20s, 连接超时时间</li>\n<li>maxThreads 默认200, 最大处理线程数</li>\n<li>acceptCount(backlog) 默认100, 等待连接数</li>\n<li>maxConnections nio 1w, apr 8192</li>\n</ul>\n<p>acceptCount + maxConnections = 总共可以受理的连接数</p>\n","site":{"data":{}},"excerpt":"<p>参数调优<br>","more":"</p>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><ul>\n<li>ConnectionTimeout 默认20s, 连接超时时间</li>\n<li>maxThreads 默认200, 最大处理线程数</li>\n<li>acceptCount(backlog) 默认100, 等待连接数</li>\n<li>maxConnections nio 1w, apr 8192</li>\n</ul>\n<p>acceptCount + maxConnections = 总共可以受理的连接数</p>"},{"title":"数据库面试要点","date":"2019-03-04T06:49:39.000Z","_content":"数据库基本概念，数据结构，常用引擎，索引注意点，事务并发问题和并发控制的实现，加锁机制等。\n<!-- more -->\n## 1.基本概念\n### 三级模式\n1. 外模式（数据库用户的数据视图）\n2. 模式（全局数据视图）\n3. 内模式（物理存储方式）\n\n### 两级映像\n1. 外模式/模式，保证逻辑独立性\n2. 模式/内模式，保证物理独立性\n\n### 三范式\n1. 每一列都是原子的，不可再分的\n2. 保证第一范式，不存在部分依赖\n3. 保证第二范式，不存在传递依赖\n\n### MySQL的数据库引擎\n1. ISAM：读取快，不支持事务，外键\n2. MyISAM：基于ISAM，支持表级锁\n3. archive： 提供压缩功能，适合大数据量的历史数据，插入快，无索引，查询慢\n4. blackhole：用作日志记录\n5. heap：数据存在内存，每个表对应一个磁盘文件，表结构存在磁盘\n6. csv：基于普通文本，每个数据占一个文本行\n7. performance schame：用于收集数据库服务器的参数\n8. InnoDB：提供ACID事务（原子性，一致性，隔离性，持久性），多版本并发控制，支持索引，5.5之后的默认引擎。\n\n### 死锁的四个必要条件\n1. 互斥\n2. 不可剥夺\n3. 请求与保持\n4. 环路等待\n\n### 显示加锁\n```\n// 显示加行级锁\nselect ... lock in share mode(加S锁)\nselect ... for update(加X锁)\n\n// 显示加表级锁\nSET AUTOCOMMIT=0;\nLOCK TABLES t1 WRITE, t2 READ, ...;\n[do something with tables t1 and here];\nCOMMIT;\nUNLOCK TABLES;\n```\n\n## 2.索引数据结构\n\n### B树和B+树\n#### B树\n1. 多路搜索树,每个节点包含n个key，data和n+1个指针指向下一层的节点\n\n#### B+树\n1. 多路搜索树，每个节点包含n个key和n个指向下一层个节点的指针和一个指向兄弟节点的指针\n2. 非叶子节点不存储数据，叶子节点存储数据并包含一个指向兄弟节点的指针。\n3. 每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O\n\n#### B+树快的原因\n1. 多路搜索树，查询复杂度为logm(n)\n2. 每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O\n3. 每个非叶子节点只存储key而不存储实际数据，搜索变得稳定。\n4. 每个节点有指向兄弟节点的指针，对于范围查找变得更快。\n\n#### 聚簇索引和非聚簇索引\n\n##### 聚簇索引\n逻辑结构和物理结构一致，叶子节点存储的就是数据\n##### 非聚簇索引\n逻辑结构和物理结构不一致，叶子节点存储的不是直接的数据。如InnoDB的二级索引的叶子节点为主键值，MyISAM二级索引叶子节点指向的为数据物理存储地址的指针\n\n## 3.索引分类和注意点\n### 索引分类\n索引分类：主键索引，普通索引，唯一索引，全文索引，组合索引\n\n### 使用索引注意点\n- 索引字段默认值不要设置null，索引不会包含null值\n- MySQL查询时只会使用一种索引\n- 有索引的列参与计算时，不会走此索引，尽量直接使用索引列而不要使索引列参与计算\n- 组合索引为最左匹配，如建立（a, b, c）索引时会同时建立（a）, (a, b), (a, b, c)\n- 只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！因为InnoDB的行锁是通过索引上的索引项来实现的。\n- 当查询的列为组合索引中的字段，则此二级索引不需要回表操作，直接返回数据。因为组合索引上保存了组合索引包含的字段信息。\n\n## 4.事务\n### 事务的隔离级别\n1. 读未提交\n2. 读已提交\n3. 可重复读\n4. 串行化\n\n### 事务并发带来的问题\n1. 丢失修改（事务B的修改覆盖了未完成事务A的修改）\n2. 读脏数据（事务B读取了未完成事务A的未提交更新）\n3. 不可重复读\n- 事务A两次用相同的sql读取数据，其间事务B修改了数据\n- 事务A两次用相同的sql读取数据，其间事务B添加或删除了符合sql的数据（幻读）\n标准的InnoDB的可重复读并未解决幻读的问题，幻读是InnoDB的MVCC解决的。\n\n### LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)\n#### 一级封锁协议\n写数据前加X锁，事务结束后释放\n#### 二级封锁协议\n满足一级封锁协议，读数据前加S锁，读完释放\n#### 三级封锁协议\n满足一级封锁协议，读数据前加S锁，事务结束后释放\n\n### MVCC(Multi-Version Concurrent Controller，多版本并发控制)\n#### 快照读和当前读\n- 快照读：仅读取记录的可见版本，可能是历史版本。不会对返回的数据集加锁\n简单的查询都属于快照读\n\n- 当前读：读取记录的最新版本。并对返回的数据集一行一行得加锁。\n```\nselect * from table where ? lock in share mode; （加S锁）\nselect * from table where ? for update; （加X锁，下同）\ninsert, update, delete操作\n```\n\n#### 死锁\n当两个（或以上）Session以不同的顺序对同一(或若干)数据行加锁，则可能出现死锁。\n{% asset_img 死锁1.jpg %}\n{% asset_img 死锁2.jpg %}\n\n#### InnoDB的MVCC实现机制\n##### 概括\nInnoDB的MVCC，通过在每行数据后面保存两个隐藏的列，创建版本号和删除版本号来实现。每开始一个新的事务，系统版本号就会递增1。MVCC只在RC（读已提交）和RR（可重复读）两个隔离级别工作，另外两个隔离界别与MVCC不兼容。\n\n##### MVCC实现Repeatable Read （可重复读）的隔离级别\n1. select：create_id < current_id < delete_id\n2. insert: create_id = current_id\n3. delete: delete_id = current_id\n4. update: insert + delete, 插入一条create_id = current_id的记录，将原记录delete_id = current_id\n\nInnoDB后台运行线程，删除delete_id < current_id的记录，称为purge操作。\n\n##### MVCC中RC和RR隔离级别的区别\n在RR隔离级别下，事务中的普通读取都是快照读，即别的事务修改的数据在此事务中读不到\n在RC隔离级别下，事务中的读取总是当前读，即会产生不可重复读的问题\n\n##### MVCC加锁细节\n```\ndelete from t1 where key=10\n```\nRC（读已提交）隔离级别下\n- 如果key为主键索引，在主键索引上加x锁\n- 如果key为唯一索引，在唯一索引上加x锁\n- 如果key为二级非唯一索引，在所有对应的索引上加x锁\n- 如果key没有索引，则会对所有数据加X锁，但如果不符合查询条件，会马上释放X锁\n\nRR（可重复读）隔离级别下\n为了不出现幻读，在第一条符合条件的数据和最后一条符合条件的数据两端加上GPA锁，不允许在此前后插入数据。\n\n\n","source":"_posts/2019/03/数据库面试要点.md","raw":"---\ntitle: 数据库面试要点\ndate: 2019-03-04 14:49:39\ncategories: 数据库\ntags: 面试\n---\n数据库基本概念，数据结构，常用引擎，索引注意点，事务并发问题和并发控制的实现，加锁机制等。\n<!-- more -->\n## 1.基本概念\n### 三级模式\n1. 外模式（数据库用户的数据视图）\n2. 模式（全局数据视图）\n3. 内模式（物理存储方式）\n\n### 两级映像\n1. 外模式/模式，保证逻辑独立性\n2. 模式/内模式，保证物理独立性\n\n### 三范式\n1. 每一列都是原子的，不可再分的\n2. 保证第一范式，不存在部分依赖\n3. 保证第二范式，不存在传递依赖\n\n### MySQL的数据库引擎\n1. ISAM：读取快，不支持事务，外键\n2. MyISAM：基于ISAM，支持表级锁\n3. archive： 提供压缩功能，适合大数据量的历史数据，插入快，无索引，查询慢\n4. blackhole：用作日志记录\n5. heap：数据存在内存，每个表对应一个磁盘文件，表结构存在磁盘\n6. csv：基于普通文本，每个数据占一个文本行\n7. performance schame：用于收集数据库服务器的参数\n8. InnoDB：提供ACID事务（原子性，一致性，隔离性，持久性），多版本并发控制，支持索引，5.5之后的默认引擎。\n\n### 死锁的四个必要条件\n1. 互斥\n2. 不可剥夺\n3. 请求与保持\n4. 环路等待\n\n### 显示加锁\n```\n// 显示加行级锁\nselect ... lock in share mode(加S锁)\nselect ... for update(加X锁)\n\n// 显示加表级锁\nSET AUTOCOMMIT=0;\nLOCK TABLES t1 WRITE, t2 READ, ...;\n[do something with tables t1 and here];\nCOMMIT;\nUNLOCK TABLES;\n```\n\n## 2.索引数据结构\n\n### B树和B+树\n#### B树\n1. 多路搜索树,每个节点包含n个key，data和n+1个指针指向下一层的节点\n\n#### B+树\n1. 多路搜索树，每个节点包含n个key和n个指向下一层个节点的指针和一个指向兄弟节点的指针\n2. 非叶子节点不存储数据，叶子节点存储数据并包含一个指向兄弟节点的指针。\n3. 每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O\n\n#### B+树快的原因\n1. 多路搜索树，查询复杂度为logm(n)\n2. 每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O\n3. 每个非叶子节点只存储key而不存储实际数据，搜索变得稳定。\n4. 每个节点有指向兄弟节点的指针，对于范围查找变得更快。\n\n#### 聚簇索引和非聚簇索引\n\n##### 聚簇索引\n逻辑结构和物理结构一致，叶子节点存储的就是数据\n##### 非聚簇索引\n逻辑结构和物理结构不一致，叶子节点存储的不是直接的数据。如InnoDB的二级索引的叶子节点为主键值，MyISAM二级索引叶子节点指向的为数据物理存储地址的指针\n\n## 3.索引分类和注意点\n### 索引分类\n索引分类：主键索引，普通索引，唯一索引，全文索引，组合索引\n\n### 使用索引注意点\n- 索引字段默认值不要设置null，索引不会包含null值\n- MySQL查询时只会使用一种索引\n- 有索引的列参与计算时，不会走此索引，尽量直接使用索引列而不要使索引列参与计算\n- 组合索引为最左匹配，如建立（a, b, c）索引时会同时建立（a）, (a, b), (a, b, c)\n- 只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！因为InnoDB的行锁是通过索引上的索引项来实现的。\n- 当查询的列为组合索引中的字段，则此二级索引不需要回表操作，直接返回数据。因为组合索引上保存了组合索引包含的字段信息。\n\n## 4.事务\n### 事务的隔离级别\n1. 读未提交\n2. 读已提交\n3. 可重复读\n4. 串行化\n\n### 事务并发带来的问题\n1. 丢失修改（事务B的修改覆盖了未完成事务A的修改）\n2. 读脏数据（事务B读取了未完成事务A的未提交更新）\n3. 不可重复读\n- 事务A两次用相同的sql读取数据，其间事务B修改了数据\n- 事务A两次用相同的sql读取数据，其间事务B添加或删除了符合sql的数据（幻读）\n标准的InnoDB的可重复读并未解决幻读的问题，幻读是InnoDB的MVCC解决的。\n\n### LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)\n#### 一级封锁协议\n写数据前加X锁，事务结束后释放\n#### 二级封锁协议\n满足一级封锁协议，读数据前加S锁，读完释放\n#### 三级封锁协议\n满足一级封锁协议，读数据前加S锁，事务结束后释放\n\n### MVCC(Multi-Version Concurrent Controller，多版本并发控制)\n#### 快照读和当前读\n- 快照读：仅读取记录的可见版本，可能是历史版本。不会对返回的数据集加锁\n简单的查询都属于快照读\n\n- 当前读：读取记录的最新版本。并对返回的数据集一行一行得加锁。\n```\nselect * from table where ? lock in share mode; （加S锁）\nselect * from table where ? for update; （加X锁，下同）\ninsert, update, delete操作\n```\n\n#### 死锁\n当两个（或以上）Session以不同的顺序对同一(或若干)数据行加锁，则可能出现死锁。\n{% asset_img 死锁1.jpg %}\n{% asset_img 死锁2.jpg %}\n\n#### InnoDB的MVCC实现机制\n##### 概括\nInnoDB的MVCC，通过在每行数据后面保存两个隐藏的列，创建版本号和删除版本号来实现。每开始一个新的事务，系统版本号就会递增1。MVCC只在RC（读已提交）和RR（可重复读）两个隔离级别工作，另外两个隔离界别与MVCC不兼容。\n\n##### MVCC实现Repeatable Read （可重复读）的隔离级别\n1. select：create_id < current_id < delete_id\n2. insert: create_id = current_id\n3. delete: delete_id = current_id\n4. update: insert + delete, 插入一条create_id = current_id的记录，将原记录delete_id = current_id\n\nInnoDB后台运行线程，删除delete_id < current_id的记录，称为purge操作。\n\n##### MVCC中RC和RR隔离级别的区别\n在RR隔离级别下，事务中的普通读取都是快照读，即别的事务修改的数据在此事务中读不到\n在RC隔离级别下，事务中的读取总是当前读，即会产生不可重复读的问题\n\n##### MVCC加锁细节\n```\ndelete from t1 where key=10\n```\nRC（读已提交）隔离级别下\n- 如果key为主键索引，在主键索引上加x锁\n- 如果key为唯一索引，在唯一索引上加x锁\n- 如果key为二级非唯一索引，在所有对应的索引上加x锁\n- 如果key没有索引，则会对所有数据加X锁，但如果不符合查询条件，会马上释放X锁\n\nRR（可重复读）隔离级别下\n为了不出现幻读，在第一条符合条件的数据和最后一条符合条件的数据两端加上GPA锁，不允许在此前后插入数据。\n\n\n","slug":"数据库面试要点","published":1,"updated":"2019-03-06T11:18:33.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mt000soungkkogt3qq","content":"<p>数据库基本概念，数据结构，常用引擎，索引注意点，事务并发问题和并发控制的实现，加锁机制等。<br><a id=\"more\"></a></p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><h3 id=\"三级模式\"><a href=\"#三级模式\" class=\"headerlink\" title=\"三级模式\"></a>三级模式</h3><ol>\n<li>外模式（数据库用户的数据视图）</li>\n<li>模式（全局数据视图）</li>\n<li>内模式（物理存储方式）</li>\n</ol>\n<h3 id=\"两级映像\"><a href=\"#两级映像\" class=\"headerlink\" title=\"两级映像\"></a>两级映像</h3><ol>\n<li>外模式/模式，保证逻辑独立性</li>\n<li>模式/内模式，保证物理独立性</li>\n</ol>\n<h3 id=\"三范式\"><a href=\"#三范式\" class=\"headerlink\" title=\"三范式\"></a>三范式</h3><ol>\n<li>每一列都是原子的，不可再分的</li>\n<li>保证第一范式，不存在部分依赖</li>\n<li>保证第二范式，不存在传递依赖</li>\n</ol>\n<h3 id=\"MySQL的数据库引擎\"><a href=\"#MySQL的数据库引擎\" class=\"headerlink\" title=\"MySQL的数据库引擎\"></a>MySQL的数据库引擎</h3><ol>\n<li>ISAM：读取快，不支持事务，外键</li>\n<li>MyISAM：基于ISAM，支持表级锁</li>\n<li>archive： 提供压缩功能，适合大数据量的历史数据，插入快，无索引，查询慢</li>\n<li>blackhole：用作日志记录</li>\n<li>heap：数据存在内存，每个表对应一个磁盘文件，表结构存在磁盘</li>\n<li>csv：基于普通文本，每个数据占一个文本行</li>\n<li>performance schame：用于收集数据库服务器的参数</li>\n<li>InnoDB：提供ACID事务（原子性，一致性，隔离性，持久性），多版本并发控制，支持索引，5.5之后的默认引擎。</li>\n</ol>\n<h3 id=\"死锁的四个必要条件\"><a href=\"#死锁的四个必要条件\" class=\"headerlink\" title=\"死锁的四个必要条件\"></a>死锁的四个必要条件</h3><ol>\n<li>互斥</li>\n<li>不可剥夺</li>\n<li>请求与保持</li>\n<li>环路等待</li>\n</ol>\n<h3 id=\"显示加锁\"><a href=\"#显示加锁\" class=\"headerlink\" title=\"显示加锁\"></a>显示加锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 显示加行级锁</span><br><span class=\"line\">select ... lock in share mode(加S锁)</span><br><span class=\"line\">select ... for update(加X锁)</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示加表级锁</span><br><span class=\"line\">SET AUTOCOMMIT=0;</span><br><span class=\"line\">LOCK TABLES t1 WRITE, t2 READ, ...;</span><br><span class=\"line\">[do something with tables t1 and here];</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-索引数据结构\"><a href=\"#2-索引数据结构\" class=\"headerlink\" title=\"2.索引数据结构\"></a>2.索引数据结构</h2><h3 id=\"B树和B-树\"><a href=\"#B树和B-树\" class=\"headerlink\" title=\"B树和B+树\"></a>B树和B+树</h3><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><ol>\n<li>多路搜索树,每个节点包含n个key，data和n+1个指针指向下一层的节点</li>\n</ol>\n<h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><ol>\n<li>多路搜索树，每个节点包含n个key和n个指向下一层个节点的指针和一个指向兄弟节点的指针</li>\n<li>非叶子节点不存储数据，叶子节点存储数据并包含一个指向兄弟节点的指针。</li>\n<li>每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O</li>\n</ol>\n<h4 id=\"B-树快的原因\"><a href=\"#B-树快的原因\" class=\"headerlink\" title=\"B+树快的原因\"></a>B+树快的原因</h4><ol>\n<li>多路搜索树，查询复杂度为logm(n)</li>\n<li>每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O</li>\n<li>每个非叶子节点只存储key而不存储实际数据，搜索变得稳定。</li>\n<li>每个节点有指向兄弟节点的指针，对于范围查找变得更快。</li>\n</ol>\n<h4 id=\"聚簇索引和非聚簇索引\"><a href=\"#聚簇索引和非聚簇索引\" class=\"headerlink\" title=\"聚簇索引和非聚簇索引\"></a>聚簇索引和非聚簇索引</h4><h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>逻辑结构和物理结构一致，叶子节点存储的就是数据</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>逻辑结构和物理结构不一致，叶子节点存储的不是直接的数据。如InnoDB的二级索引的叶子节点为主键值，MyISAM二级索引叶子节点指向的为数据物理存储地址的指针</p>\n<h2 id=\"3-索引分类和注意点\"><a href=\"#3-索引分类和注意点\" class=\"headerlink\" title=\"3.索引分类和注意点\"></a>3.索引分类和注意点</h2><h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><p>索引分类：主键索引，普通索引，唯一索引，全文索引，组合索引</p>\n<h3 id=\"使用索引注意点\"><a href=\"#使用索引注意点\" class=\"headerlink\" title=\"使用索引注意点\"></a>使用索引注意点</h3><ul>\n<li>索引字段默认值不要设置null，索引不会包含null值</li>\n<li>MySQL查询时只会使用一种索引</li>\n<li>有索引的列参与计算时，不会走此索引，尽量直接使用索引列而不要使索引列参与计算</li>\n<li>组合索引为最左匹配，如建立（a, b, c）索引时会同时建立（a）, (a, b), (a, b, c)</li>\n<li>只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！因为InnoDB的行锁是通过索引上的索引项来实现的。</li>\n<li>当查询的列为组合索引中的字段，则此二级索引不需要回表操作，直接返回数据。因为组合索引上保存了组合索引包含的字段信息。</li>\n</ul>\n<h2 id=\"4-事务\"><a href=\"#4-事务\" class=\"headerlink\" title=\"4.事务\"></a>4.事务</h2><h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><ol>\n<li>读未提交</li>\n<li>读已提交</li>\n<li>可重复读</li>\n<li>串行化</li>\n</ol>\n<h3 id=\"事务并发带来的问题\"><a href=\"#事务并发带来的问题\" class=\"headerlink\" title=\"事务并发带来的问题\"></a>事务并发带来的问题</h3><ol>\n<li>丢失修改（事务B的修改覆盖了未完成事务A的修改）</li>\n<li>读脏数据（事务B读取了未完成事务A的未提交更新）</li>\n<li>不可重复读</li>\n</ol>\n<ul>\n<li>事务A两次用相同的sql读取数据，其间事务B修改了数据</li>\n<li>事务A两次用相同的sql读取数据，其间事务B添加或删除了符合sql的数据（幻读）<br>标准的InnoDB的可重复读并未解决幻读的问题，幻读是InnoDB的MVCC解决的。</li>\n</ul>\n<h3 id=\"LBCC-Lock-Based-Concurrent-Controll，基于锁的并发控制，封锁协议\"><a href=\"#LBCC-Lock-Based-Concurrent-Controll，基于锁的并发控制，封锁协议\" class=\"headerlink\" title=\"LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)\"></a>LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)</h3><h4 id=\"一级封锁协议\"><a href=\"#一级封锁协议\" class=\"headerlink\" title=\"一级封锁协议\"></a>一级封锁协议</h4><p>写数据前加X锁，事务结束后释放</p>\n<h4 id=\"二级封锁协议\"><a href=\"#二级封锁协议\" class=\"headerlink\" title=\"二级封锁协议\"></a>二级封锁协议</h4><p>满足一级封锁协议，读数据前加S锁，读完释放</p>\n<h4 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h4><p>满足一级封锁协议，读数据前加S锁，事务结束后释放</p>\n<h3 id=\"MVCC-Multi-Version-Concurrent-Controller，多版本并发控制\"><a href=\"#MVCC-Multi-Version-Concurrent-Controller，多版本并发控制\" class=\"headerlink\" title=\"MVCC(Multi-Version Concurrent Controller，多版本并发控制)\"></a>MVCC(Multi-Version Concurrent Controller，多版本并发控制)</h3><h4 id=\"快照读和当前读\"><a href=\"#快照读和当前读\" class=\"headerlink\" title=\"快照读和当前读\"></a>快照读和当前读</h4><ul>\n<li><p>快照读：仅读取记录的可见版本，可能是历史版本。不会对返回的数据集加锁<br>简单的查询都属于快照读</p>\n</li>\n<li><p>当前读：读取记录的最新版本。并对返回的数据集一行一行得加锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table where ? lock in share mode; （加S锁）</span><br><span class=\"line\">select * from table where ? for update; （加X锁，下同）</span><br><span class=\"line\">insert, update, delete操作</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h4><p>当两个（或以上）Session以不同的顺序对同一(或若干)数据行加锁，则可能出现死锁。<br><img src=\"/2019/03/04/数据库面试要点/死锁1.jpg\"><br><img src=\"/2019/03/04/数据库面试要点/死锁2.jpg\"></p>\n<h4 id=\"InnoDB的MVCC实现机制\"><a href=\"#InnoDB的MVCC实现机制\" class=\"headerlink\" title=\"InnoDB的MVCC实现机制\"></a>InnoDB的MVCC实现机制</h4><h5 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h5><p>InnoDB的MVCC，通过在每行数据后面保存两个隐藏的列，创建版本号和删除版本号来实现。每开始一个新的事务，系统版本号就会递增1。MVCC只在RC（读已提交）和RR（可重复读）两个隔离级别工作，另外两个隔离界别与MVCC不兼容。</p>\n<h5 id=\"MVCC实现Repeatable-Read-（可重复读）的隔离级别\"><a href=\"#MVCC实现Repeatable-Read-（可重复读）的隔离级别\" class=\"headerlink\" title=\"MVCC实现Repeatable Read （可重复读）的隔离级别\"></a>MVCC实现Repeatable Read （可重复读）的隔离级别</h5><ol>\n<li>select：create_id &lt; current_id &lt; delete_id</li>\n<li>insert: create_id = current_id</li>\n<li>delete: delete_id = current_id</li>\n<li>update: insert + delete, 插入一条create_id = current_id的记录，将原记录delete_id = current_id</li>\n</ol>\n<p>InnoDB后台运行线程，删除delete_id &lt; current_id的记录，称为purge操作。</p>\n<h5 id=\"MVCC中RC和RR隔离级别的区别\"><a href=\"#MVCC中RC和RR隔离级别的区别\" class=\"headerlink\" title=\"MVCC中RC和RR隔离级别的区别\"></a>MVCC中RC和RR隔离级别的区别</h5><p>在RR隔离级别下，事务中的普通读取都是快照读，即别的事务修改的数据在此事务中读不到<br>在RC隔离级别下，事务中的读取总是当前读，即会产生不可重复读的问题</p>\n<h5 id=\"MVCC加锁细节\"><a href=\"#MVCC加锁细节\" class=\"headerlink\" title=\"MVCC加锁细节\"></a>MVCC加锁细节</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from t1 where key=10</span><br></pre></td></tr></table></figure>\n<p>RC（读已提交）隔离级别下</p>\n<ul>\n<li>如果key为主键索引，在主键索引上加x锁</li>\n<li>如果key为唯一索引，在唯一索引上加x锁</li>\n<li>如果key为二级非唯一索引，在所有对应的索引上加x锁</li>\n<li>如果key没有索引，则会对所有数据加X锁，但如果不符合查询条件，会马上释放X锁</li>\n</ul>\n<p>RR（可重复读）隔离级别下<br>为了不出现幻读，在第一条符合条件的数据和最后一条符合条件的数据两端加上GPA锁，不允许在此前后插入数据。</p>\n","site":{"data":{}},"excerpt":"<p>数据库基本概念，数据结构，常用引擎，索引注意点，事务并发问题和并发控制的实现，加锁机制等。<br>","more":"</p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><h3 id=\"三级模式\"><a href=\"#三级模式\" class=\"headerlink\" title=\"三级模式\"></a>三级模式</h3><ol>\n<li>外模式（数据库用户的数据视图）</li>\n<li>模式（全局数据视图）</li>\n<li>内模式（物理存储方式）</li>\n</ol>\n<h3 id=\"两级映像\"><a href=\"#两级映像\" class=\"headerlink\" title=\"两级映像\"></a>两级映像</h3><ol>\n<li>外模式/模式，保证逻辑独立性</li>\n<li>模式/内模式，保证物理独立性</li>\n</ol>\n<h3 id=\"三范式\"><a href=\"#三范式\" class=\"headerlink\" title=\"三范式\"></a>三范式</h3><ol>\n<li>每一列都是原子的，不可再分的</li>\n<li>保证第一范式，不存在部分依赖</li>\n<li>保证第二范式，不存在传递依赖</li>\n</ol>\n<h3 id=\"MySQL的数据库引擎\"><a href=\"#MySQL的数据库引擎\" class=\"headerlink\" title=\"MySQL的数据库引擎\"></a>MySQL的数据库引擎</h3><ol>\n<li>ISAM：读取快，不支持事务，外键</li>\n<li>MyISAM：基于ISAM，支持表级锁</li>\n<li>archive： 提供压缩功能，适合大数据量的历史数据，插入快，无索引，查询慢</li>\n<li>blackhole：用作日志记录</li>\n<li>heap：数据存在内存，每个表对应一个磁盘文件，表结构存在磁盘</li>\n<li>csv：基于普通文本，每个数据占一个文本行</li>\n<li>performance schame：用于收集数据库服务器的参数</li>\n<li>InnoDB：提供ACID事务（原子性，一致性，隔离性，持久性），多版本并发控制，支持索引，5.5之后的默认引擎。</li>\n</ol>\n<h3 id=\"死锁的四个必要条件\"><a href=\"#死锁的四个必要条件\" class=\"headerlink\" title=\"死锁的四个必要条件\"></a>死锁的四个必要条件</h3><ol>\n<li>互斥</li>\n<li>不可剥夺</li>\n<li>请求与保持</li>\n<li>环路等待</li>\n</ol>\n<h3 id=\"显示加锁\"><a href=\"#显示加锁\" class=\"headerlink\" title=\"显示加锁\"></a>显示加锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 显示加行级锁</span><br><span class=\"line\">select ... lock in share mode(加S锁)</span><br><span class=\"line\">select ... for update(加X锁)</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示加表级锁</span><br><span class=\"line\">SET AUTOCOMMIT=0;</span><br><span class=\"line\">LOCK TABLES t1 WRITE, t2 READ, ...;</span><br><span class=\"line\">[do something with tables t1 and here];</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-索引数据结构\"><a href=\"#2-索引数据结构\" class=\"headerlink\" title=\"2.索引数据结构\"></a>2.索引数据结构</h2><h3 id=\"B树和B-树\"><a href=\"#B树和B-树\" class=\"headerlink\" title=\"B树和B+树\"></a>B树和B+树</h3><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><ol>\n<li>多路搜索树,每个节点包含n个key，data和n+1个指针指向下一层的节点</li>\n</ol>\n<h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><ol>\n<li>多路搜索树，每个节点包含n个key和n个指向下一层个节点的指针和一个指向兄弟节点的指针</li>\n<li>非叶子节点不存储数据，叶子节点存储数据并包含一个指向兄弟节点的指针。</li>\n<li>每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O</li>\n</ol>\n<h4 id=\"B-树快的原因\"><a href=\"#B-树快的原因\" class=\"headerlink\" title=\"B+树快的原因\"></a>B+树快的原因</h4><ol>\n<li>多路搜索树，查询复杂度为logm(n)</li>\n<li>每个节点大小为一个物理存储页的大小，linux下一般为4k，减少了磁盘I/O</li>\n<li>每个非叶子节点只存储key而不存储实际数据，搜索变得稳定。</li>\n<li>每个节点有指向兄弟节点的指针，对于范围查找变得更快。</li>\n</ol>\n<h4 id=\"聚簇索引和非聚簇索引\"><a href=\"#聚簇索引和非聚簇索引\" class=\"headerlink\" title=\"聚簇索引和非聚簇索引\"></a>聚簇索引和非聚簇索引</h4><h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>逻辑结构和物理结构一致，叶子节点存储的就是数据</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>逻辑结构和物理结构不一致，叶子节点存储的不是直接的数据。如InnoDB的二级索引的叶子节点为主键值，MyISAM二级索引叶子节点指向的为数据物理存储地址的指针</p>\n<h2 id=\"3-索引分类和注意点\"><a href=\"#3-索引分类和注意点\" class=\"headerlink\" title=\"3.索引分类和注意点\"></a>3.索引分类和注意点</h2><h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><p>索引分类：主键索引，普通索引，唯一索引，全文索引，组合索引</p>\n<h3 id=\"使用索引注意点\"><a href=\"#使用索引注意点\" class=\"headerlink\" title=\"使用索引注意点\"></a>使用索引注意点</h3><ul>\n<li>索引字段默认值不要设置null，索引不会包含null值</li>\n<li>MySQL查询时只会使用一种索引</li>\n<li>有索引的列参与计算时，不会走此索引，尽量直接使用索引列而不要使索引列参与计算</li>\n<li>组合索引为最左匹配，如建立（a, b, c）索引时会同时建立（a）, (a, b), (a, b, c)</li>\n<li>只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！因为InnoDB的行锁是通过索引上的索引项来实现的。</li>\n<li>当查询的列为组合索引中的字段，则此二级索引不需要回表操作，直接返回数据。因为组合索引上保存了组合索引包含的字段信息。</li>\n</ul>\n<h2 id=\"4-事务\"><a href=\"#4-事务\" class=\"headerlink\" title=\"4.事务\"></a>4.事务</h2><h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><ol>\n<li>读未提交</li>\n<li>读已提交</li>\n<li>可重复读</li>\n<li>串行化</li>\n</ol>\n<h3 id=\"事务并发带来的问题\"><a href=\"#事务并发带来的问题\" class=\"headerlink\" title=\"事务并发带来的问题\"></a>事务并发带来的问题</h3><ol>\n<li>丢失修改（事务B的修改覆盖了未完成事务A的修改）</li>\n<li>读脏数据（事务B读取了未完成事务A的未提交更新）</li>\n<li>不可重复读</li>\n</ol>\n<ul>\n<li>事务A两次用相同的sql读取数据，其间事务B修改了数据</li>\n<li>事务A两次用相同的sql读取数据，其间事务B添加或删除了符合sql的数据（幻读）<br>标准的InnoDB的可重复读并未解决幻读的问题，幻读是InnoDB的MVCC解决的。</li>\n</ul>\n<h3 id=\"LBCC-Lock-Based-Concurrent-Controll，基于锁的并发控制，封锁协议\"><a href=\"#LBCC-Lock-Based-Concurrent-Controll，基于锁的并发控制，封锁协议\" class=\"headerlink\" title=\"LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)\"></a>LBCC(Lock-Based Concurrent Controll，基于锁的并发控制，封锁协议)</h3><h4 id=\"一级封锁协议\"><a href=\"#一级封锁协议\" class=\"headerlink\" title=\"一级封锁协议\"></a>一级封锁协议</h4><p>写数据前加X锁，事务结束后释放</p>\n<h4 id=\"二级封锁协议\"><a href=\"#二级封锁协议\" class=\"headerlink\" title=\"二级封锁协议\"></a>二级封锁协议</h4><p>满足一级封锁协议，读数据前加S锁，读完释放</p>\n<h4 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h4><p>满足一级封锁协议，读数据前加S锁，事务结束后释放</p>\n<h3 id=\"MVCC-Multi-Version-Concurrent-Controller，多版本并发控制\"><a href=\"#MVCC-Multi-Version-Concurrent-Controller，多版本并发控制\" class=\"headerlink\" title=\"MVCC(Multi-Version Concurrent Controller，多版本并发控制)\"></a>MVCC(Multi-Version Concurrent Controller，多版本并发控制)</h3><h4 id=\"快照读和当前读\"><a href=\"#快照读和当前读\" class=\"headerlink\" title=\"快照读和当前读\"></a>快照读和当前读</h4><ul>\n<li><p>快照读：仅读取记录的可见版本，可能是历史版本。不会对返回的数据集加锁<br>简单的查询都属于快照读</p>\n</li>\n<li><p>当前读：读取记录的最新版本。并对返回的数据集一行一行得加锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table where ? lock in share mode; （加S锁）</span><br><span class=\"line\">select * from table where ? for update; （加X锁，下同）</span><br><span class=\"line\">insert, update, delete操作</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h4><p>当两个（或以上）Session以不同的顺序对同一(或若干)数据行加锁，则可能出现死锁。<br><img src=\"/2019/03/04/数据库面试要点/死锁1.jpg\"><br><img src=\"/2019/03/04/数据库面试要点/死锁2.jpg\"></p>\n<h4 id=\"InnoDB的MVCC实现机制\"><a href=\"#InnoDB的MVCC实现机制\" class=\"headerlink\" title=\"InnoDB的MVCC实现机制\"></a>InnoDB的MVCC实现机制</h4><h5 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h5><p>InnoDB的MVCC，通过在每行数据后面保存两个隐藏的列，创建版本号和删除版本号来实现。每开始一个新的事务，系统版本号就会递增1。MVCC只在RC（读已提交）和RR（可重复读）两个隔离级别工作，另外两个隔离界别与MVCC不兼容。</p>\n<h5 id=\"MVCC实现Repeatable-Read-（可重复读）的隔离级别\"><a href=\"#MVCC实现Repeatable-Read-（可重复读）的隔离级别\" class=\"headerlink\" title=\"MVCC实现Repeatable Read （可重复读）的隔离级别\"></a>MVCC实现Repeatable Read （可重复读）的隔离级别</h5><ol>\n<li>select：create_id &lt; current_id &lt; delete_id</li>\n<li>insert: create_id = current_id</li>\n<li>delete: delete_id = current_id</li>\n<li>update: insert + delete, 插入一条create_id = current_id的记录，将原记录delete_id = current_id</li>\n</ol>\n<p>InnoDB后台运行线程，删除delete_id &lt; current_id的记录，称为purge操作。</p>\n<h5 id=\"MVCC中RC和RR隔离级别的区别\"><a href=\"#MVCC中RC和RR隔离级别的区别\" class=\"headerlink\" title=\"MVCC中RC和RR隔离级别的区别\"></a>MVCC中RC和RR隔离级别的区别</h5><p>在RR隔离级别下，事务中的普通读取都是快照读，即别的事务修改的数据在此事务中读不到<br>在RC隔离级别下，事务中的读取总是当前读，即会产生不可重复读的问题</p>\n<h5 id=\"MVCC加锁细节\"><a href=\"#MVCC加锁细节\" class=\"headerlink\" title=\"MVCC加锁细节\"></a>MVCC加锁细节</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from t1 where key=10</span><br></pre></td></tr></table></figure>\n<p>RC（读已提交）隔离级别下</p>\n<ul>\n<li>如果key为主键索引，在主键索引上加x锁</li>\n<li>如果key为唯一索引，在唯一索引上加x锁</li>\n<li>如果key为二级非唯一索引，在所有对应的索引上加x锁</li>\n<li>如果key没有索引，则会对所有数据加X锁，但如果不符合查询条件，会马上释放X锁</li>\n</ul>\n<p>RR（可重复读）隔离级别下<br>为了不出现幻读，在第一条符合条件的数据和最后一条符合条件的数据两端加上GPA锁，不允许在此前后插入数据。</p>"},{"title":"docker-compose的使用","date":"2019-07-10T08:32:18.000Z","_content":"docker-compose的使用\n<!-- more -->\n## compose简介\n在日常工作中，一个项目往往有多个服务，每个服务有多个实例。\ndocker-compose可以对docker容器集群快速编排，定义和运行多个docker容器。\ndocker-compose通过一个docker-compose.yml模板文件来定义一组相关联的应用容器为一个项目 （project）\n\n##  \n","source":"_posts/2019/07/docker-compose的使用.md","raw":"---\ntitle: docker-compose的使用\ndate: 2019-07-10 16:32:18\ncategories:\n  - docker\ntags:\n  - docker\n---\ndocker-compose的使用\n<!-- more -->\n## compose简介\n在日常工作中，一个项目往往有多个服务，每个服务有多个实例。\ndocker-compose可以对docker容器集群快速编排，定义和运行多个docker容器。\ndocker-compose通过一个docker-compose.yml模板文件来定义一组相关联的应用容器为一个项目 （project）\n\n##  \n","slug":"docker-compose的使用","published":1,"updated":"2019-07-15T02:57:38.347Z","_id":"cjy3so9mu000uoungtn5t27is","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker-compose的使用<br><a id=\"more\"></a></p>\n<h2 id=\"compose简介\"><a href=\"#compose简介\" class=\"headerlink\" title=\"compose简介\"></a>compose简介</h2><p>在日常工作中，一个项目往往有多个服务，每个服务有多个实例。<br>docker-compose可以对docker容器集群快速编排，定义和运行多个docker容器。<br>docker-compose通过一个docker-compose.yml模板文件来定义一组相关联的应用容器为一个项目 （project）</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2>","site":{"data":{}},"excerpt":"<p>docker-compose的使用<br>","more":"</p>\n<h2 id=\"compose简介\"><a href=\"#compose简介\" class=\"headerlink\" title=\"compose简介\"></a>compose简介</h2><p>在日常工作中，一个项目往往有多个服务，每个服务有多个实例。<br>docker-compose可以对docker容器集群快速编排，定义和运行多个docker容器。<br>docker-compose通过一个docker-compose.yml模板文件来定义一组相关联的应用容器为一个项目 （project）</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2>"},{"title":"部署策略、高可用、高可靠等面试要点","date":"2019-03-04T07:33:04.000Z","_content":"多种部署策略，实现高可用、高可靠的方案。\n<!-- more -->\n## 应用部署策略\n### 1. dns轮询\n{% asset_img dns轮询.png %}\n**架构：**\n域名注册时对同一域名添加多条A记录,实现DNS轮询,DNS服务器将解析请求按照记录的顺序,随机分配到不同的IP上,实现简单的负载均衡 \n\n**优点：**\n1）零成本：在DNS-server上多配几个ip即可，功能也不收费\n2）部署简单：多部署几个web-server即可，原系统架构不需要做任何改造\n3）负载均衡：变成了多机，但负载基本是均衡的\n\n**缺点：**\n1）非高可用：DNS-server只负责域名解析ip，这个ip对应的服务是否可用，DNS-server是不保证的，假设有一个web-server挂了，部分服务会受到影响\n2）扩容非实时：DNS解析有一个生效周期\n3）暴露了太多的外网ip\n\n### 2. nginx反向代理\n**架构：**\nnginx将请求转发到各个tomcat服务器上\n**优点：**\n1）DNS-server不需要动\n2）负载均衡：通过nginx来保证\n3）只暴露一个外网ip，nginx->tomcat之间使用内网访问\n4）扩容实时：nginx内部可控，随时增加web-server随时实时扩容\n5）能够保证站点层的可用性：任何一台tomcat挂了，nginx可以将流量迁移到其他tomcat\n\n**缺点：**\n1）时延增加+架构更复杂了：中间多加了一个反向代理层\n2）反向代理层成了单点，非高可用：tomcat挂了不影响服务，nginx挂了怎么办？\n\n### 3. keepalived  \n{% asset_img keepalived架构.jpg %}\n**架构：**\n1）做两台nginx组成一个集群，分别部署上keepalived，设置成相同的虚IP，保证nginx的高可用\n2）当一台nginx挂了，keepalived能够探测到，并将流量自动迁移到另一台nginx上，整个过程对调用方透明\n**优点：**\n1）解决了高可靠的问题\n\n**缺点：**\n1）资源利用率只有50%\n2）nginx仍然是接入单点，吞吐量上限为单个nginx性能上限\n\n### 4. lvs/f5 \nlvs实施在操作系统层面；f5实施在硬件层面；\n{% asset_img lvs-f5架构.jpg %}\n**架构：**\n1）通过lvs来扩展多个nginx\n2）通过keepalived+VIP的方案可以保证可用性\n\n不管是使用lvs还是f5，这些都是纵向扩展的方案，根本上，lvs/f5还是会有性能上限，假设每秒能处理10w的请求，一天也只能处理80亿的请求（10w秒吞吐量 * 8w秒），那万一系统的日PV超过80亿怎么办呢？（好吧，没几个公司要考虑这个问题）\n\n### 5. 横向拓展方案(DNS轮询)\n**架构：**\n1）通过DNS轮询来线性扩展入口lvs层的性能\n2）通过keepalived来保证高可用\n3）通过lvs来扩展多个nginx\n4）通过nginx来做负载均衡，业务七层路由\n\n## 中间件高可用、高可靠部署的方案\n### 高可靠方案(故障切换, 主从方式)\n- 共享文件系统, 数据库\n- 主从同步\n\n### 高可用方案(提高系统吞吐量)\n- 将数据分散到多个节点, 节点间通过转发请求实现每个节点都能提供集群的数据\n\n## 负载均衡\n### 一致性hash\n{% asset_img 一致性hash.png %}\n用户请求时,hash(user_id) 找到hash环顺时针最近的一个服务器请求\n\n***问题***\n负载分布不均匀时,增加虚拟节点或设计hash(ip)尽可能均匀的hash算法\n\n优点:\n当服务器集群增加或下线节点时,不会导致大规模用户负载变掉,只会使部分用户的负载变掉\n","source":"_posts/2019/03/部署策略、高可用、高可靠等面试要点.md","raw":"---\ntitle: 部署策略、高可用、高可靠等面试要点\ndate: 2019-03-04 15:33:04\ncategories:\n  - 运维\ntags:\n  - 面试\n---\n多种部署策略，实现高可用、高可靠的方案。\n<!-- more -->\n## 应用部署策略\n### 1. dns轮询\n{% asset_img dns轮询.png %}\n**架构：**\n域名注册时对同一域名添加多条A记录,实现DNS轮询,DNS服务器将解析请求按照记录的顺序,随机分配到不同的IP上,实现简单的负载均衡 \n\n**优点：**\n1）零成本：在DNS-server上多配几个ip即可，功能也不收费\n2）部署简单：多部署几个web-server即可，原系统架构不需要做任何改造\n3）负载均衡：变成了多机，但负载基本是均衡的\n\n**缺点：**\n1）非高可用：DNS-server只负责域名解析ip，这个ip对应的服务是否可用，DNS-server是不保证的，假设有一个web-server挂了，部分服务会受到影响\n2）扩容非实时：DNS解析有一个生效周期\n3）暴露了太多的外网ip\n\n### 2. nginx反向代理\n**架构：**\nnginx将请求转发到各个tomcat服务器上\n**优点：**\n1）DNS-server不需要动\n2）负载均衡：通过nginx来保证\n3）只暴露一个外网ip，nginx->tomcat之间使用内网访问\n4）扩容实时：nginx内部可控，随时增加web-server随时实时扩容\n5）能够保证站点层的可用性：任何一台tomcat挂了，nginx可以将流量迁移到其他tomcat\n\n**缺点：**\n1）时延增加+架构更复杂了：中间多加了一个反向代理层\n2）反向代理层成了单点，非高可用：tomcat挂了不影响服务，nginx挂了怎么办？\n\n### 3. keepalived  \n{% asset_img keepalived架构.jpg %}\n**架构：**\n1）做两台nginx组成一个集群，分别部署上keepalived，设置成相同的虚IP，保证nginx的高可用\n2）当一台nginx挂了，keepalived能够探测到，并将流量自动迁移到另一台nginx上，整个过程对调用方透明\n**优点：**\n1）解决了高可靠的问题\n\n**缺点：**\n1）资源利用率只有50%\n2）nginx仍然是接入单点，吞吐量上限为单个nginx性能上限\n\n### 4. lvs/f5 \nlvs实施在操作系统层面；f5实施在硬件层面；\n{% asset_img lvs-f5架构.jpg %}\n**架构：**\n1）通过lvs来扩展多个nginx\n2）通过keepalived+VIP的方案可以保证可用性\n\n不管是使用lvs还是f5，这些都是纵向扩展的方案，根本上，lvs/f5还是会有性能上限，假设每秒能处理10w的请求，一天也只能处理80亿的请求（10w秒吞吐量 * 8w秒），那万一系统的日PV超过80亿怎么办呢？（好吧，没几个公司要考虑这个问题）\n\n### 5. 横向拓展方案(DNS轮询)\n**架构：**\n1）通过DNS轮询来线性扩展入口lvs层的性能\n2）通过keepalived来保证高可用\n3）通过lvs来扩展多个nginx\n4）通过nginx来做负载均衡，业务七层路由\n\n## 中间件高可用、高可靠部署的方案\n### 高可靠方案(故障切换, 主从方式)\n- 共享文件系统, 数据库\n- 主从同步\n\n### 高可用方案(提高系统吞吐量)\n- 将数据分散到多个节点, 节点间通过转发请求实现每个节点都能提供集群的数据\n\n## 负载均衡\n### 一致性hash\n{% asset_img 一致性hash.png %}\n用户请求时,hash(user_id) 找到hash环顺时针最近的一个服务器请求\n\n***问题***\n负载分布不均匀时,增加虚拟节点或设计hash(ip)尽可能均匀的hash算法\n\n优点:\n当服务器集群增加或下线节点时,不会导致大规模用户负载变掉,只会使部分用户的负载变掉\n","slug":"部署策略、高可用、高可靠等面试要点","published":1,"updated":"2019-05-14T16:39:27.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mv000xoungxtcisc0l","content":"<p>多种部署策略，实现高可用、高可靠的方案。<br><a id=\"more\"></a></p>\n<h2 id=\"应用部署策略\"><a href=\"#应用部署策略\" class=\"headerlink\" title=\"应用部署策略\"></a>应用部署策略</h2><h3 id=\"1-dns轮询\"><a href=\"#1-dns轮询\" class=\"headerlink\" title=\"1. dns轮询\"></a>1. dns轮询</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/dns轮询.png\">\n<p><strong>架构：</strong><br>域名注册时对同一域名添加多条A记录,实现DNS轮询,DNS服务器将解析请求按照记录的顺序,随机分配到不同的IP上,实现简单的负载均衡 </p>\n<p><strong>优点：</strong><br>1）零成本：在DNS-server上多配几个ip即可，功能也不收费<br>2）部署简单：多部署几个web-server即可，原系统架构不需要做任何改造<br>3）负载均衡：变成了多机，但负载基本是均衡的</p>\n<p><strong>缺点：</strong><br>1）非高可用：DNS-server只负责域名解析ip，这个ip对应的服务是否可用，DNS-server是不保证的，假设有一个web-server挂了，部分服务会受到影响<br>2）扩容非实时：DNS解析有一个生效周期<br>3）暴露了太多的外网ip</p>\n<h3 id=\"2-nginx反向代理\"><a href=\"#2-nginx反向代理\" class=\"headerlink\" title=\"2. nginx反向代理\"></a>2. nginx反向代理</h3><p><strong>架构：</strong><br>nginx将请求转发到各个tomcat服务器上<br><strong>优点：</strong><br>1）DNS-server不需要动<br>2）负载均衡：通过nginx来保证<br>3）只暴露一个外网ip，nginx-&gt;tomcat之间使用内网访问<br>4）扩容实时：nginx内部可控，随时增加web-server随时实时扩容<br>5）能够保证站点层的可用性：任何一台tomcat挂了，nginx可以将流量迁移到其他tomcat</p>\n<p><strong>缺点：</strong><br>1）时延增加+架构更复杂了：中间多加了一个反向代理层<br>2）反向代理层成了单点，非高可用：tomcat挂了不影响服务，nginx挂了怎么办？</p>\n<h3 id=\"3-keepalived\"><a href=\"#3-keepalived\" class=\"headerlink\" title=\"3. keepalived\"></a>3. keepalived</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg\">\n<p><strong>架构：</strong><br>1）做两台nginx组成一个集群，分别部署上keepalived，设置成相同的虚IP，保证nginx的高可用<br>2）当一台nginx挂了，keepalived能够探测到，并将流量自动迁移到另一台nginx上，整个过程对调用方透明<br><strong>优点：</strong><br>1）解决了高可靠的问题</p>\n<p><strong>缺点：</strong><br>1）资源利用率只有50%<br>2）nginx仍然是接入单点，吞吐量上限为单个nginx性能上限</p>\n<h3 id=\"4-lvs-f5\"><a href=\"#4-lvs-f5\" class=\"headerlink\" title=\"4. lvs/f5\"></a>4. lvs/f5</h3><p>lvs实施在操作系统层面；f5实施在硬件层面；<br><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg\"><br><strong>架构：</strong><br>1）通过lvs来扩展多个nginx<br>2）通过keepalived+VIP的方案可以保证可用性</p>\n<p>不管是使用lvs还是f5，这些都是纵向扩展的方案，根本上，lvs/f5还是会有性能上限，假设每秒能处理10w的请求，一天也只能处理80亿的请求（10w秒吞吐量 * 8w秒），那万一系统的日PV超过80亿怎么办呢？（好吧，没几个公司要考虑这个问题）</p>\n<h3 id=\"5-横向拓展方案-DNS轮询\"><a href=\"#5-横向拓展方案-DNS轮询\" class=\"headerlink\" title=\"5. 横向拓展方案(DNS轮询)\"></a>5. 横向拓展方案(DNS轮询)</h3><p><strong>架构：</strong><br>1）通过DNS轮询来线性扩展入口lvs层的性能<br>2）通过keepalived来保证高可用<br>3）通过lvs来扩展多个nginx<br>4）通过nginx来做负载均衡，业务七层路由</p>\n<h2 id=\"中间件高可用、高可靠部署的方案\"><a href=\"#中间件高可用、高可靠部署的方案\" class=\"headerlink\" title=\"中间件高可用、高可靠部署的方案\"></a>中间件高可用、高可靠部署的方案</h2><h3 id=\"高可靠方案-故障切换-主从方式\"><a href=\"#高可靠方案-故障切换-主从方式\" class=\"headerlink\" title=\"高可靠方案(故障切换, 主从方式)\"></a>高可靠方案(故障切换, 主从方式)</h3><ul>\n<li>共享文件系统, 数据库</li>\n<li>主从同步</li>\n</ul>\n<h3 id=\"高可用方案-提高系统吞吐量\"><a href=\"#高可用方案-提高系统吞吐量\" class=\"headerlink\" title=\"高可用方案(提高系统吞吐量)\"></a>高可用方案(提高系统吞吐量)</h3><ul>\n<li>将数据分散到多个节点, 节点间通过转发请求实现每个节点都能提供集群的数据</li>\n</ul>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/一致性hash.png\">\n<p>用户请求时,hash(user_id) 找到hash环顺时针最近的一个服务器请求</p>\n<p><strong><em>问题</em></strong><br>负载分布不均匀时,增加虚拟节点或设计hash(ip)尽可能均匀的hash算法</p>\n<p>优点:<br>当服务器集群增加或下线节点时,不会导致大规模用户负载变掉,只会使部分用户的负载变掉</p>\n","site":{"data":{}},"excerpt":"<p>多种部署策略，实现高可用、高可靠的方案。<br>","more":"</p>\n<h2 id=\"应用部署策略\"><a href=\"#应用部署策略\" class=\"headerlink\" title=\"应用部署策略\"></a>应用部署策略</h2><h3 id=\"1-dns轮询\"><a href=\"#1-dns轮询\" class=\"headerlink\" title=\"1. dns轮询\"></a>1. dns轮询</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/dns轮询.png\">\n<p><strong>架构：</strong><br>域名注册时对同一域名添加多条A记录,实现DNS轮询,DNS服务器将解析请求按照记录的顺序,随机分配到不同的IP上,实现简单的负载均衡 </p>\n<p><strong>优点：</strong><br>1）零成本：在DNS-server上多配几个ip即可，功能也不收费<br>2）部署简单：多部署几个web-server即可，原系统架构不需要做任何改造<br>3）负载均衡：变成了多机，但负载基本是均衡的</p>\n<p><strong>缺点：</strong><br>1）非高可用：DNS-server只负责域名解析ip，这个ip对应的服务是否可用，DNS-server是不保证的，假设有一个web-server挂了，部分服务会受到影响<br>2）扩容非实时：DNS解析有一个生效周期<br>3）暴露了太多的外网ip</p>\n<h3 id=\"2-nginx反向代理\"><a href=\"#2-nginx反向代理\" class=\"headerlink\" title=\"2. nginx反向代理\"></a>2. nginx反向代理</h3><p><strong>架构：</strong><br>nginx将请求转发到各个tomcat服务器上<br><strong>优点：</strong><br>1）DNS-server不需要动<br>2）负载均衡：通过nginx来保证<br>3）只暴露一个外网ip，nginx-&gt;tomcat之间使用内网访问<br>4）扩容实时：nginx内部可控，随时增加web-server随时实时扩容<br>5）能够保证站点层的可用性：任何一台tomcat挂了，nginx可以将流量迁移到其他tomcat</p>\n<p><strong>缺点：</strong><br>1）时延增加+架构更复杂了：中间多加了一个反向代理层<br>2）反向代理层成了单点，非高可用：tomcat挂了不影响服务，nginx挂了怎么办？</p>\n<h3 id=\"3-keepalived\"><a href=\"#3-keepalived\" class=\"headerlink\" title=\"3. keepalived\"></a>3. keepalived</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg\">\n<p><strong>架构：</strong><br>1）做两台nginx组成一个集群，分别部署上keepalived，设置成相同的虚IP，保证nginx的高可用<br>2）当一台nginx挂了，keepalived能够探测到，并将流量自动迁移到另一台nginx上，整个过程对调用方透明<br><strong>优点：</strong><br>1）解决了高可靠的问题</p>\n<p><strong>缺点：</strong><br>1）资源利用率只有50%<br>2）nginx仍然是接入单点，吞吐量上限为单个nginx性能上限</p>\n<h3 id=\"4-lvs-f5\"><a href=\"#4-lvs-f5\" class=\"headerlink\" title=\"4. lvs/f5\"></a>4. lvs/f5</h3><p>lvs实施在操作系统层面；f5实施在硬件层面；<br><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg\"><br><strong>架构：</strong><br>1）通过lvs来扩展多个nginx<br>2）通过keepalived+VIP的方案可以保证可用性</p>\n<p>不管是使用lvs还是f5，这些都是纵向扩展的方案，根本上，lvs/f5还是会有性能上限，假设每秒能处理10w的请求，一天也只能处理80亿的请求（10w秒吞吐量 * 8w秒），那万一系统的日PV超过80亿怎么办呢？（好吧，没几个公司要考虑这个问题）</p>\n<h3 id=\"5-横向拓展方案-DNS轮询\"><a href=\"#5-横向拓展方案-DNS轮询\" class=\"headerlink\" title=\"5. 横向拓展方案(DNS轮询)\"></a>5. 横向拓展方案(DNS轮询)</h3><p><strong>架构：</strong><br>1）通过DNS轮询来线性扩展入口lvs层的性能<br>2）通过keepalived来保证高可用<br>3）通过lvs来扩展多个nginx<br>4）通过nginx来做负载均衡，业务七层路由</p>\n<h2 id=\"中间件高可用、高可靠部署的方案\"><a href=\"#中间件高可用、高可靠部署的方案\" class=\"headerlink\" title=\"中间件高可用、高可靠部署的方案\"></a>中间件高可用、高可靠部署的方案</h2><h3 id=\"高可靠方案-故障切换-主从方式\"><a href=\"#高可靠方案-故障切换-主从方式\" class=\"headerlink\" title=\"高可靠方案(故障切换, 主从方式)\"></a>高可靠方案(故障切换, 主从方式)</h3><ul>\n<li>共享文件系统, 数据库</li>\n<li>主从同步</li>\n</ul>\n<h3 id=\"高可用方案-提高系统吞吐量\"><a href=\"#高可用方案-提高系统吞吐量\" class=\"headerlink\" title=\"高可用方案(提高系统吞吐量)\"></a>高可用方案(提高系统吞吐量)</h3><ul>\n<li>将数据分散到多个节点, 节点间通过转发请求实现每个节点都能提供集群的数据</li>\n</ul>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><img src=\"/2019/03/04/部署策略、高可用、高可靠等面试要点/一致性hash.png\">\n<p>用户请求时,hash(user_id) 找到hash环顺时针最近的一个服务器请求</p>\n<p><strong><em>问题</em></strong><br>负载分布不均匀时,增加虚拟节点或设计hash(ip)尽可能均匀的hash算法</p>\n<p>优点:<br>当服务器集群增加或下线节点时,不会导致大规模用户负载变掉,只会使部分用户的负载变掉</p>"},{"title":"docker-hub与私有docker-registry","date":"2019-07-10T07:39:33.000Z","_content":"docker hub 使用与私有docker registry搭建。\n<!-- more -->\n## 私有docker registry使用\n```\n// 使用docker运行一个docker registry\n$ docker run --name registry -d -p 5000:5000 --restart=always -v /opt/data/registry:/var/lib/registry registry\n\n// 向私有仓库push一个镜像\n$ docker push <imageName>\n\n// 查看私有仓库中的镜像\n127.0.0.1:5000/v2/_catalog\n\n// 从私有仓库拉取镜像\n$ docker pull 127.0.0.1:5000/<imageName>\n```\n\n在/etc/docker/daemon.json添加（注意是修改普通docker服务器而不是docker-registry服务器上的文件）, 来允许其他主机推送docker镜像到本机\n```\n{\n\t\"insecure-registries\": [\n\t\t\"registryIp:port\"\n\t]\n}\n```\n\n{% asset_img sample.png %}\n","source":"_posts/2019/07/docker-hub与私有docker-registry.md","raw":"---\ntitle: docker-hub与私有docker-registry\ndate: 2019-07-10 15:39:33\ncategories:\n  - docker\ntags:\n  - docker\n---\ndocker hub 使用与私有docker registry搭建。\n<!-- more -->\n## 私有docker registry使用\n```\n// 使用docker运行一个docker registry\n$ docker run --name registry -d -p 5000:5000 --restart=always -v /opt/data/registry:/var/lib/registry registry\n\n// 向私有仓库push一个镜像\n$ docker push <imageName>\n\n// 查看私有仓库中的镜像\n127.0.0.1:5000/v2/_catalog\n\n// 从私有仓库拉取镜像\n$ docker pull 127.0.0.1:5000/<imageName>\n```\n\n在/etc/docker/daemon.json添加（注意是修改普通docker服务器而不是docker-registry服务器上的文件）, 来允许其他主机推送docker镜像到本机\n```\n{\n\t\"insecure-registries\": [\n\t\t\"registryIp:port\"\n\t]\n}\n```\n\n{% asset_img sample.png %}\n","slug":"docker-hub与私有docker-registry","published":1,"updated":"2019-07-15T02:58:54.317Z","_id":"cjy3so9mw000zoungttojhrb9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker hub 使用与私有docker registry搭建。<br><a id=\"more\"></a></p>\n<h2 id=\"私有docker-registry使用\"><a href=\"#私有docker-registry使用\" class=\"headerlink\" title=\"私有docker registry使用\"></a>私有docker registry使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用docker运行一个docker registry</span><br><span class=\"line\">$ docker run --name registry -d -p 5000:5000 --restart=always -v /opt/data/registry:/var/lib/registry registry</span><br><span class=\"line\"></span><br><span class=\"line\">// 向私有仓库push一个镜像</span><br><span class=\"line\">$ docker push &lt;imageName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看私有仓库中的镜像</span><br><span class=\"line\">127.0.0.1:5000/v2/_catalog</span><br><span class=\"line\"></span><br><span class=\"line\">// 从私有仓库拉取镜像</span><br><span class=\"line\">$ docker pull 127.0.0.1:5000/&lt;imageName&gt;</span><br></pre></td></tr></table></figure>\n<p>在/etc/docker/daemon.json添加（注意是修改普通docker服务器而不是docker-registry服务器上的文件）, 来允许其他主机推送docker镜像到本机<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;insecure-registries&quot;: [</span><br><span class=\"line\">\t\t&quot;registryIp:port&quot;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n\n","site":{"data":{}},"excerpt":"<p>docker hub 使用与私有docker registry搭建。<br>","more":"</p>\n<h2 id=\"私有docker-registry使用\"><a href=\"#私有docker-registry使用\" class=\"headerlink\" title=\"私有docker registry使用\"></a>私有docker registry使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用docker运行一个docker registry</span><br><span class=\"line\">$ docker run --name registry -d -p 5000:5000 --restart=always -v /opt/data/registry:/var/lib/registry registry</span><br><span class=\"line\"></span><br><span class=\"line\">// 向私有仓库push一个镜像</span><br><span class=\"line\">$ docker push &lt;imageName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看私有仓库中的镜像</span><br><span class=\"line\">127.0.0.1:5000/v2/_catalog</span><br><span class=\"line\"></span><br><span class=\"line\">// 从私有仓库拉取镜像</span><br><span class=\"line\">$ docker pull 127.0.0.1:5000/&lt;imageName&gt;</span><br></pre></td></tr></table></figure>\n<p>在/etc/docker/daemon.json添加（注意是修改普通docker服务器而不是docker-registry服务器上的文件）, 来允许其他主机推送docker镜像到本机<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;insecure-registries&quot;: [</span><br><span class=\"line\">\t\t&quot;registryIp:port&quot;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"多线程并发面试要点","date":"2019-03-04T07:48:23.000Z","_content":"摘要...\n{% asset_img sample.png %}\n<!-- more -->\n## 1.基本概念\n### 三个概念\n1. 原子性\n2. 可见性\n3. 有序性（保证单线程下运行结果一致）\n\n### volatile\n内够保证可见性，但无法保证原子性。\n\n问题：\n每个cpu都有自己的高速缓存（L1，L2，L3（共享的））\n所以每个线程都有自己的工作内存，操作系统有主内存\n当一个线程在自己的工作内存中修改了某个值，并不会更新主存的值\n\n解决：\n缓存一致性协议，当一个线程在自己的工作内存中修改了某个值，强制更新主存，并将其状态在其他线程中设置为失效态。其他线程读取此值时由于是失效态，将会从主存中读取。\n\n### java线程争抢资源的几种方法\n1. synchronized\n2. Lock接口\n3. LockSupports.park/unpark\n4. CAS操作\n\n### 线程与进程的区别\n1. 进程是程序在特定数据集上的一次运行过程。是资源分配的基本单位。\n2. 线程是CPU调度的最小单位。同一进程下的多个线程共享资源，但每个线程都有自己的线程栈，用来存放栈帧。\n\n### 线程池的核心参数\n1. 核心线程数\n2. 最大线程数\n3. 超出核心线程数的空闲线程存活时间\n4. 时间单位\n5. 工作队列\n6. 线程工厂\n7. 拒绝执行策略\n\n***注意事项***\n仅当当前任务超过工作队列的最大上限时，线程池才会创建新的线程去工作（小于最大线程数时），所以如果是无界队列，则线程池的线程将永远不会增加。\n\n### 创建线程的三种方法\n1. 继承Thread\n2. 实现Runnable\n3. 实现Callable\n\n## 2.synchronized锁优化\n### mark word\n每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样\n\n### synchronized从偏向锁到重量级锁\n{% asset_img 偏向锁到重量级锁.png %}\n1. 偏向锁\n本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。\n\n2. 自旋锁（轻量级锁）\n当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁\n\n3. 重量级锁-对象监视器（monitor）\n- _entryList(多个争抢线程)\n- _owner（抢到锁的线程）\n- waitSet（调用wait等待的线程）\n\n## 3.Lock\n***注意事项***\njdk实现Lock的类，在加锁后，保证了同步代码块的可见性。\n\n### 什么叫可重入\n可重入锁，对于已经获取锁的线程，再次获取锁，state+1,同时也需要释放相同次数才能真正释放掉锁\n\n### ReentrantLock\n内部类Sync实现AQS，实现独占模式。\n\n### ReentrantReadWriteLock\n内部类Sync实现AQS，同时有两个WriteLock和ReadLock的实例。能够实现并发读。\n\n## 4.synchronized和Lock的对比\n1. synchronized在同步块出现异常时，会自动释放锁;Lock在同步块中出现异常时，如果没有在finally中释放锁，则会发生死锁。\n2. Lock可以在***等待锁的过程中***响应中断，而synchronized不行。 \n3. Lock可以实现并发读（ReentrantReadWriteLock）, 而synchronized不行\n\n## 5.AQS原理\n数据结构\n1. state，(独占模式为：当前获取资源的线程数;共享模式为：当前资源数量)\n2. Node head，tail，等待队列的头和尾(双端队列)\n\n操作\n```\npublic final void accquire(int arg);\n```\n1. 尝试获取资源（tryAccquire(arg)）\n2. 若失败则创建节点加入到等待队列（addWaiter(), cas设置队尾）\n3. 使线程进入等待状态(LockSupport.park)，直到线程中断或其他线程释放资源\n4. 如果等待过程中有中断，则设置补上中断\n\n***注意事项***\n当加入到等待队列后，如果前驱节点为头节点，则会尝试再获取一次资源。\n\n公平锁和非公平锁\n由实现AQS的类实现，在设置state前判断等待队列是否有等待者，如果有的话直接返回tryAccquire失败，此时会直接加入到等待队列而没有第一次争抢锁的过程。\n\n## 6.CAS的ABA问题\nUnsafe CAS的四个参数：\n- 需要修改的对象\n- 需要修改的属性偏移量\n- 旧的预期值\n- 新的设置值\n\n问题：其他线程多次修改值后与最终变得与原来一样，原线程无法感知\n解决：如果只关心值是否修改，可忽略，如果关心是否被其他线程修改过，则可以使用AtomicStampedReference类，将对象包装，增加时间戳属性。\n\n## 7.CurrentModificationException\n使用迭代器遍历时，使用原引用的remove，add等修改方法对原对象的修改，会抛出此异常\nIterator在迭代时会检查expectedModCnt和ModCnt是否一致。\nIterator在工作时，不允许被迭代对象被修改，除非是迭代器修改，因为Iterator工作在独立的线程中，并拥有一个mutex锁。\n\n## 8.并发计数器\n1. AtomicLong（对一个value cas操作）\n2. LongAdder（对多个value cas操作，最终取sum，提高并发度）\n\n## 9.ThreadLocal\n1. 每个Thread内部有一个ThreadLocal变量，其中的键值对是弱引用\n2. ThreadLocalMap的key为ThreadLocal实例变量，value为对应的值\n\n## 10.Fork/Join框架\n接口类\nForkJoinTask\n适配类\nRecursiveAction(无返回值)\nRecursiveTask(有返回值)\n\nForkJoinTask需要提交到ForkJoinPool，ForkJoinPool每个线程维护一个工作队列(不同于普通线程池),当某工作线程中没有任务时，会去其他线程的工作队列获取任务执行(工作窃取).\n\n本质上是将一个大任务拆分成多个子任务交由多个线程处理，最终将结果合并。\n","source":"_posts/2019/03/多线程并发面试要点.md","raw":"---\ntitle: 多线程并发面试要点\ndate: 2019-03-04 15:48:23\ncategories:\n  - 多线程\ntags:\n  - 面试\n  - 多线程\n---\n摘要...\n{% asset_img sample.png %}\n<!-- more -->\n## 1.基本概念\n### 三个概念\n1. 原子性\n2. 可见性\n3. 有序性（保证单线程下运行结果一致）\n\n### volatile\n内够保证可见性，但无法保证原子性。\n\n问题：\n每个cpu都有自己的高速缓存（L1，L2，L3（共享的））\n所以每个线程都有自己的工作内存，操作系统有主内存\n当一个线程在自己的工作内存中修改了某个值，并不会更新主存的值\n\n解决：\n缓存一致性协议，当一个线程在自己的工作内存中修改了某个值，强制更新主存，并将其状态在其他线程中设置为失效态。其他线程读取此值时由于是失效态，将会从主存中读取。\n\n### java线程争抢资源的几种方法\n1. synchronized\n2. Lock接口\n3. LockSupports.park/unpark\n4. CAS操作\n\n### 线程与进程的区别\n1. 进程是程序在特定数据集上的一次运行过程。是资源分配的基本单位。\n2. 线程是CPU调度的最小单位。同一进程下的多个线程共享资源，但每个线程都有自己的线程栈，用来存放栈帧。\n\n### 线程池的核心参数\n1. 核心线程数\n2. 最大线程数\n3. 超出核心线程数的空闲线程存活时间\n4. 时间单位\n5. 工作队列\n6. 线程工厂\n7. 拒绝执行策略\n\n***注意事项***\n仅当当前任务超过工作队列的最大上限时，线程池才会创建新的线程去工作（小于最大线程数时），所以如果是无界队列，则线程池的线程将永远不会增加。\n\n### 创建线程的三种方法\n1. 继承Thread\n2. 实现Runnable\n3. 实现Callable\n\n## 2.synchronized锁优化\n### mark word\n每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样\n\n### synchronized从偏向锁到重量级锁\n{% asset_img 偏向锁到重量级锁.png %}\n1. 偏向锁\n本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。\n\n2. 自旋锁（轻量级锁）\n当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁\n\n3. 重量级锁-对象监视器（monitor）\n- _entryList(多个争抢线程)\n- _owner（抢到锁的线程）\n- waitSet（调用wait等待的线程）\n\n## 3.Lock\n***注意事项***\njdk实现Lock的类，在加锁后，保证了同步代码块的可见性。\n\n### 什么叫可重入\n可重入锁，对于已经获取锁的线程，再次获取锁，state+1,同时也需要释放相同次数才能真正释放掉锁\n\n### ReentrantLock\n内部类Sync实现AQS，实现独占模式。\n\n### ReentrantReadWriteLock\n内部类Sync实现AQS，同时有两个WriteLock和ReadLock的实例。能够实现并发读。\n\n## 4.synchronized和Lock的对比\n1. synchronized在同步块出现异常时，会自动释放锁;Lock在同步块中出现异常时，如果没有在finally中释放锁，则会发生死锁。\n2. Lock可以在***等待锁的过程中***响应中断，而synchronized不行。 \n3. Lock可以实现并发读（ReentrantReadWriteLock）, 而synchronized不行\n\n## 5.AQS原理\n数据结构\n1. state，(独占模式为：当前获取资源的线程数;共享模式为：当前资源数量)\n2. Node head，tail，等待队列的头和尾(双端队列)\n\n操作\n```\npublic final void accquire(int arg);\n```\n1. 尝试获取资源（tryAccquire(arg)）\n2. 若失败则创建节点加入到等待队列（addWaiter(), cas设置队尾）\n3. 使线程进入等待状态(LockSupport.park)，直到线程中断或其他线程释放资源\n4. 如果等待过程中有中断，则设置补上中断\n\n***注意事项***\n当加入到等待队列后，如果前驱节点为头节点，则会尝试再获取一次资源。\n\n公平锁和非公平锁\n由实现AQS的类实现，在设置state前判断等待队列是否有等待者，如果有的话直接返回tryAccquire失败，此时会直接加入到等待队列而没有第一次争抢锁的过程。\n\n## 6.CAS的ABA问题\nUnsafe CAS的四个参数：\n- 需要修改的对象\n- 需要修改的属性偏移量\n- 旧的预期值\n- 新的设置值\n\n问题：其他线程多次修改值后与最终变得与原来一样，原线程无法感知\n解决：如果只关心值是否修改，可忽略，如果关心是否被其他线程修改过，则可以使用AtomicStampedReference类，将对象包装，增加时间戳属性。\n\n## 7.CurrentModificationException\n使用迭代器遍历时，使用原引用的remove，add等修改方法对原对象的修改，会抛出此异常\nIterator在迭代时会检查expectedModCnt和ModCnt是否一致。\nIterator在工作时，不允许被迭代对象被修改，除非是迭代器修改，因为Iterator工作在独立的线程中，并拥有一个mutex锁。\n\n## 8.并发计数器\n1. AtomicLong（对一个value cas操作）\n2. LongAdder（对多个value cas操作，最终取sum，提高并发度）\n\n## 9.ThreadLocal\n1. 每个Thread内部有一个ThreadLocal变量，其中的键值对是弱引用\n2. ThreadLocalMap的key为ThreadLocal实例变量，value为对应的值\n\n## 10.Fork/Join框架\n接口类\nForkJoinTask\n适配类\nRecursiveAction(无返回值)\nRecursiveTask(有返回值)\n\nForkJoinTask需要提交到ForkJoinPool，ForkJoinPool每个线程维护一个工作队列(不同于普通线程池),当某工作线程中没有任务时，会去其他线程的工作队列获取任务执行(工作窃取).\n\n本质上是将一个大任务拆分成多个子任务交由多个线程处理，最终将结果合并。\n","slug":"多线程并发面试要点","published":1,"updated":"2019-03-05T02:21:32.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy3so9mw0012oung4fbdpz9n","content":"<p>摘要…<br><br><a id=\"more\"></a></p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><h3 id=\"三个概念\"><a href=\"#三个概念\" class=\"headerlink\" title=\"三个概念\"></a>三个概念</h3><ol>\n<li>原子性</li>\n<li>可见性</li>\n<li>有序性（保证单线程下运行结果一致）</li>\n</ol>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>内够保证可见性，但无法保证原子性。</p>\n<p>问题：<br>每个cpu都有自己的高速缓存（L1，L2，L3（共享的））<br>所以每个线程都有自己的工作内存，操作系统有主内存<br>当一个线程在自己的工作内存中修改了某个值，并不会更新主存的值</p>\n<p>解决：<br>缓存一致性协议，当一个线程在自己的工作内存中修改了某个值，强制更新主存，并将其状态在其他线程中设置为失效态。其他线程读取此值时由于是失效态，将会从主存中读取。</p>\n<h3 id=\"java线程争抢资源的几种方法\"><a href=\"#java线程争抢资源的几种方法\" class=\"headerlink\" title=\"java线程争抢资源的几种方法\"></a>java线程争抢资源的几种方法</h3><ol>\n<li>synchronized</li>\n<li>Lock接口</li>\n<li>LockSupports.park/unpark</li>\n<li>CAS操作</li>\n</ol>\n<h3 id=\"线程与进程的区别\"><a href=\"#线程与进程的区别\" class=\"headerlink\" title=\"线程与进程的区别\"></a>线程与进程的区别</h3><ol>\n<li>进程是程序在特定数据集上的一次运行过程。是资源分配的基本单位。</li>\n<li>线程是CPU调度的最小单位。同一进程下的多个线程共享资源，但每个线程都有自己的线程栈，用来存放栈帧。</li>\n</ol>\n<h3 id=\"线程池的核心参数\"><a href=\"#线程池的核心参数\" class=\"headerlink\" title=\"线程池的核心参数\"></a>线程池的核心参数</h3><ol>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>超出核心线程数的空闲线程存活时间</li>\n<li>时间单位</li>\n<li>工作队列</li>\n<li>线程工厂</li>\n<li>拒绝执行策略</li>\n</ol>\n<p><strong><em>注意事项</em></strong><br>仅当当前任务超过工作队列的最大上限时，线程池才会创建新的线程去工作（小于最大线程数时），所以如果是无界队列，则线程池的线程将永远不会增加。</p>\n<h3 id=\"创建线程的三种方法\"><a href=\"#创建线程的三种方法\" class=\"headerlink\" title=\"创建线程的三种方法\"></a>创建线程的三种方法</h3><ol>\n<li>继承Thread</li>\n<li>实现Runnable</li>\n<li>实现Callable</li>\n</ol>\n<h2 id=\"2-synchronized锁优化\"><a href=\"#2-synchronized锁优化\" class=\"headerlink\" title=\"2.synchronized锁优化\"></a>2.synchronized锁优化</h2><h3 id=\"mark-word\"><a href=\"#mark-word\" class=\"headerlink\" title=\"mark word\"></a>mark word</h3><p>每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样</p>\n<h3 id=\"synchronized从偏向锁到重量级锁\"><a href=\"#synchronized从偏向锁到重量级锁\" class=\"headerlink\" title=\"synchronized从偏向锁到重量级锁\"></a>synchronized从偏向锁到重量级锁</h3><img src=\"/2019/03/04/多线程并发面试要点/偏向锁到重量级锁.png\">\n<ol>\n<li><p>偏向锁<br>本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。</p>\n</li>\n<li><p>自旋锁（轻量级锁）<br>当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁</p>\n</li>\n<li><p>重量级锁-对象监视器（monitor）</p>\n</li>\n</ol>\n<ul>\n<li>_entryList(多个争抢线程)</li>\n<li>_owner（抢到锁的线程）</li>\n<li>waitSet（调用wait等待的线程）</li>\n</ul>\n<h2 id=\"3-Lock\"><a href=\"#3-Lock\" class=\"headerlink\" title=\"3.Lock\"></a>3.Lock</h2><p><strong><em>注意事项</em></strong><br>jdk实现Lock的类，在加锁后，保证了同步代码块的可见性。</p>\n<h3 id=\"什么叫可重入\"><a href=\"#什么叫可重入\" class=\"headerlink\" title=\"什么叫可重入\"></a>什么叫可重入</h3><p>可重入锁，对于已经获取锁的线程，再次获取锁，state+1,同时也需要释放相同次数才能真正释放掉锁</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>内部类Sync实现AQS，实现独占模式。</p>\n<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>内部类Sync实现AQS，同时有两个WriteLock和ReadLock的实例。能够实现并发读。</p>\n<h2 id=\"4-synchronized和Lock的对比\"><a href=\"#4-synchronized和Lock的对比\" class=\"headerlink\" title=\"4.synchronized和Lock的对比\"></a>4.synchronized和Lock的对比</h2><ol>\n<li>synchronized在同步块出现异常时，会自动释放锁;Lock在同步块中出现异常时，如果没有在finally中释放锁，则会发生死锁。</li>\n<li>Lock可以在<strong><em>等待锁的过程中</em></strong>响应中断，而synchronized不行。 </li>\n<li>Lock可以实现并发读（ReentrantReadWriteLock）, 而synchronized不行</li>\n</ol>\n<h2 id=\"5-AQS原理\"><a href=\"#5-AQS原理\" class=\"headerlink\" title=\"5.AQS原理\"></a>5.AQS原理</h2><p>数据结构</p>\n<ol>\n<li>state，(独占模式为：当前获取资源的线程数;共享模式为：当前资源数量)</li>\n<li>Node head，tail，等待队列的头和尾(双端队列)</li>\n</ol>\n<p>操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void accquire(int arg);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>尝试获取资源（tryAccquire(arg)）</li>\n<li>若失败则创建节点加入到等待队列（addWaiter(), cas设置队尾）</li>\n<li>使线程进入等待状态(LockSupport.park)，直到线程中断或其他线程释放资源</li>\n<li>如果等待过程中有中断，则设置补上中断</li>\n</ol>\n<p><strong><em>注意事项</em></strong><br>当加入到等待队列后，如果前驱节点为头节点，则会尝试再获取一次资源。</p>\n<p>公平锁和非公平锁<br>由实现AQS的类实现，在设置state前判断等待队列是否有等待者，如果有的话直接返回tryAccquire失败，此时会直接加入到等待队列而没有第一次争抢锁的过程。</p>\n<h2 id=\"6-CAS的ABA问题\"><a href=\"#6-CAS的ABA问题\" class=\"headerlink\" title=\"6.CAS的ABA问题\"></a>6.CAS的ABA问题</h2><p>Unsafe CAS的四个参数：</p>\n<ul>\n<li>需要修改的对象</li>\n<li>需要修改的属性偏移量</li>\n<li>旧的预期值</li>\n<li>新的设置值</li>\n</ul>\n<p>问题：其他线程多次修改值后与最终变得与原来一样，原线程无法感知<br>解决：如果只关心值是否修改，可忽略，如果关心是否被其他线程修改过，则可以使用AtomicStampedReference类，将对象包装，增加时间戳属性。</p>\n<h2 id=\"7-CurrentModificationException\"><a href=\"#7-CurrentModificationException\" class=\"headerlink\" title=\"7.CurrentModificationException\"></a>7.CurrentModificationException</h2><p>使用迭代器遍历时，使用原引用的remove，add等修改方法对原对象的修改，会抛出此异常<br>Iterator在迭代时会检查expectedModCnt和ModCnt是否一致。<br>Iterator在工作时，不允许被迭代对象被修改，除非是迭代器修改，因为Iterator工作在独立的线程中，并拥有一个mutex锁。</p>\n<h2 id=\"8-并发计数器\"><a href=\"#8-并发计数器\" class=\"headerlink\" title=\"8.并发计数器\"></a>8.并发计数器</h2><ol>\n<li>AtomicLong（对一个value cas操作）</li>\n<li>LongAdder（对多个value cas操作，最终取sum，提高并发度）</li>\n</ol>\n<h2 id=\"9-ThreadLocal\"><a href=\"#9-ThreadLocal\" class=\"headerlink\" title=\"9.ThreadLocal\"></a>9.ThreadLocal</h2><ol>\n<li>每个Thread内部有一个ThreadLocal变量，其中的键值对是弱引用</li>\n<li>ThreadLocalMap的key为ThreadLocal实例变量，value为对应的值</li>\n</ol>\n<h2 id=\"10-Fork-Join框架\"><a href=\"#10-Fork-Join框架\" class=\"headerlink\" title=\"10.Fork/Join框架\"></a>10.Fork/Join框架</h2><p>接口类<br>ForkJoinTask<br>适配类<br>RecursiveAction(无返回值)<br>RecursiveTask(有返回值)</p>\n<p>ForkJoinTask需要提交到ForkJoinPool，ForkJoinPool每个线程维护一个工作队列(不同于普通线程池),当某工作线程中没有任务时，会去其他线程的工作队列获取任务执行(工作窃取).</p>\n<p>本质上是将一个大任务拆分成多个子任务交由多个线程处理，最终将结果合并。</p>\n","site":{"data":{}},"excerpt":"<p>摘要…<br><br>","more":"</p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><h3 id=\"三个概念\"><a href=\"#三个概念\" class=\"headerlink\" title=\"三个概念\"></a>三个概念</h3><ol>\n<li>原子性</li>\n<li>可见性</li>\n<li>有序性（保证单线程下运行结果一致）</li>\n</ol>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>内够保证可见性，但无法保证原子性。</p>\n<p>问题：<br>每个cpu都有自己的高速缓存（L1，L2，L3（共享的））<br>所以每个线程都有自己的工作内存，操作系统有主内存<br>当一个线程在自己的工作内存中修改了某个值，并不会更新主存的值</p>\n<p>解决：<br>缓存一致性协议，当一个线程在自己的工作内存中修改了某个值，强制更新主存，并将其状态在其他线程中设置为失效态。其他线程读取此值时由于是失效态，将会从主存中读取。</p>\n<h3 id=\"java线程争抢资源的几种方法\"><a href=\"#java线程争抢资源的几种方法\" class=\"headerlink\" title=\"java线程争抢资源的几种方法\"></a>java线程争抢资源的几种方法</h3><ol>\n<li>synchronized</li>\n<li>Lock接口</li>\n<li>LockSupports.park/unpark</li>\n<li>CAS操作</li>\n</ol>\n<h3 id=\"线程与进程的区别\"><a href=\"#线程与进程的区别\" class=\"headerlink\" title=\"线程与进程的区别\"></a>线程与进程的区别</h3><ol>\n<li>进程是程序在特定数据集上的一次运行过程。是资源分配的基本单位。</li>\n<li>线程是CPU调度的最小单位。同一进程下的多个线程共享资源，但每个线程都有自己的线程栈，用来存放栈帧。</li>\n</ol>\n<h3 id=\"线程池的核心参数\"><a href=\"#线程池的核心参数\" class=\"headerlink\" title=\"线程池的核心参数\"></a>线程池的核心参数</h3><ol>\n<li>核心线程数</li>\n<li>最大线程数</li>\n<li>超出核心线程数的空闲线程存活时间</li>\n<li>时间单位</li>\n<li>工作队列</li>\n<li>线程工厂</li>\n<li>拒绝执行策略</li>\n</ol>\n<p><strong><em>注意事项</em></strong><br>仅当当前任务超过工作队列的最大上限时，线程池才会创建新的线程去工作（小于最大线程数时），所以如果是无界队列，则线程池的线程将永远不会增加。</p>\n<h3 id=\"创建线程的三种方法\"><a href=\"#创建线程的三种方法\" class=\"headerlink\" title=\"创建线程的三种方法\"></a>创建线程的三种方法</h3><ol>\n<li>继承Thread</li>\n<li>实现Runnable</li>\n<li>实现Callable</li>\n</ol>\n<h2 id=\"2-synchronized锁优化\"><a href=\"#2-synchronized锁优化\" class=\"headerlink\" title=\"2.synchronized锁优化\"></a>2.synchronized锁优化</h2><h3 id=\"mark-word\"><a href=\"#mark-word\" class=\"headerlink\" title=\"mark word\"></a>mark word</h3><p>每个java对象在堆中都有一个mark work标志，在不同阶段，其格式和内容都不一样</p>\n<h3 id=\"synchronized从偏向锁到重量级锁\"><a href=\"#synchronized从偏向锁到重量级锁\" class=\"headerlink\" title=\"synchronized从偏向锁到重量级锁\"></a>synchronized从偏向锁到重量级锁</h3><img src=\"/2019/03/04/多线程并发面试要点/偏向锁到重量级锁.png\">\n<ol>\n<li><p>偏向锁<br>本质就是无锁，在mark word中标记当前获取锁的线程id，若没有其他线程争抢，则此线程获取锁时直接获得。出现争抢后就没用了。</p>\n</li>\n<li><p>自旋锁（轻量级锁）<br>当出现锁的争抢时，通过cas修改mark word争抢锁，当自旋次数到达一定次数仍未抢到锁，则升级为重量级锁</p>\n</li>\n<li><p>重量级锁-对象监视器（monitor）</p>\n</li>\n</ol>\n<ul>\n<li>_entryList(多个争抢线程)</li>\n<li>_owner（抢到锁的线程）</li>\n<li>waitSet（调用wait等待的线程）</li>\n</ul>\n<h2 id=\"3-Lock\"><a href=\"#3-Lock\" class=\"headerlink\" title=\"3.Lock\"></a>3.Lock</h2><p><strong><em>注意事项</em></strong><br>jdk实现Lock的类，在加锁后，保证了同步代码块的可见性。</p>\n<h3 id=\"什么叫可重入\"><a href=\"#什么叫可重入\" class=\"headerlink\" title=\"什么叫可重入\"></a>什么叫可重入</h3><p>可重入锁，对于已经获取锁的线程，再次获取锁，state+1,同时也需要释放相同次数才能真正释放掉锁</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>内部类Sync实现AQS，实现独占模式。</p>\n<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>内部类Sync实现AQS，同时有两个WriteLock和ReadLock的实例。能够实现并发读。</p>\n<h2 id=\"4-synchronized和Lock的对比\"><a href=\"#4-synchronized和Lock的对比\" class=\"headerlink\" title=\"4.synchronized和Lock的对比\"></a>4.synchronized和Lock的对比</h2><ol>\n<li>synchronized在同步块出现异常时，会自动释放锁;Lock在同步块中出现异常时，如果没有在finally中释放锁，则会发生死锁。</li>\n<li>Lock可以在<strong><em>等待锁的过程中</em></strong>响应中断，而synchronized不行。 </li>\n<li>Lock可以实现并发读（ReentrantReadWriteLock）, 而synchronized不行</li>\n</ol>\n<h2 id=\"5-AQS原理\"><a href=\"#5-AQS原理\" class=\"headerlink\" title=\"5.AQS原理\"></a>5.AQS原理</h2><p>数据结构</p>\n<ol>\n<li>state，(独占模式为：当前获取资源的线程数;共享模式为：当前资源数量)</li>\n<li>Node head，tail，等待队列的头和尾(双端队列)</li>\n</ol>\n<p>操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void accquire(int arg);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>尝试获取资源（tryAccquire(arg)）</li>\n<li>若失败则创建节点加入到等待队列（addWaiter(), cas设置队尾）</li>\n<li>使线程进入等待状态(LockSupport.park)，直到线程中断或其他线程释放资源</li>\n<li>如果等待过程中有中断，则设置补上中断</li>\n</ol>\n<p><strong><em>注意事项</em></strong><br>当加入到等待队列后，如果前驱节点为头节点，则会尝试再获取一次资源。</p>\n<p>公平锁和非公平锁<br>由实现AQS的类实现，在设置state前判断等待队列是否有等待者，如果有的话直接返回tryAccquire失败，此时会直接加入到等待队列而没有第一次争抢锁的过程。</p>\n<h2 id=\"6-CAS的ABA问题\"><a href=\"#6-CAS的ABA问题\" class=\"headerlink\" title=\"6.CAS的ABA问题\"></a>6.CAS的ABA问题</h2><p>Unsafe CAS的四个参数：</p>\n<ul>\n<li>需要修改的对象</li>\n<li>需要修改的属性偏移量</li>\n<li>旧的预期值</li>\n<li>新的设置值</li>\n</ul>\n<p>问题：其他线程多次修改值后与最终变得与原来一样，原线程无法感知<br>解决：如果只关心值是否修改，可忽略，如果关心是否被其他线程修改过，则可以使用AtomicStampedReference类，将对象包装，增加时间戳属性。</p>\n<h2 id=\"7-CurrentModificationException\"><a href=\"#7-CurrentModificationException\" class=\"headerlink\" title=\"7.CurrentModificationException\"></a>7.CurrentModificationException</h2><p>使用迭代器遍历时，使用原引用的remove，add等修改方法对原对象的修改，会抛出此异常<br>Iterator在迭代时会检查expectedModCnt和ModCnt是否一致。<br>Iterator在工作时，不允许被迭代对象被修改，除非是迭代器修改，因为Iterator工作在独立的线程中，并拥有一个mutex锁。</p>\n<h2 id=\"8-并发计数器\"><a href=\"#8-并发计数器\" class=\"headerlink\" title=\"8.并发计数器\"></a>8.并发计数器</h2><ol>\n<li>AtomicLong（对一个value cas操作）</li>\n<li>LongAdder（对多个value cas操作，最终取sum，提高并发度）</li>\n</ol>\n<h2 id=\"9-ThreadLocal\"><a href=\"#9-ThreadLocal\" class=\"headerlink\" title=\"9.ThreadLocal\"></a>9.ThreadLocal</h2><ol>\n<li>每个Thread内部有一个ThreadLocal变量，其中的键值对是弱引用</li>\n<li>ThreadLocalMap的key为ThreadLocal实例变量，value为对应的值</li>\n</ol>\n<h2 id=\"10-Fork-Join框架\"><a href=\"#10-Fork-Join框架\" class=\"headerlink\" title=\"10.Fork/Join框架\"></a>10.Fork/Join框架</h2><p>接口类<br>ForkJoinTask<br>适配类<br>RecursiveAction(无返回值)<br>RecursiveTask(有返回值)</p>\n<p>ForkJoinTask需要提交到ForkJoinPool，ForkJoinPool每个线程维护一个工作队列(不同于普通线程池),当某工作线程中没有任务时，会去其他线程的工作队列获取任务执行(工作窃取).</p>\n<p>本质上是将一个大任务拆分成多个子任务交由多个线程处理，最终将结果合并。</p>"},{"title":"docker命令","date":"2019-07-10T02:36:58.000Z","_content":"docker命令\n<!-- more -->\n## 镜像命令\n```\n// 从docker registry拉取镜像\n$ docker pull [option] [docker registry ip:port/] repository[:tag]\n\n// 列出本地的镜像列表\n$ docker image ls\n\n// 删除本地镜像\n$ docker image rm [option] <image1> [<image2>...] \n\n// 批量删除本地镜像\n$ docker image rm $(docker image ls -q -f before=ubuntu:16.04)\n\n// 查看镜像，容器，数据卷占用的空间\n$ docker system df\n\n// 显示虚悬镜像(repository和tag都为none的镜像)\n$ docker image ls -f dangling=true\n\n// 删除虚悬镜像\n$ docker image prune\n\n// 重命名镜像\n$ docker tag <imageId> <newImageName>\n```\n\n## 容器命令\n// docker run 命令及选项\n$ docker run [option] repository:tag [commond] \n\n-d：后台运行\n-i：交互式操作，让容器的标准输入打开\n-t：打开一个伪终端，绑定到容器\n--name：指定容器的名字\n-p：-p ip:hostPort:containerPort[/udp], 将宿主机的端口绑定容器内端口\n-P：-P，将宿主机49000～49900的随机端口映射到容器镜像EXPOSE中指定开放的端口\n-v：指定宿主机的目录挂载容器镜像VOLUME指定的匿名卷，用于存储动态数据\n--network：bridge桥接，host与宿主机一致的网络，none\n--network-alias：为--network指定的网络取别名\n\n// 进入到运行时的容器中\n$ docker exec -it <container> /bin/bash\n\n// 导出容器为镜像\n$ docker export <container> > <exportName>\n\n// 导入容器为镜像\n$ docker import <exportName> <imageName>\n$ cat <exportName> | docker import - <imageName>\n$ docker import <url> <imageName>\n\n// 启动容器并执行命令\n$ docker run ubuntu:16.04 /bin/bash \"hello world\"\n\n// 根据ubuntu:16.04来启动一个容器\n$ docker run -it --rm ubuntu:16.04 /bin/bash\n\n-it：这是两个参数，-i：交互式操作，让容器的标准输入保持打开，-t：打开一个终端绑定到容器上\n--rm：容器退出后删除这个容器\nbash：容器启动后执行的命令，这里是开启一个交互式的shell\n\n// 终止容器\n$ docker container stop <container>\n\n// 查看终止状态的容器\n$ docker container ls -a\n\n// 启动已终止的容器\n$ docker container start\n$ docker start\n\n// 重新启动正在运行的容器\n$ docker container restart\n\n// 删除容器\n$ docker container rm <container>\n$ docker rm -f <container>\n\n// 删除所有处于终止状态的容器\n$ docker container prune\n","source":"_posts/2019/07/docker命令.md","raw":"---\ntitle: docker命令\ndate: 2019-07-10 10:36:58\ncategories:\n  - docker\ntags:\n  - docker\n---\ndocker命令\n<!-- more -->\n## 镜像命令\n```\n// 从docker registry拉取镜像\n$ docker pull [option] [docker registry ip:port/] repository[:tag]\n\n// 列出本地的镜像列表\n$ docker image ls\n\n// 删除本地镜像\n$ docker image rm [option] <image1> [<image2>...] \n\n// 批量删除本地镜像\n$ docker image rm $(docker image ls -q -f before=ubuntu:16.04)\n\n// 查看镜像，容器，数据卷占用的空间\n$ docker system df\n\n// 显示虚悬镜像(repository和tag都为none的镜像)\n$ docker image ls -f dangling=true\n\n// 删除虚悬镜像\n$ docker image prune\n\n// 重命名镜像\n$ docker tag <imageId> <newImageName>\n```\n\n## 容器命令\n// docker run 命令及选项\n$ docker run [option] repository:tag [commond] \n\n-d：后台运行\n-i：交互式操作，让容器的标准输入打开\n-t：打开一个伪终端，绑定到容器\n--name：指定容器的名字\n-p：-p ip:hostPort:containerPort[/udp], 将宿主机的端口绑定容器内端口\n-P：-P，将宿主机49000～49900的随机端口映射到容器镜像EXPOSE中指定开放的端口\n-v：指定宿主机的目录挂载容器镜像VOLUME指定的匿名卷，用于存储动态数据\n--network：bridge桥接，host与宿主机一致的网络，none\n--network-alias：为--network指定的网络取别名\n\n// 进入到运行时的容器中\n$ docker exec -it <container> /bin/bash\n\n// 导出容器为镜像\n$ docker export <container> > <exportName>\n\n// 导入容器为镜像\n$ docker import <exportName> <imageName>\n$ cat <exportName> | docker import - <imageName>\n$ docker import <url> <imageName>\n\n// 启动容器并执行命令\n$ docker run ubuntu:16.04 /bin/bash \"hello world\"\n\n// 根据ubuntu:16.04来启动一个容器\n$ docker run -it --rm ubuntu:16.04 /bin/bash\n\n-it：这是两个参数，-i：交互式操作，让容器的标准输入保持打开，-t：打开一个终端绑定到容器上\n--rm：容器退出后删除这个容器\nbash：容器启动后执行的命令，这里是开启一个交互式的shell\n\n// 终止容器\n$ docker container stop <container>\n\n// 查看终止状态的容器\n$ docker container ls -a\n\n// 启动已终止的容器\n$ docker container start\n$ docker start\n\n// 重新启动正在运行的容器\n$ docker container restart\n\n// 删除容器\n$ docker container rm <container>\n$ docker rm -f <container>\n\n// 删除所有处于终止状态的容器\n$ docker container prune\n","slug":"docker命令","published":1,"updated":"2019-07-15T02:57:53.230Z","_id":"cjy3so9mx0013oung7mik5jyh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker命令<br><a id=\"more\"></a></p>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从docker registry拉取镜像</span><br><span class=\"line\">$ docker pull [option] [docker registry ip:port/] repository[:tag]</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出本地的镜像列表</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除本地镜像</span><br><span class=\"line\">$ docker image rm [option] &lt;image1&gt; [&lt;image2&gt;...] </span><br><span class=\"line\"></span><br><span class=\"line\">// 批量删除本地镜像</span><br><span class=\"line\">$ docker image rm $(docker image ls -q -f before=ubuntu:16.04)</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看镜像，容器，数据卷占用的空间</span><br><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示虚悬镜像(repository和tag都为none的镜像)</span><br><span class=\"line\">$ docker image ls -f dangling=true</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除虚悬镜像</span><br><span class=\"line\">$ docker image prune</span><br><span class=\"line\"></span><br><span class=\"line\">// 重命名镜像</span><br><span class=\"line\">$ docker tag &lt;imageId&gt; &lt;newImageName&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><p>// docker run 命令及选项<br>$ docker run [option] repository:tag [commond] </p>\n<p>-d：后台运行<br>-i：交互式操作，让容器的标准输入打开<br>-t：打开一个伪终端，绑定到容器<br>–name：指定容器的名字<br>-p：-p ip:hostPort:containerPort[/udp], 将宿主机的端口绑定容器内端口<br>-P：-P，将宿主机49000～49900的随机端口映射到容器镜像EXPOSE中指定开放的端口<br>-v：指定宿主机的目录挂载容器镜像VOLUME指定的匿名卷，用于存储动态数据<br>–network：bridge桥接，host与宿主机一致的网络，none<br>–network-alias：为–network指定的网络取别名</p>\n<p>// 进入到运行时的容器中<br>$ docker exec -it <container> /bin/bash</container></p>\n<p>// 导出容器为镜像<br>$ docker export <container> &gt; <exportname></exportname></container></p>\n<p>// 导入容器为镜像<br>$ docker import <exportname> <imagename><br>$ cat <exportname> | docker import - <imagename><br>$ docker import <url> <imagename></imagename></url></imagename></exportname></imagename></exportname></p>\n<p>// 启动容器并执行命令<br>$ docker run ubuntu:16.04 /bin/bash “hello world”</p>\n<p>// 根据ubuntu:16.04来启动一个容器<br>$ docker run -it –rm ubuntu:16.04 /bin/bash</p>\n<p>-it：这是两个参数，-i：交互式操作，让容器的标准输入保持打开，-t：打开一个终端绑定到容器上<br>–rm：容器退出后删除这个容器<br>bash：容器启动后执行的命令，这里是开启一个交互式的shell</p>\n<p>// 终止容器<br>$ docker container stop <container></container></p>\n<p>// 查看终止状态的容器<br>$ docker container ls -a</p>\n<p>// 启动已终止的容器<br>$ docker container start<br>$ docker start</p>\n<p>// 重新启动正在运行的容器<br>$ docker container restart</p>\n<p>// 删除容器<br>$ docker container rm <container><br>$ docker rm -f <container></container></container></p>\n<p>// 删除所有处于终止状态的容器<br>$ docker container prune</p>\n","site":{"data":{}},"excerpt":"<p>docker命令<br>","more":"</p>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从docker registry拉取镜像</span><br><span class=\"line\">$ docker pull [option] [docker registry ip:port/] repository[:tag]</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出本地的镜像列表</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除本地镜像</span><br><span class=\"line\">$ docker image rm [option] &lt;image1&gt; [&lt;image2&gt;...] </span><br><span class=\"line\"></span><br><span class=\"line\">// 批量删除本地镜像</span><br><span class=\"line\">$ docker image rm $(docker image ls -q -f before=ubuntu:16.04)</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看镜像，容器，数据卷占用的空间</span><br><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示虚悬镜像(repository和tag都为none的镜像)</span><br><span class=\"line\">$ docker image ls -f dangling=true</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除虚悬镜像</span><br><span class=\"line\">$ docker image prune</span><br><span class=\"line\"></span><br><span class=\"line\">// 重命名镜像</span><br><span class=\"line\">$ docker tag &lt;imageId&gt; &lt;newImageName&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><p>// docker run 命令及选项<br>$ docker run [option] repository:tag [commond] </p>\n<p>-d：后台运行<br>-i：交互式操作，让容器的标准输入打开<br>-t：打开一个伪终端，绑定到容器<br>–name：指定容器的名字<br>-p：-p ip:hostPort:containerPort[/udp], 将宿主机的端口绑定容器内端口<br>-P：-P，将宿主机49000～49900的随机端口映射到容器镜像EXPOSE中指定开放的端口<br>-v：指定宿主机的目录挂载容器镜像VOLUME指定的匿名卷，用于存储动态数据<br>–network：bridge桥接，host与宿主机一致的网络，none<br>–network-alias：为–network指定的网络取别名</p>\n<p>// 进入到运行时的容器中<br>$ docker exec -it <container> /bin/bash</container></p>\n<p>// 导出容器为镜像<br>$ docker export <container> &gt; <exportname></exportname></container></p>\n<p>// 导入容器为镜像<br>$ docker import <exportname> <imagename><br>$ cat <exportname> | docker import - <imagename><br>$ docker import <url> <imagename></imagename></url></imagename></exportname></imagename></exportname></p>\n<p>// 启动容器并执行命令<br>$ docker run ubuntu:16.04 /bin/bash “hello world”</p>\n<p>// 根据ubuntu:16.04来启动一个容器<br>$ docker run -it –rm ubuntu:16.04 /bin/bash</p>\n<p>-it：这是两个参数，-i：交互式操作，让容器的标准输入保持打开，-t：打开一个终端绑定到容器上<br>–rm：容器退出后删除这个容器<br>bash：容器启动后执行的命令，这里是开启一个交互式的shell</p>\n<p>// 终止容器<br>$ docker container stop <container></container></p>\n<p>// 查看终止状态的容器<br>$ docker container ls -a</p>\n<p>// 启动已终止的容器<br>$ docker container start<br>$ docker start</p>\n<p>// 重新启动正在运行的容器<br>$ docker container restart</p>\n<p>// 删除容器<br>$ docker container rm <container><br>$ docker rm -f <container></container></container></p>\n<p>// 删除所有处于终止状态的容器<br>$ docker container prune</p>"},{"title":"docker数据挂载","date":"2019-07-10T08:12:13.000Z","_content":"docker数据挂载的两种方式：数据卷、挂载主机目录\n<!-- more -->\n## docker数据管理\n- 数据卷\n- 挂载主机目录\n\n### 数据卷\n一个可供一个或多个容器使用的特殊目录，它绕过UFS，提供很多有用的特性：\n- 数据卷可以在容器之间共享和重用\n- 对数据卷的修改会立马生效\n- 对数据卷的更新，不会影响镜像\n- 数据卷默认会一直存在，即使容器被删除\n\n两种挂载方式：-v和-mount\n\n```\n// 创建数据卷\n$ docker volume create my-volume\n\n// 查看所有数据卷\n$ docker volumes\n\n// 查看指定数据卷的信息\n$ docker volume inspect my-volume\n\n// 启动容器时挂载数据卷\n$ docker run --mount source=my-volume,target=/webapp xxx\n```\n\n删除容器时不会默认删除挂载的数据卷，使用以下命令使删除容器时同时删除挂载的数据卷\n```\n$ docker rm -v xxx\n```\n\n没有被引用的数据卷可以使用以下命令删除\n```\n$ docker volume prune\n```\n\n{% asset_img sample.png %}\n","source":"_posts/2019/07/docker数据挂载.md","raw":"---\ntitle: docker数据挂载\ndate: 2019-07-10 16:12:13\ncategories:\n  - docker\ntags:\n  - docker\n---\ndocker数据挂载的两种方式：数据卷、挂载主机目录\n<!-- more -->\n## docker数据管理\n- 数据卷\n- 挂载主机目录\n\n### 数据卷\n一个可供一个或多个容器使用的特殊目录，它绕过UFS，提供很多有用的特性：\n- 数据卷可以在容器之间共享和重用\n- 对数据卷的修改会立马生效\n- 对数据卷的更新，不会影响镜像\n- 数据卷默认会一直存在，即使容器被删除\n\n两种挂载方式：-v和-mount\n\n```\n// 创建数据卷\n$ docker volume create my-volume\n\n// 查看所有数据卷\n$ docker volumes\n\n// 查看指定数据卷的信息\n$ docker volume inspect my-volume\n\n// 启动容器时挂载数据卷\n$ docker run --mount source=my-volume,target=/webapp xxx\n```\n\n删除容器时不会默认删除挂载的数据卷，使用以下命令使删除容器时同时删除挂载的数据卷\n```\n$ docker rm -v xxx\n```\n\n没有被引用的数据卷可以使用以下命令删除\n```\n$ docker volume prune\n```\n\n{% asset_img sample.png %}\n","slug":"docker数据挂载","published":1,"updated":"2019-07-15T02:58:37.153Z","_id":"cjy3so9my0016oungky8eke91","comments":1,"layout":"post","photos":[],"link":"","content":"<p>docker数据挂载的两种方式：数据卷、挂载主机目录<br><a id=\"more\"></a></p>\n<h2 id=\"docker数据管理\"><a href=\"#docker数据管理\" class=\"headerlink\" title=\"docker数据管理\"></a>docker数据管理</h2><ul>\n<li>数据卷</li>\n<li>挂载主机目录</li>\n</ul>\n<h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>一个可供一个或多个容器使用的特殊目录，它绕过UFS，提供很多有用的特性：</p>\n<ul>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新，不会影响镜像</li>\n<li>数据卷默认会一直存在，即使容器被删除</li>\n</ul>\n<p>两种挂载方式：-v和-mount</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建数据卷</span><br><span class=\"line\">$ docker volume create my-volume</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看所有数据卷</span><br><span class=\"line\">$ docker volumes</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看指定数据卷的信息</span><br><span class=\"line\">$ docker volume inspect my-volume</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动容器时挂载数据卷</span><br><span class=\"line\">$ docker run --mount source=my-volume,target=/webapp xxx</span><br></pre></td></tr></table></figure>\n<p>删除容器时不会默认删除挂载的数据卷，使用以下命令使删除容器时同时删除挂载的数据卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v xxx</span><br></pre></td></tr></table></figure></p>\n<p>没有被引用的数据卷可以使用以下命令删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume prune</span><br></pre></td></tr></table></figure></p>\n\n","site":{"data":{}},"excerpt":"<p>docker数据挂载的两种方式：数据卷、挂载主机目录<br>","more":"</p>\n<h2 id=\"docker数据管理\"><a href=\"#docker数据管理\" class=\"headerlink\" title=\"docker数据管理\"></a>docker数据管理</h2><ul>\n<li>数据卷</li>\n<li>挂载主机目录</li>\n</ul>\n<h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>一个可供一个或多个容器使用的特殊目录，它绕过UFS，提供很多有用的特性：</p>\n<ul>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新，不会影响镜像</li>\n<li>数据卷默认会一直存在，即使容器被删除</li>\n</ul>\n<p>两种挂载方式：-v和-mount</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建数据卷</span><br><span class=\"line\">$ docker volume create my-volume</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看所有数据卷</span><br><span class=\"line\">$ docker volumes</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看指定数据卷的信息</span><br><span class=\"line\">$ docker volume inspect my-volume</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动容器时挂载数据卷</span><br><span class=\"line\">$ docker run --mount source=my-volume,target=/webapp xxx</span><br></pre></td></tr></table></figure>\n<p>删除容器时不会默认删除挂载的数据卷，使用以下命令使删除容器时同时删除挂载的数据卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v xxx</span><br></pre></td></tr></table></figure></p>\n<p>没有被引用的数据卷可以使用以下命令删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume prune</span><br></pre></td></tr></table></figure></p>"},{"title":"使用dockerfile构建镜像","date":"2019-07-10T03:51:58.000Z","_content":"使用dockerfile构建镜像\n<!-- more -->\n## FROM\n选择基础镜像\n```\nFROM:scratch,虚拟基础镜像，空白\n```\n## RUN\n执行命令\n```\n// shell格式\nRUN echo \"hello world\"\n// exec格式\nRUN exec tar -zxvf redis.tar.gz -C /usr/src/redis --strip-components=1\n```\n每一个RUN都是启动一个容器、执行命令、然后提交存储层文件变更，所以每次执行一个命令后其上下文环境(比如当前所在目录)都会初始化.\n\n## COPY\n```\nCOPY <源路径>... <镜像内目标路径>\n```\n\n## ADD\n在COPY基础上增加了一些功能\n```\nADD <源路径>... <镜像内目标路径>\n```\n源路径可以是url，有自动解压缩的场合使用ADD，文件复制使用COPY\n\n## CMD\n当docker run时没有指定运行的命令时，CMD将会被执行\n```\n// shell格式\nCMD <命令>\n// exec格式\nCMD [可执行文件, \"参数1\", \"参数2\"]\n// 参数列表格式，在指定了ENTRYPOINT指令后，用CMD指定具体的参数\nCMD [\"参数1\", \"参数2\"]\n```\n## ENTRYPOINT\n通过docker run --entrypoint来指定\n当指定了ENTRYPOINT后，CMD的含义就发生了改变，不再是直接运行其命令，而是将CMD的内容作为参数传给ENTRYPOINT指令，即<ENTRYPOINT> \"<CMD>\"\n\n## ENV\n设置环境变量, 后续的指令和运行时的应用，都可以直接用$NAME 来使用这个环境变量\n```\nENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>\n```\n支持的命令：ADD, COPY, ENV, EXPOSE, LABEL, USER, WORKDIR, VOLUME, STOPSIGNAL, ONBUILD\n\n## ARG\n构建参数，与ENV相同，但是容器运行时应用中无法使用\n```\nARG <参数名>[=<默认值>]\n```\n默认值可以在构建命令docker build中用--build-arg <参数名>=<值>来覆盖\n\n## VOLUME\n定义匿名卷，动态数据不应写入容器存储层（将容器导出为镜像时，不需要这些动态数据），动态数据应写入到数据卷中，容器存储层应该是无状态的。\n```\nVOLUME /data\n```\n运行容器时可以覆盖这个挂载设置，比如：\n```\n$ docker run -d -v ./mydata:/data xxxx\n```\n\n## EXPOSE\n```\nEXPOSE <端口1> [<端口2>...]\n```\n声明容器内端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务,需要应用自己开启。\n1. 帮助镜像使用者理解这个镜像服务的守护端口，方便配置映射\n2. 在使用随机端口映射(docker run -P)时，会自动随机映射EXPOSE的端口\n\n## WORKDIR\n指定工作目录（或者称为当前目录），以后镜像各层的但前目录就被改为指定的目录，如该目录不存在，则WORKDIR会帮你建立该目录\n\n## USER\n指定工作用户，与WORKDIR类似，影响以后各层的构建过程。\n这个用户必须是事先建立好的，否则无法切换。\n\n## HEALTHCHECK \n```\n// 设置检查容器健康状况的命令\nHEALTHCHECK [选项] CMD <命令>\n--interval=<间隔>：两次健康检查的间隔，默认30s\n--timeout=<时长>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认30s\n--retries=<次数>：当连续失败指定次数后，则容器被视为unhealthy，默认3次\n\n// 如果基础镜像有健康检查指令，可以先屏蔽掉其健康检查指令\nHEALTHCHECK NONE\n```\n## ONBUILD\n```\nONBUILD <其他指令>\n```\n只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\nONBUILD时为了帮助别人定制自己而准备的\n\n## RUN、CMD和ENTRYPOINT\n- 使用 RUN 指令安装应用和软件包，构建镜像。\n- 如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。\n- 如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。\n\n## 其他构建镜像的方式\n```\n$ docker save nginx | gzip > nginx-latest.tat.gz\n$ docker load -i nginx-latest.tar.gz\n```\n{% asset_img sample.png %}\n","source":"_posts/2019/07/使用dockerfile构建镜像.md","raw":"---\ntitle: 使用dockerfile构建镜像\ndate: 2019-07-10 11:51:58\ncategories:\n  - docker\ntags:\n  - docker\n---\n使用dockerfile构建镜像\n<!-- more -->\n## FROM\n选择基础镜像\n```\nFROM:scratch,虚拟基础镜像，空白\n```\n## RUN\n执行命令\n```\n// shell格式\nRUN echo \"hello world\"\n// exec格式\nRUN exec tar -zxvf redis.tar.gz -C /usr/src/redis --strip-components=1\n```\n每一个RUN都是启动一个容器、执行命令、然后提交存储层文件变更，所以每次执行一个命令后其上下文环境(比如当前所在目录)都会初始化.\n\n## COPY\n```\nCOPY <源路径>... <镜像内目标路径>\n```\n\n## ADD\n在COPY基础上增加了一些功能\n```\nADD <源路径>... <镜像内目标路径>\n```\n源路径可以是url，有自动解压缩的场合使用ADD，文件复制使用COPY\n\n## CMD\n当docker run时没有指定运行的命令时，CMD将会被执行\n```\n// shell格式\nCMD <命令>\n// exec格式\nCMD [可执行文件, \"参数1\", \"参数2\"]\n// 参数列表格式，在指定了ENTRYPOINT指令后，用CMD指定具体的参数\nCMD [\"参数1\", \"参数2\"]\n```\n## ENTRYPOINT\n通过docker run --entrypoint来指定\n当指定了ENTRYPOINT后，CMD的含义就发生了改变，不再是直接运行其命令，而是将CMD的内容作为参数传给ENTRYPOINT指令，即<ENTRYPOINT> \"<CMD>\"\n\n## ENV\n设置环境变量, 后续的指令和运行时的应用，都可以直接用$NAME 来使用这个环境变量\n```\nENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>\n```\n支持的命令：ADD, COPY, ENV, EXPOSE, LABEL, USER, WORKDIR, VOLUME, STOPSIGNAL, ONBUILD\n\n## ARG\n构建参数，与ENV相同，但是容器运行时应用中无法使用\n```\nARG <参数名>[=<默认值>]\n```\n默认值可以在构建命令docker build中用--build-arg <参数名>=<值>来覆盖\n\n## VOLUME\n定义匿名卷，动态数据不应写入容器存储层（将容器导出为镜像时，不需要这些动态数据），动态数据应写入到数据卷中，容器存储层应该是无状态的。\n```\nVOLUME /data\n```\n运行容器时可以覆盖这个挂载设置，比如：\n```\n$ docker run -d -v ./mydata:/data xxxx\n```\n\n## EXPOSE\n```\nEXPOSE <端口1> [<端口2>...]\n```\n声明容器内端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务,需要应用自己开启。\n1. 帮助镜像使用者理解这个镜像服务的守护端口，方便配置映射\n2. 在使用随机端口映射(docker run -P)时，会自动随机映射EXPOSE的端口\n\n## WORKDIR\n指定工作目录（或者称为当前目录），以后镜像各层的但前目录就被改为指定的目录，如该目录不存在，则WORKDIR会帮你建立该目录\n\n## USER\n指定工作用户，与WORKDIR类似，影响以后各层的构建过程。\n这个用户必须是事先建立好的，否则无法切换。\n\n## HEALTHCHECK \n```\n// 设置检查容器健康状况的命令\nHEALTHCHECK [选项] CMD <命令>\n--interval=<间隔>：两次健康检查的间隔，默认30s\n--timeout=<时长>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认30s\n--retries=<次数>：当连续失败指定次数后，则容器被视为unhealthy，默认3次\n\n// 如果基础镜像有健康检查指令，可以先屏蔽掉其健康检查指令\nHEALTHCHECK NONE\n```\n## ONBUILD\n```\nONBUILD <其他指令>\n```\n只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。\nONBUILD时为了帮助别人定制自己而准备的\n\n## RUN、CMD和ENTRYPOINT\n- 使用 RUN 指令安装应用和软件包，构建镜像。\n- 如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。\n- 如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。\n\n## 其他构建镜像的方式\n```\n$ docker save nginx | gzip > nginx-latest.tat.gz\n$ docker load -i nginx-latest.tar.gz\n```\n{% asset_img sample.png %}\n","slug":"使用dockerfile构建镜像","published":1,"updated":"2019-07-15T02:58:14.317Z","_id":"cjy3so9my0018oungckgefg1l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用dockerfile构建镜像<br><a id=\"more\"></a></p>\n<h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>选择基础镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM:scratch,虚拟基础镜像，空白</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// shell格式</span><br><span class=\"line\">RUN echo &quot;hello world&quot;</span><br><span class=\"line\">// exec格式</span><br><span class=\"line\">RUN exec tar -zxvf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br></pre></td></tr></table></figure></p>\n<p>每一个RUN都是启动一个容器、执行命令、然后提交存储层文件变更，所以每次执行一个命令后其上下文环境(比如当前所在目录)都会初始化.</p>\n<h2 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;源路径&gt;... &lt;镜像内目标路径&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>在COPY基础上增加了一些功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;源路径&gt;... &lt;镜像内目标路径&gt;</span><br></pre></td></tr></table></figure></p>\n<p>源路径可以是url，有自动解压缩的场合使用ADD，文件复制使用COPY</p>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>当docker run时没有指定运行的命令时，CMD将会被执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// shell格式</span><br><span class=\"line\">CMD &lt;命令&gt;</span><br><span class=\"line\">// exec格式</span><br><span class=\"line\">CMD [可执行文件, &quot;参数1&quot;, &quot;参数2&quot;]</span><br><span class=\"line\">// 参数列表格式，在指定了ENTRYPOINT指令后，用CMD指定具体的参数</span><br><span class=\"line\">CMD [&quot;参数1&quot;, &quot;参数2&quot;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h2><p>通过docker run –entrypoint来指定<br>当指定了ENTRYPOINT后，CMD的含义就发生了改变，不再是直接运行其命令，而是将CMD的内容作为参数传给ENTRYPOINT指令，即<entrypoint> “<cmd>“</cmd></entrypoint></p>\n<h2 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h2><p>设置环境变量, 后续的指令和运行时的应用，都可以直接用$NAME 来使用这个环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br><span class=\"line\">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;</span><br></pre></td></tr></table></figure></p>\n<p>支持的命令：ADD, COPY, ENV, EXPOSE, LABEL, USER, WORKDIR, VOLUME, STOPSIGNAL, ONBUILD</p>\n<h2 id=\"ARG\"><a href=\"#ARG\" class=\"headerlink\" title=\"ARG\"></a>ARG</h2><p>构建参数，与ENV相同，但是容器运行时应用中无法使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>默认值可以在构建命令docker build中用–build-arg &lt;参数名&gt;=&lt;值&gt;来覆盖</p>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>定义匿名卷，动态数据不应写入容器存储层（将容器导出为镜像时，不需要这些动态数据），动态数据应写入到数据卷中，容器存储层应该是无状态的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME /data</span><br></pre></td></tr></table></figure></p>\n<p>运行容器时可以覆盖这个挂载设置，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v ./mydata:/data xxxx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>\n<p>声明容器内端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务,需要应用自己开启。</p>\n<ol>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，方便配置映射</li>\n<li>在使用随机端口映射(docker run -P)时，会自动随机映射EXPOSE的端口</li>\n</ol>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>指定工作目录（或者称为当前目录），以后镜像各层的但前目录就被改为指定的目录，如该目录不存在，则WORKDIR会帮你建立该目录</p>\n<h2 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h2><p>指定工作用户，与WORKDIR类似，影响以后各层的构建过程。<br>这个用户必须是事先建立好的，否则无法切换。</p>\n<h2 id=\"HEALTHCHECK\"><a href=\"#HEALTHCHECK\" class=\"headerlink\" title=\"HEALTHCHECK\"></a>HEALTHCHECK</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置检查容器健康状况的命令</span><br><span class=\"line\">HEALTHCHECK [选项] CMD &lt;命令&gt;</span><br><span class=\"line\">--interval=&lt;间隔&gt;：两次健康检查的间隔，默认30s</span><br><span class=\"line\">--timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认30s</span><br><span class=\"line\">--retries=&lt;次数&gt;：当连续失败指定次数后，则容器被视为unhealthy，默认3次</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果基础镜像有健康检查指令，可以先屏蔽掉其健康检查指令</span><br><span class=\"line\">HEALTHCHECK NONE</span><br></pre></td></tr></table></figure>\n<h2 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD &lt;其他指令&gt;</span><br></pre></td></tr></table></figure>\n<p>只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。<br>ONBUILD时为了帮助别人定制自己而准备的</p>\n<h2 id=\"RUN、CMD和ENTRYPOINT\"><a href=\"#RUN、CMD和ENTRYPOINT\" class=\"headerlink\" title=\"RUN、CMD和ENTRYPOINT\"></a>RUN、CMD和ENTRYPOINT</h2><ul>\n<li>使用 RUN 指令安装应用和软件包，构建镜像。</li>\n<li>如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。</li>\n<li>如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。</li>\n</ul>\n<h2 id=\"其他构建镜像的方式\"><a href=\"#其他构建镜像的方式\" class=\"headerlink\" title=\"其他构建镜像的方式\"></a>其他构建镜像的方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker save nginx | gzip &gt; nginx-latest.tat.gz</span><br><span class=\"line\">$ docker load -i nginx-latest.tar.gz</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>使用dockerfile构建镜像<br>","more":"</p>\n<h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>选择基础镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM:scratch,虚拟基础镜像，空白</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// shell格式</span><br><span class=\"line\">RUN echo &quot;hello world&quot;</span><br><span class=\"line\">// exec格式</span><br><span class=\"line\">RUN exec tar -zxvf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br></pre></td></tr></table></figure></p>\n<p>每一个RUN都是启动一个容器、执行命令、然后提交存储层文件变更，所以每次执行一个命令后其上下文环境(比如当前所在目录)都会初始化.</p>\n<h2 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;源路径&gt;... &lt;镜像内目标路径&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>在COPY基础上增加了一些功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;源路径&gt;... &lt;镜像内目标路径&gt;</span><br></pre></td></tr></table></figure></p>\n<p>源路径可以是url，有自动解压缩的场合使用ADD，文件复制使用COPY</p>\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><p>当docker run时没有指定运行的命令时，CMD将会被执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// shell格式</span><br><span class=\"line\">CMD &lt;命令&gt;</span><br><span class=\"line\">// exec格式</span><br><span class=\"line\">CMD [可执行文件, &quot;参数1&quot;, &quot;参数2&quot;]</span><br><span class=\"line\">// 参数列表格式，在指定了ENTRYPOINT指令后，用CMD指定具体的参数</span><br><span class=\"line\">CMD [&quot;参数1&quot;, &quot;参数2&quot;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h2><p>通过docker run –entrypoint来指定<br>当指定了ENTRYPOINT后，CMD的含义就发生了改变，不再是直接运行其命令，而是将CMD的内容作为参数传给ENTRYPOINT指令，即<entrypoint> “<cmd>“</cmd></entrypoint></p>\n<h2 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h2><p>设置环境变量, 后续的指令和运行时的应用，都可以直接用$NAME 来使用这个环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br><span class=\"line\">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;</span><br></pre></td></tr></table></figure></p>\n<p>支持的命令：ADD, COPY, ENV, EXPOSE, LABEL, USER, WORKDIR, VOLUME, STOPSIGNAL, ONBUILD</p>\n<h2 id=\"ARG\"><a href=\"#ARG\" class=\"headerlink\" title=\"ARG\"></a>ARG</h2><p>构建参数，与ENV相同，但是容器运行时应用中无法使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>默认值可以在构建命令docker build中用–build-arg &lt;参数名&gt;=&lt;值&gt;来覆盖</p>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>定义匿名卷，动态数据不应写入容器存储层（将容器导出为镜像时，不需要这些动态数据），动态数据应写入到数据卷中，容器存储层应该是无状态的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME /data</span><br></pre></td></tr></table></figure></p>\n<p>运行容器时可以覆盖这个挂载设置，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v ./mydata:/data xxxx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>\n<p>声明容器内端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务,需要应用自己开启。</p>\n<ol>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，方便配置映射</li>\n<li>在使用随机端口映射(docker run -P)时，会自动随机映射EXPOSE的端口</li>\n</ol>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>指定工作目录（或者称为当前目录），以后镜像各层的但前目录就被改为指定的目录，如该目录不存在，则WORKDIR会帮你建立该目录</p>\n<h2 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h2><p>指定工作用户，与WORKDIR类似，影响以后各层的构建过程。<br>这个用户必须是事先建立好的，否则无法切换。</p>\n<h2 id=\"HEALTHCHECK\"><a href=\"#HEALTHCHECK\" class=\"headerlink\" title=\"HEALTHCHECK\"></a>HEALTHCHECK</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置检查容器健康状况的命令</span><br><span class=\"line\">HEALTHCHECK [选项] CMD &lt;命令&gt;</span><br><span class=\"line\">--interval=&lt;间隔&gt;：两次健康检查的间隔，默认30s</span><br><span class=\"line\">--timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认30s</span><br><span class=\"line\">--retries=&lt;次数&gt;：当连续失败指定次数后，则容器被视为unhealthy，默认3次</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果基础镜像有健康检查指令，可以先屏蔽掉其健康检查指令</span><br><span class=\"line\">HEALTHCHECK NONE</span><br></pre></td></tr></table></figure>\n<h2 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD &lt;其他指令&gt;</span><br></pre></td></tr></table></figure>\n<p>只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。<br>ONBUILD时为了帮助别人定制自己而准备的</p>\n<h2 id=\"RUN、CMD和ENTRYPOINT\"><a href=\"#RUN、CMD和ENTRYPOINT\" class=\"headerlink\" title=\"RUN、CMD和ENTRYPOINT\"></a>RUN、CMD和ENTRYPOINT</h2><ul>\n<li>使用 RUN 指令安装应用和软件包，构建镜像。</li>\n<li>如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。</li>\n<li>如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。</li>\n</ul>\n<h2 id=\"其他构建镜像的方式\"><a href=\"#其他构建镜像的方式\" class=\"headerlink\" title=\"其他构建镜像的方式\"></a>其他构建镜像的方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker save nginx | gzip &gt; nginx-latest.tat.gz</span><br><span class=\"line\">$ docker load -i nginx-latest.tar.gz</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/2019/02/线程状态/线程状态.png","slug":"线程状态.png","post":"cjy3so9mq000eoung88x5y7ez","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/synchroniezd锁优化/偏向锁到重量级锁.png","slug":"偏向锁到重量级锁.png","post":"cjy3so9mr000koungsbkbufwi","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/多线程并发面试要点/偏向锁到重量级锁.png","slug":"偏向锁到重量级锁.png","post":"cjy3so9mw0012oung4fbdpz9n","modified":0,"renderable":0},{"_id":"source/_posts/2019/02/java程序运行原理/JVM运行时数据区.png","slug":"JVM运行时数据区.png","post":"cjy3so9ml0001oungmhfrab32","modified":0,"renderable":0},{"_id":"source/_posts/2019/02/开发必知的几个开源协议/开源协议对比图.jpg","slug":"开源协议对比图.jpg","post":"cjy3so9mo0009oungap7mse0w","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/中间件面试要点/redis线程模型.png","slug":"redis线程模型.png","post":"cjy3so9ms000noungobgne5tr","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/数据库面试要点/死锁1.jpg","slug":"死锁1.jpg","post":"cjy3so9mt000soungkkogt3qq","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/数据库面试要点/死锁2.jpg","slug":"死锁2.jpg","post":"cjy3so9mt000soungkkogt3qq","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/dns轮询.png","slug":"dns轮询.png","post":"cjy3so9mv000xoungxtcisc0l","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/keepalived架构.jpg","slug":"keepalived架构.jpg","post":"cjy3so9mv000xoungxtcisc0l","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/lvs-f5架构.jpg","slug":"lvs-f5架构.jpg","post":"cjy3so9mv000xoungxtcisc0l","modified":0,"renderable":0},{"_id":"source/_posts/2019/03/部署策略、高可用、高可靠等面试要点/一致性hash.png","slug":"一致性hash.png","post":"cjy3so9mv000xoungxtcisc0l","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjy3so9mh0000oungq91n5wmr","category_id":"cjy3rk5910004c0ngtoria2cr","_id":"cjy3so9mn0004oung1ppv5g30"},{"post_id":"cjy3so9ml0001oungmhfrab32","category_id":"cjy3rk59a000gc0ngqhfdr3f6","_id":"cjy3so9mo0007oungi39t4f4t"},{"post_id":"cjy3so9mm0002oungxteczp2c","category_id":"cjy3rk5910004c0ngtoria2cr","_id":"cjy3so9mp000aoung2nxn1p8a"},{"post_id":"cjy3so9mn0003oungucs9eir0","category_id":"cjy3rk59a000gc0ngqhfdr3f6","_id":"cjy3so9mq000doung95xmid31"},{"post_id":"cjy3so9mo0006oung60jo2zdb","category_id":"cjy3rk59a000gc0ngqhfdr3f6","_id":"cjy3so9mq000foung2p4zqcxb"},{"post_id":"cjy3so9mo0009oungap7mse0w","category_id":"cjy3rk59j001bc0ngoc02qtsp","_id":"cjy3so9mr000ioungxlvmltfj"},{"post_id":"cjy3so9mp000coungl3yeb1md","category_id":"cjy3rk59a000gc0ngqhfdr3f6","_id":"cjy3so9mr000loung01hluwy4"},{"post_id":"cjy3so9mq000eoung88x5y7ez","category_id":"cjy3rk59a000gc0ngqhfdr3f6","_id":"cjy3so9ms000ooungcjacsnq6"},{"post_id":"cjy3so9mq000houng62wklo0j","category_id":"cjy3rk59c000lc0ngpn5s4ypo","_id":"cjy3so9mt000qoungpkfx9ynq"},{"post_id":"cjy3so9mr000koungsbkbufwi","category_id":"cjy3rk59e000rc0ngs2vxrjzr","_id":"cjy3so9mt000toungtfg7su6i"},{"post_id":"cjy3so9ms000noungobgne5tr","category_id":"cjy3rk59h0013c0ngdqnru9hx","_id":"cjy3so9mu000voungrudq0b1a"},{"post_id":"cjy3so9ms000poungflov88th","category_id":"cjy3rk59g000yc0ngfibvdei8","_id":"cjy3so9mv000youngzb5nvaij"},{"post_id":"cjy3so9mt000soungkkogt3qq","category_id":"cjy3rk59m001nc0ng1qdi41av","_id":"cjy3so9mw0010oungx5pa74o3"},{"post_id":"cjy3so9mv000xoungxtcisc0l","category_id":"cjy3rk59m001rc0ng3y8crhll","_id":"cjy3so9my0014oung4sluk5wg"},{"post_id":"cjy3so9mw0012oung4fbdpz9n","category_id":"cjy3rk59l001ic0ng66tdj9pk","_id":"cjy3so9mz0019oung3pw5dxe9"},{"post_id":"cjy3so9mx0013oung7mik5jyh","category_id":"cjy3su7gk0000sxng2jhywvnd","_id":"cjy3su7gs0006sxngch30cv3z"},{"post_id":"cjy3so9mw000zoungttojhrb9","category_id":"cjy3su7gk0000sxng2jhywvnd","_id":"cjy3su7gt000asxngi3xv7yn0"},{"post_id":"cjy3so9mu000uoungtn5t27is","category_id":"cjy3su7gk0000sxng2jhywvnd","_id":"cjy3su7gt000bsxngrms9yjzz"},{"post_id":"cjy3so9my0016oungky8eke91","category_id":"cjy3su7gk0000sxng2jhywvnd","_id":"cjy3su7gt000dsxngbmcy8sbu"},{"post_id":"cjy3so9my0018oungckgefg1l","category_id":"cjy3su7gk0000sxng2jhywvnd","_id":"cjy3su7ik000fsxngm6sgexah"}],"PostTag":[{"post_id":"cjy3so9mm0002oungxteczp2c","tag_id":"cjy3rk5960009c0nghrpqhazl","_id":"cjy3so9mo0005oungbo7n7cub"},{"post_id":"cjy3so9mm0002oungxteczp2c","tag_id":"cjy3rk59a000fc0ngam7mc22s","_id":"cjy3so9mo0008oungieqy5sr0"},{"post_id":"cjy3so9mo0006oung60jo2zdb","tag_id":"cjy3rk59g000zc0ngatvhvyhd","_id":"cjy3so9mp000boungmiuqvji5"},{"post_id":"cjy3so9mp000coungl3yeb1md","tag_id":"cjy3rk59i0016c0ng9zeqq54f","_id":"cjy3so9mq000goungt9gd2uhs"},{"post_id":"cjy3so9mq000eoung88x5y7ez","tag_id":"cjy3rk59i0016c0ng9zeqq54f","_id":"cjy3so9mr000joungffgw02x1"},{"post_id":"cjy3so9mq000houng62wklo0j","tag_id":"cjy3rk59b000jc0ngrmg4jbrk","_id":"cjy3so9ms000moungmdll2x85"},{"post_id":"cjy3so9ms000noungobgne5tr","tag_id":"cjy3rk59b000jc0ngrmg4jbrk","_id":"cjy3so9mt000roungr0o93vwg"},{"post_id":"cjy3so9mt000soungkkogt3qq","tag_id":"cjy3rk59b000jc0ngrmg4jbrk","_id":"cjy3so9mv000woungfj1ypogh"},{"post_id":"cjy3so9mv000xoungxtcisc0l","tag_id":"cjy3rk59b000jc0ngrmg4jbrk","_id":"cjy3so9mw0011oung5p7yhfto"},{"post_id":"cjy3so9mw0012oung4fbdpz9n","tag_id":"cjy3rk59b000jc0ngrmg4jbrk","_id":"cjy3so9my0015oungubhh36d3"},{"post_id":"cjy3so9mw0012oung4fbdpz9n","tag_id":"cjy3rk59i0016c0ng9zeqq54f","_id":"cjy3so9my0017oungjw1gmoir"},{"post_id":"cjy3so9mx0013oung7mik5jyh","tag_id":"cjy3su7gn0001sxng4gv2tyhg","_id":"cjy3su7gr0004sxng52s71nsq"},{"post_id":"cjy3so9mw000zoungttojhrb9","tag_id":"cjy3su7gn0001sxng4gv2tyhg","_id":"cjy3su7gr0005sxngv054ujcx"},{"post_id":"cjy3so9mu000uoungtn5t27is","tag_id":"cjy3su7gn0001sxng4gv2tyhg","_id":"cjy3su7gs0009sxngafqahxni"},{"post_id":"cjy3so9my0016oungky8eke91","tag_id":"cjy3su7gn0001sxng4gv2tyhg","_id":"cjy3su7gt000csxng1qokuvwz"},{"post_id":"cjy3so9my0018oungckgefg1l","tag_id":"cjy3su7gn0001sxng4gv2tyhg","_id":"cjy3su7ik000esxngxjckscjn"}],"Tag":[{"name":"分布式","_id":"cjy3rk5960009c0nghrpqhazl"},{"name":"rpc","_id":"cjy3rk59a000fc0ngam7mc22s"},{"name":"面试","_id":"cjy3rk59b000jc0ngrmg4jbrk"},{"name":"配置","_id":"cjy3rk59g000zc0ngatvhvyhd"},{"name":"多线程","_id":"cjy3rk59i0016c0ng9zeqq54f"},{"name":"docker","_id":"cjy3su7gn0001sxng4gv2tyhg"}]}}